
cmiv2029.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00002ef8  00002fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ef8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  0080016e  0080016e  0000301a  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  0000301a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  00003022  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007003  00000000  00000000  00003444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020f9  00000000  00000000  0000a447  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000039fe  00000000  00000000  0000c540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b88  00000000  00000000  0000ff40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000029e7  00000000  00000000  00010ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000438a  00000000  00000000  000134af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004c8  00000000  00000000  00017839  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
       2:	00 00       	nop
       4:	6b c1       	rjmp	.+726    	; 0x2dc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c1       	rjmp	.+722    	; 0x2dc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c1       	rjmp	.+718    	; 0x2dc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c1       	rjmp	.+714    	; 0x2dc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c1       	rjmp	.+710    	; 0x2dc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c1       	rjmp	.+706    	; 0x2dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c1       	rjmp	.+702    	; 0x2dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	5d c1       	rjmp	.+698    	; 0x2dc <__bad_interrupt>
      22:	00 00       	nop
      24:	5b c1       	rjmp	.+694    	; 0x2dc <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c7       	rjmp	.+3740   	; 0xec6 <__vector_10>
      2a:	00 00       	nop
      2c:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_11>
      30:	55 c1       	rjmp	.+682    	; 0x2dc <__bad_interrupt>
      32:	00 00       	nop
      34:	53 c1       	rjmp	.+678    	; 0x2dc <__bad_interrupt>
      36:	00 00       	nop
      38:	51 c1       	rjmp	.+674    	; 0x2dc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c1       	rjmp	.+670    	; 0x2dc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c1       	rjmp	.+666    	; 0x2dc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c1       	rjmp	.+662    	; 0x2dc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c1       	rjmp	.+658    	; 0x2dc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c1       	rjmp	.+654    	; 0x2dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c1       	rjmp	.+650    	; 0x2dc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c1       	rjmp	.+646    	; 0x2dc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c1       	rjmp	.+642    	; 0x2dc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c1       	rjmp	.+638    	; 0x2dc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c1       	rjmp	.+634    	; 0x2dc <__bad_interrupt>
      62:	00 00       	nop
      64:	da c4       	rjmp	.+2484   	; 0xa1a <__vector_25>
      66:	00 00       	nop
      68:	39 c1       	rjmp	.+626    	; 0x2dc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	37 c1       	rjmp	.+622    	; 0x2dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c1       	rjmp	.+618    	; 0x2dc <__bad_interrupt>
      72:	00 00       	nop
      74:	33 c1       	rjmp	.+614    	; 0x2dc <__bad_interrupt>
      76:	00 00       	nop
      78:	31 c1       	rjmp	.+610    	; 0x2dc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2f c1       	rjmp	.+606    	; 0x2dc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c1       	rjmp	.+602    	; 0x2dc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c1       	rjmp	.+598    	; 0x2dc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c1       	rjmp	.+594    	; 0x2dc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	27 c1       	rjmp	.+590    	; 0x2dc <__bad_interrupt>
      8e:	00 00       	nop
      90:	25 c1       	rjmp	.+586    	; 0x2dc <__bad_interrupt>
      92:	00 00       	nop
      94:	23 c1       	rjmp	.+582    	; 0x2dc <__bad_interrupt>
      96:	00 00       	nop
      98:	21 c1       	rjmp	.+578    	; 0x2dc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1f c1       	rjmp	.+574    	; 0x2dc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1d c1       	rjmp	.+570    	; 0x2dc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1b c1       	rjmp	.+566    	; 0x2dc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	19 c1       	rjmp	.+562    	; 0x2dc <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__trampolines_end>:
      ac:	6e 61       	ori	r22, 0x1E	; 30
      ae:	6e 00       	.word	0x006e	; ????

000000b0 <__c.2332>:
      b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     100:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     110:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     120:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     130:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     140:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     150:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     160:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     170:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     180:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     190:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ae <ProductString>:
     1ae:	22 03 4c 00 45 00 44 00 20 00 53 00 4d 00 41 00     ".L.E.D. .S.M.A.
     1be:	52 00 54 00 20 00 44 00 52 00 49 00 56 00 45 00     R.T. .D.R.I.V.E.
     1ce:	52 00 00 00                                         R...

000001d2 <ManufacturerString>:
     1d2:	2e 03 4e 00 4f 00 42 00 55 00 4f 00 20 00 45 00     ..N.O.B.U.O. .E.
     1e2:	4c 00 45 00 43 00 54 00 52 00 4f 00 4e 00 49 00     L.E.C.T.R.O.N.I.
     1f2:	43 00 53 00 20 00 4b 00 2e 00 4b 00 2e 00 00 00     C.S. .K...K.....

00000202 <LanguageString>:
     202:	04 03 09 04                                         ....

00000206 <ConfigurationDescriptor>:
     206:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     216:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     226:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     236:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000244 <DeviceDescriptor>:
     244:	12 01 10 01 02 00 00 08 a3 21 10 20 01 00 01 02     .........!. ....
     254:	dc 01                                               ..

00000256 <__c.2529>:
     256:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     266:	47 00                                               G.

00000268 <pstr_an>:
     268:	61 6e 00                                            an.

0000026b <pstr_nfinity>:
     26b:	6e 66 69 6e 69 74 79 00                             nfinity.

00000273 <pwr_m10>:
     273:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     283:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028b <pwr_p10>:
     28b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     29b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	da e0       	ldi	r29, 0x0A	; 10
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	cd bf       	out	0x3d, r28	; 61

000002b0 <__do_copy_data>:
     2b0:	11 e0       	ldi	r17, 0x01	; 1
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	e8 ef       	ldi	r30, 0xF8	; 248
     2b8:	fe e2       	ldi	r31, 0x2E	; 46
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__do_copy_data+0x10>
     2bc:	05 90       	lpm	r0, Z+
     2be:	0d 92       	st	X+, r0
     2c0:	ae 36       	cpi	r26, 0x6E	; 110
     2c2:	b1 07       	cpc	r27, r17
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <__do_copy_data+0xc>

000002c6 <__do_clear_bss>:
     2c6:	22 e0       	ldi	r18, 0x02	; 2
     2c8:	ae e6       	ldi	r26, 0x6E	; 110
     2ca:	b1 e0       	ldi	r27, 0x01	; 1
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <.do_clear_bss_start>

000002ce <.do_clear_bss_loop>:
     2ce:	1d 92       	st	X+, r1

000002d0 <.do_clear_bss_start>:
     2d0:	a5 31       	cpi	r26, 0x15	; 21
     2d2:	b2 07       	cpc	r27, r18
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <.do_clear_bss_loop>
     2d6:	7e d3       	rcall	.+1788   	; 0x9d4 <main>
     2d8:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <_exit>

000002dc <__bad_interrupt>:
     2dc:	91 ce       	rjmp	.-734    	; 0x0 <__vectors>

000002de <update_mcp4911_1>:
        temperature2 /= 8;
        opticalpower1 /= 8;
        opticalpower2 /= 8;
        opticalpower3 /= 8;
    }
}
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	ec 01       	movw	r28, r24
     2e4:	f8 94       	cli
     2e6:	28 98       	cbi	0x05, 0	; 5
     2e8:	8f e8       	ldi	r24, 0x8F	; 143
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <update_mcp4911_1+0xe>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <update_mcp4911_1+0x14>
     2f2:	00 00       	nop
     2f4:	ce 01       	movw	r24, r28
     2f6:	26 e0       	ldi	r18, 0x06	; 6
     2f8:	95 95       	asr	r25
     2fa:	87 95       	ror	r24
     2fc:	2a 95       	dec	r18
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <update_mcp4911_1+0x1a>
     300:	80 67       	ori	r24, 0x70	; 112
     302:	ca d3       	rcall	.+1940   	; 0xa98 <spi_transfer>
     304:	8c 2f       	mov	r24, r28
     306:	88 0f       	add	r24, r24
     308:	88 0f       	add	r24, r24
     30a:	c6 d3       	rcall	.+1932   	; 0xa98 <spi_transfer>
     30c:	28 9a       	sbi	0x05, 0	; 5
     30e:	8f e8       	ldi	r24, 0x8F	; 143
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <update_mcp4911_1+0x34>
     316:	00 c0       	rjmp	.+0      	; 0x318 <update_mcp4911_1+0x3a>
     318:	00 00       	nop
     31a:	78 94       	sei
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <update_mcp4911_2>:
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	ec 01       	movw	r28, r24
     328:	f8 94       	cli
     32a:	2c 98       	cbi	0x05, 4	; 5
     32c:	8f e8       	ldi	r24, 0x8F	; 143
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <update_mcp4911_2+0xe>
     334:	00 c0       	rjmp	.+0      	; 0x336 <update_mcp4911_2+0x14>
     336:	00 00       	nop
     338:	ce 01       	movw	r24, r28
     33a:	26 e0       	ldi	r18, 0x06	; 6
     33c:	95 95       	asr	r25
     33e:	87 95       	ror	r24
     340:	2a 95       	dec	r18
     342:	e1 f7       	brne	.-8      	; 0x33c <update_mcp4911_2+0x1a>
     344:	80 67       	ori	r24, 0x70	; 112
     346:	a8 d3       	rcall	.+1872   	; 0xa98 <spi_transfer>
     348:	8c 2f       	mov	r24, r28
     34a:	88 0f       	add	r24, r24
     34c:	88 0f       	add	r24, r24
     34e:	a4 d3       	rcall	.+1864   	; 0xa98 <spi_transfer>
     350:	2c 9a       	sbi	0x05, 4	; 5
     352:	8f e8       	ldi	r24, 0x8F	; 143
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <update_mcp4911_2+0x34>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <update_mcp4911_2+0x3a>
     35c:	00 00       	nop
     35e:	78 94       	sei
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <read_ltc2452_1>:
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	f8 94       	cli
     36c:	2d 98       	cbi	0x05, 5	; 5
     36e:	8f e8       	ldi	r24, 0x8F	; 143
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <read_ltc2452_1+0xc>
     376:	00 c0       	rjmp	.+0      	; 0x378 <read_ltc2452_1+0x12>
     378:	00 00       	nop
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	8d d3       	rcall	.+1818   	; 0xa98 <spi_transfer>
     37e:	c8 2f       	mov	r28, r24
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	dc 2f       	mov	r29, r28
     384:	cc 27       	eor	r28, r28
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	87 d3       	rcall	.+1806   	; 0xa98 <spi_transfer>
     38a:	2d 9a       	sbi	0x05, 5	; 5
     38c:	ef e8       	ldi	r30, 0x8F	; 143
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	31 97       	sbiw	r30, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <read_ltc2452_1+0x2a>
     394:	00 c0       	rjmp	.+0      	; 0x396 <read_ltc2452_1+0x30>
     396:	00 00       	nop
     398:	78 94       	sei
     39a:	9e 01       	movw	r18, r28
     39c:	28 2b       	or	r18, r24
     39e:	c9 01       	movw	r24, r18
     3a0:	90 58       	subi	r25, 0x80	; 128
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <read_ltc2452_2>:
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	f8 94       	cli
     3ae:	2e 98       	cbi	0x05, 6	; 5
     3b0:	8f e8       	ldi	r24, 0x8F	; 143
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <read_ltc2452_2+0xc>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <read_ltc2452_2+0x12>
     3ba:	00 00       	nop
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	6c d3       	rcall	.+1752   	; 0xa98 <spi_transfer>
     3c0:	c8 2f       	mov	r28, r24
     3c2:	d0 e0       	ldi	r29, 0x00	; 0
     3c4:	dc 2f       	mov	r29, r28
     3c6:	cc 27       	eor	r28, r28
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	66 d3       	rcall	.+1740   	; 0xa98 <spi_transfer>
     3cc:	2e 9a       	sbi	0x05, 6	; 5
     3ce:	ef e8       	ldi	r30, 0x8F	; 143
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	31 97       	sbiw	r30, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <read_ltc2452_2+0x2a>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <read_ltc2452_2+0x30>
     3d8:	00 00       	nop
     3da:	78 94       	sei
     3dc:	9e 01       	movw	r18, r28
     3de:	28 2b       	or	r18, r24
     3e0:	c9 01       	movw	r24, r18
     3e2:	90 58       	subi	r25, 0x80	; 128
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <read_ltc2452_3>:
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	f8 94       	cli
     3f0:	2f 98       	cbi	0x05, 7	; 5
     3f2:	8f e8       	ldi	r24, 0x8F	; 143
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <read_ltc2452_3+0xc>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <read_ltc2452_3+0x12>
     3fc:	00 00       	nop
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	4b d3       	rcall	.+1686   	; 0xa98 <spi_transfer>
     402:	c8 2f       	mov	r28, r24
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	dc 2f       	mov	r29, r28
     408:	cc 27       	eor	r28, r28
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	45 d3       	rcall	.+1674   	; 0xa98 <spi_transfer>
     40e:	2f 9a       	sbi	0x05, 7	; 5
     410:	ef e8       	ldi	r30, 0x8F	; 143
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	31 97       	sbiw	r30, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
     41c:	78 94       	sei
     41e:	9e 01       	movw	r18, r28
     420:	28 2b       	or	r18, r24
     422:	c9 01       	movw	r24, r18
     424:	90 58       	subi	r25, 0x80	; 128
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <read_temperature>:
     42c:	90 e4       	ldi	r25, 0x40	; 64
     42e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     432:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     436:	28 2f       	mov	r18, r24
     438:	2f 71       	andi	r18, 0x1F	; 31
     43a:	92 2b       	or	r25, r18
     43c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     440:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     444:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     448:	80 72       	andi	r24, 0x20	; 32
     44a:	89 2b       	or	r24, r25
     44c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     450:	87 ec       	ldi	r24, 0xC7	; 199
     452:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     456:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     45a:	86 fd       	sbrc	r24, 6
     45c:	fc cf       	rjmp	.-8      	; 0x456 <read_temperature+0x2a>
     45e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     462:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	92 2b       	or	r25, r18
     46a:	93 70       	andi	r25, 0x03	; 3
     46c:	08 95       	ret

0000046e <get_temperature>:
     46e:	8f 92       	push	r8
     470:	9f 92       	push	r9
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	bc 01       	movw	r22, r24
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__floatunsisf>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 ec       	ldi	r19, 0xC0	; 192
     48c:	4f e7       	ldi	r20, 0x7F	; 127
     48e:	54 e4       	ldi	r21, 0x44	; 68
     490:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__divsf3>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 ea       	ldi	r20, 0xA0	; 160
     49a:	50 e4       	ldi	r21, 0x40	; 64
     49c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     4a0:	6b 01       	movw	r12, r22
     4a2:	7c 01       	movw	r14, r24
     4a4:	25 e9       	ldi	r18, 0x95	; 149
     4a6:	35 e6       	ldi	r19, 0x65	; 101
     4a8:	40 ef       	ldi	r20, 0xF0	; 240
     4aa:	5f e3       	ldi	r21, 0x3F	; 63
     4ac:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     4b0:	a7 01       	movw	r20, r14
     4b2:	96 01       	movw	r18, r12
     4b4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     4b8:	a7 01       	movw	r20, r14
     4ba:	96 01       	movw	r18, r12
     4bc:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     4c0:	4b 01       	movw	r8, r22
     4c2:	5c 01       	movw	r10, r24
     4c4:	2f e6       	ldi	r18, 0x6F	; 111
     4c6:	32 e1       	ldi	r19, 0x12	; 18
     4c8:	43 e4       	ldi	r20, 0x43	; 67
     4ca:	51 e4       	ldi	r21, 0x41	; 65
     4cc:	c7 01       	movw	r24, r14
     4ce:	b6 01       	movw	r22, r12
     4d0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     4d4:	a7 01       	movw	r20, r14
     4d6:	96 01       	movw	r18, r12
     4d8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     4dc:	9b 01       	movw	r18, r22
     4de:	ac 01       	movw	r20, r24
     4e0:	c5 01       	movw	r24, r10
     4e2:	b4 01       	movw	r22, r8
     4e4:	0e 94 94 0b 	call	0x1728	; 0x1728 <__subsf3>
     4e8:	4b 01       	movw	r8, r22
     4ea:	5c 01       	movw	r10, r24
     4ec:	2d e7       	ldi	r18, 0x7D	; 125
     4ee:	3f e3       	ldi	r19, 0x3F	; 63
     4f0:	41 e4       	ldi	r20, 0x41	; 65
     4f2:	52 e4       	ldi	r21, 0x42	; 66
     4f4:	c7 01       	movw	r24, r14
     4f6:	b6 01       	movw	r22, r12
     4f8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__mulsf3>
     4fc:	9b 01       	movw	r18, r22
     4fe:	ac 01       	movw	r20, r24
     500:	c5 01       	movw	r24, r10
     502:	b4 01       	movw	r22, r8
     504:	0e 94 95 0b 	call	0x172a	; 0x172a <__addsf3>
     508:	2f e2       	ldi	r18, 0x2F	; 47
     50a:	3d ed       	ldi	r19, 0xDD	; 221
     50c:	4b e0       	ldi	r20, 0x0B	; 11
     50e:	52 e4       	ldi	r21, 0x42	; 66
     510:	0e 94 94 0b 	call	0x1728	; 0x1728 <__subsf3>
     514:	6b 01       	movw	r12, r22
     516:	7c 01       	movw	r14, r24
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 ea       	ldi	r20, 0xA0	; 160
     51e:	52 e4       	ldi	r21, 0x42	; 66
     520:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__gesf2>
     524:	18 16       	cp	r1, r24
     526:	8c f0       	brlt	.+34     	; 0x54a <get_temperature+0xdc>
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e2       	ldi	r20, 0x20	; 32
     52e:	51 ec       	ldi	r21, 0xC1	; 193
     530:	c7 01       	movw	r24, r14
     532:	b6 01       	movw	r22, r12
     534:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__cmpsf2>
     538:	87 ff       	sbrs	r24, 7
     53a:	0d c0       	rjmp	.+26     	; 0x556 <get_temperature+0xe8>
     53c:	c1 2c       	mov	r12, r1
     53e:	d1 2c       	mov	r13, r1
     540:	90 e2       	ldi	r25, 0x20	; 32
     542:	e9 2e       	mov	r14, r25
     544:	91 ec       	ldi	r25, 0xC1	; 193
     546:	f9 2e       	mov	r15, r25
     548:	06 c0       	rjmp	.+12     	; 0x556 <get_temperature+0xe8>
     54a:	c1 2c       	mov	r12, r1
     54c:	d1 2c       	mov	r13, r1
     54e:	80 ea       	ldi	r24, 0xA0	; 160
     550:	e8 2e       	mov	r14, r24
     552:	82 e4       	ldi	r24, 0x42	; 66
     554:	f8 2e       	mov	r15, r24
     556:	c7 01       	movw	r24, r14
     558:	b6 01       	movw	r22, r12
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <EVENT_USB_Device_Connect>:
     56c:	08 95       	ret

0000056e <EVENT_USB_Device_Disconnect>:
     56e:	08 95       	ret

00000570 <EVENT_USB_Device_ConfigurationChanged>:
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	32 c7       	rjmp	.+3684   	; 0x13da <CDC_Device_ConfigureEndpoints>

00000576 <EVENT_USB_Device_ControlRequest>:
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <CDC_Device_ProcessControlRequest>

0000057e <EVENT_CDC_Device_ControLineStateChanged>:
     57e:	08 95       	ret

00000580 <print>:
     580:	2f 92       	push	r2
     582:	3f 92       	push	r3
     584:	4f 92       	push	r4
     586:	5f 92       	push	r5
     588:	6f 92       	push	r6
     58a:	7f 92       	push	r7
     58c:	8f 92       	push	r8
     58e:	9f 92       	push	r9
     590:	af 92       	push	r10
     592:	bf 92       	push	r11
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	c0 54       	subi	r28, 0x40	; 64
     5aa:	d1 09       	sbc	r29, r1
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	8e 01       	movw	r16, r28
     5b8:	0f 5f       	subi	r16, 0xFF	; 255
     5ba:	1f 4f       	sbci	r17, 0xFF	; 255
     5bc:	80 e4       	ldi	r24, 0x40	; 64
     5be:	f8 01       	movw	r30, r16
     5c0:	11 92       	st	Z+, r1
     5c2:	8a 95       	dec	r24
     5c4:	e9 f7       	brne	.-6      	; 0x5c0 <print+0x40>
     5c6:	30 90 a0 01 	lds	r3, 0x01A0	; 0x8001a0 <ledvalue2>
     5ca:	20 90 a1 01 	lds	r2, 0x01A1	; 0x8001a1 <ledvalue2+0x1>
     5ce:	50 90 a2 01 	lds	r5, 0x01A2	; 0x8001a2 <ledvalue1>
     5d2:	40 90 a3 01 	lds	r4, 0x01A3	; 0x8001a3 <ledvalue1+0x1>
     5d6:	09 df       	rcall	.-494    	; 0x3ea <read_ltc2452_3>
     5d8:	78 2e       	mov	r7, r24
     5da:	69 2e       	mov	r6, r25
     5dc:	e5 de       	rcall	.-566    	; 0x3a8 <read_ltc2452_2>
     5de:	98 2e       	mov	r9, r24
     5e0:	89 2e       	mov	r8, r25
     5e2:	c1 de       	rcall	.-638    	; 0x366 <read_ltc2452_1>
     5e4:	b8 2e       	mov	r11, r24
     5e6:	a9 2e       	mov	r10, r25
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	1f df       	rcall	.-450    	; 0x42c <read_temperature>
     5ee:	3f df       	rcall	.-386    	; 0x46e <get_temperature>
     5f0:	f6 2e       	mov	r15, r22
     5f2:	e7 2e       	mov	r14, r23
     5f4:	d8 2e       	mov	r13, r24
     5f6:	c9 2e       	mov	r12, r25
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	17 df       	rcall	.-466    	; 0x42c <read_temperature>
     5fe:	37 df       	rcall	.-402    	; 0x46e <get_temperature>
     600:	2f 92       	push	r2
     602:	3f 92       	push	r3
     604:	4f 92       	push	r4
     606:	5f 92       	push	r5
     608:	6f 92       	push	r6
     60a:	7f 92       	push	r7
     60c:	8f 92       	push	r8
     60e:	9f 92       	push	r9
     610:	af 92       	push	r10
     612:	bf 92       	push	r11
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	7f 93       	push	r23
     622:	6f 93       	push	r22
     624:	8b e1       	ldi	r24, 0x1B	; 27
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	9f 93       	push	r25
     62a:	8f 93       	push	r24
     62c:	1f 93       	push	r17
     62e:	0f 93       	push	r16
     630:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <sprintf>
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	f8 01       	movw	r30, r16
     640:	61 91       	ld	r22, Z+
     642:	8f 01       	movw	r16, r30
     644:	66 23       	and	r22, r22
     646:	21 f0       	breq	.+8      	; 0x650 <print+0xd0>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	eb d6       	rcall	.+3542   	; 0x1424 <CDC_Device_SendByte>
     64e:	f7 cf       	rjmp	.-18     	; 0x63e <print+0xbe>
     650:	c0 5c       	subi	r28, 0xC0	; 192
     652:	df 4f       	sbci	r29, 0xFF	; 255
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	9f 90       	pop	r9
     674:	8f 90       	pop	r8
     676:	7f 90       	pop	r7
     678:	6f 90       	pop	r6
     67a:	5f 90       	pop	r5
     67c:	4f 90       	pop	r4
     67e:	3f 90       	pop	r3
     680:	2f 90       	pop	r2
     682:	08 95       	ret

00000684 <led1_update>:
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	81 15       	cp	r24, r1
     68a:	24 e0       	ldi	r18, 0x04	; 4
     68c:	92 07       	cpc	r25, r18
     68e:	38 f4       	brcc	.+14     	; 0x69e <led1_update+0x1a>
     690:	ec 01       	movw	r28, r24
     692:	25 de       	rcall	.-950    	; 0x2de <update_mcp4911_1>
     694:	cd 2b       	or	r28, r29
     696:	11 f4       	brne	.+4      	; 0x69c <led1_update+0x18>
     698:	5e 98       	cbi	0x0b, 6	; 11
     69a:	01 c0       	rjmp	.+2      	; 0x69e <led1_update+0x1a>
     69c:	5e 9a       	sbi	0x0b, 6	; 11
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <led2_update>:
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	81 15       	cp	r24, r1
     6aa:	24 e0       	ldi	r18, 0x04	; 4
     6ac:	92 07       	cpc	r25, r18
     6ae:	38 f4       	brcc	.+14     	; 0x6be <led2_update+0x1a>
     6b0:	ec 01       	movw	r28, r24
     6b2:	37 de       	rcall	.-914    	; 0x322 <update_mcp4911_2>
     6b4:	cd 2b       	or	r28, r29
     6b6:	11 f4       	brne	.+4      	; 0x6bc <led2_update+0x18>
     6b8:	5f 98       	cbi	0x0b, 7	; 11
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <led2_update+0x1a>
     6bc:	5f 9a       	sbi	0x0b, 7	; 11
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <led_default>:
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	f9 99       	sbic	0x1f, 1	; 31
     6ce:	fe cf       	rjmp	.-4      	; 0x6cc <led_default+0x8>
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <eeprom_read_word>
     6d8:	8c 01       	movw	r16, r24
     6da:	f9 99       	sbic	0x1f, 1	; 31
     6dc:	fe cf       	rjmp	.-4      	; 0x6da <led_default+0x16>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <eeprom_read_word>
     6e6:	ec 01       	movw	r28, r24
     6e8:	f9 99       	sbic	0x1f, 1	; 31
     6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <led_default+0x24>
     6ec:	b8 01       	movw	r22, r16
     6ee:	86 e0       	ldi	r24, 0x06	; 6
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <eeprom_write_word>
     6f6:	f9 99       	sbic	0x1f, 1	; 31
     6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <led_default+0x32>
     6fa:	be 01       	movw	r22, r28
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <eeprom_write_word>
     704:	c8 01       	movw	r24, r16
     706:	be df       	rcall	.-132    	; 0x684 <led1_update>
     708:	ce 01       	movw	r24, r28
     70a:	cc df       	rcall	.-104    	; 0x6a4 <led2_update>
     70c:	10 93 a3 01 	sts	0x01A3, r17	; 0x8001a3 <ledvalue1+0x1>
     710:	00 93 a2 01 	sts	0x01A2, r16	; 0x8001a2 <ledvalue1>
     714:	d0 93 a1 01 	sts	0x01A1, r29	; 0x8001a1 <ledvalue2+0x1>
     718:	c0 93 a0 01 	sts	0x01A0, r28	; 0x8001a0 <ledvalue2>
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <CDC_Recive_Event>:
void CDC_Recive_Event()
{
    int8_t d = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	fb d6       	rcall	.+3574   	; 0x1522 <CDC_Device_ReceiveByte>
    if(d > 0)
     72c:	18 16       	cp	r1, r24
     72e:	7c f4       	brge	.+30     	; 0x74e <CDC_Recive_Event+0x28>
    {
        recvBuffer[cdc_recive_index] = d;
     730:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <cdc_recive_index>
     734:	e9 2f       	mov	r30, r25
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	e8 55       	subi	r30, 0x58	; 88
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	80 83       	st	Z, r24
        cdc_recive_index++;
     73e:	9f 5f       	subi	r25, 0xFF	; 255
     740:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <cdc_recive_index>
        if(d == '\n')
     744:	8a 30       	cpi	r24, 0x0A	; 10
     746:	19 f4       	brne	.+6      	; 0x74e <CDC_Recive_Event+0x28>
        {
            cdc_recive_terminator = true;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <cdc_recive_terminator>
     74e:	08 95       	ret

00000750 <CDC_Recive_Event_Process>:
        }
    }
}

void CDC_Recive_Event_Process()
{
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	00 d0       	rcall	.+0      	; 0x756 <CDC_Recive_Event_Process+0x6>
     756:	00 d0       	rcall	.+0      	; 0x758 <CDC_Recive_Event_Process+0x8>
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
    if(cdc_recive_terminator)
     75c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <cdc_recive_terminator>
     760:	88 23       	and	r24, r24
     762:	09 f4       	brne	.+2      	; 0x766 <CDC_Recive_Event_Process+0x16>
     764:	e2 c0       	rjmp	.+452    	; 0x92a <CDC_Recive_Event_Process+0x1da>
    {
        cdc_recive_terminator = false;
     766:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <cdc_recive_terminator>
        char* message = recvBuffer;
        
        if(strncmp(message,"L1", 2) == 0)
     76a:	42 e0       	ldi	r20, 0x02	; 2
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	6a e4       	ldi	r22, 0x4A	; 74
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	88 ea       	ldi	r24, 0xA8	; 168
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 11 16 	call	0x2c22	; 0x2c22 <strncmp>
     77a:	89 2b       	or	r24, r25
     77c:	d1 f4       	brne	.+52     	; 0x7b2 <CDC_Recive_Event_Process+0x62>
        {
            
            int v = 0;
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	19 82       	std	Y+1, r1	; 0x01
            sscanf(message,"L1/%d\n", &v);
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	8d e4       	ldi	r24, 0x4D	; 77
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	9f 93       	push	r25
     790:	8f 93       	push	r24
     792:	88 ea       	ldi	r24, 0xA8	; 168
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <sscanf>
            led1_update(v);
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	70 df       	rcall	.-288    	; 0x684 <led1_update>
            ledvalue1 = v;
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ledvalue1+0x1>
     7ac:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ledvalue1>
     7b0:	23 c0       	rjmp	.+70     	; 0x7f8 <CDC_Recive_Event_Process+0xa8>
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'A');
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'C');
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'K');
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        }
        else if(strncmp(message,"L2", 2) == 0)
     7b2:	42 e0       	ldi	r20, 0x02	; 2
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	64 e5       	ldi	r22, 0x54	; 84
     7b8:	71 e0       	ldi	r23, 0x01	; 1
     7ba:	88 ea       	ldi	r24, 0xA8	; 168
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 11 16 	call	0x2c22	; 0x2c22 <strncmp>
     7c2:	89 2b       	or	r24, r25
     7c4:	81 f5       	brne	.+96     	; 0x826 <CDC_Recive_Event_Process+0xd6>
        {
            int v = 0;
     7c6:	1a 82       	std	Y+2, r1	; 0x02
     7c8:	19 82       	std	Y+1, r1	; 0x01
            sscanf(message,"L2/%d\n", &v);
     7ca:	ce 01       	movw	r24, r28
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	87 e5       	ldi	r24, 0x57	; 87
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	9f 93       	push	r25
     7d8:	8f 93       	push	r24
     7da:	88 ea       	ldi	r24, 0xA8	; 168
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	9f 93       	push	r25
     7e0:	8f 93       	push	r24
     7e2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <sscanf>
            led2_update(v);
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	5c df       	rcall	.-328    	; 0x6a4 <led2_update>
            ledvalue2 = v;
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	9a 81       	ldd	r25, Y+2	; 0x02
     7f0:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <ledvalue2+0x1>
     7f4:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <ledvalue2>
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'A');
     7f8:	61 e4       	ldi	r22, 0x41	; 65
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	91 e0       	ldi	r25, 0x01	; 1
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'C');
     7fe:	12 d6       	rcall	.+3108   	; 0x1424 <CDC_Device_SendByte>
     800:	63 e4       	ldi	r22, 0x43	; 67
     802:	80 e0       	ldi	r24, 0x00	; 0
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'K');
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e d6       	rcall	.+3100   	; 0x1424 <CDC_Device_SendByte>
     808:	6b e4       	ldi	r22, 0x4B	; 75
     80a:	80 e0       	ldi	r24, 0x00	; 0
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0a d6       	rcall	.+3092   	; 0x1424 <CDC_Device_SendByte>
     810:	6a e0       	ldi	r22, 0x0A	; 10
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	06 d6       	rcall	.+3084   	; 0x1424 <CDC_Device_SendByte>
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
        }
        else if(strncmp(message,"ST", 2) == 0)
     824:	79 c0       	rjmp	.+242    	; 0x918 <CDC_Recive_Event_Process+0x1c8>
     826:	42 e0       	ldi	r20, 0x02	; 2
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	6e e5       	ldi	r22, 0x5E	; 94
     82c:	71 e0       	ldi	r23, 0x01	; 1
     82e:	88 ea       	ldi	r24, 0xA8	; 168
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 11 16 	call	0x2c22	; 0x2c22 <strncmp>
        {
            print();
     836:	89 2b       	or	r24, r25
     838:	11 f4       	brne	.+4      	; 0x83e <CDC_Recive_Event_Process+0xee>
     83a:	a2 de       	rcall	.-700    	; 0x580 <print>
        }
        else if(strncmp(message,"LD", 2) == 0)
     83c:	6d c0       	rjmp	.+218    	; 0x918 <CDC_Recive_Event_Process+0x1c8>
     83e:	42 e0       	ldi	r20, 0x02	; 2
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	61 e6       	ldi	r22, 0x61	; 97
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	88 ea       	ldi	r24, 0xA8	; 168
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <strncmp>
        {
            led_default();
     84e:	89 2b       	or	r24, r25
     850:	11 f4       	brne	.+4      	; 0x856 <CDC_Recive_Event_Process+0x106>
     852:	38 df       	rcall	.-400    	; 0x6c4 <led_default>
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'A');
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'C');
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'K');
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        }
        else if(strncmp(message,"LS", 1) == 0)
     854:	4b c0       	rjmp	.+150    	; 0x8ec <CDC_Recive_Event_Process+0x19c>
     856:	88 ea       	ldi	r24, 0xA8	; 168
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <recvBuffer>
     85e:	2c 34       	cpi	r18, 0x4C	; 76
     860:	09 f0       	breq	.+2      	; 0x864 <CDC_Recive_Event_Process+0x114>
        {
            uint16_t v1 = 0;
     862:	4a c0       	rjmp	.+148    	; 0x8f8 <CDC_Recive_Event_Process+0x1a8>
     864:	1c 82       	std	Y+4, r1	; 0x04
            uint16_t v2 = 0;
     866:	1b 82       	std	Y+3, r1	; 0x03
     868:	1a 82       	std	Y+2, r1	; 0x02
            sscanf(message,"LS/%d,%d\n", &v1, &v2);
     86a:	19 82       	std	Y+1, r1	; 0x01
     86c:	9e 01       	movw	r18, r28
     86e:	2f 5f       	subi	r18, 0xFF	; 255
     870:	3f 4f       	sbci	r19, 0xFF	; 255
     872:	3f 93       	push	r19
     874:	2f 93       	push	r18
     876:	2e 5f       	subi	r18, 0xFE	; 254
     878:	3f 4f       	sbci	r19, 0xFF	; 255
     87a:	3f 93       	push	r19
     87c:	2f 93       	push	r18
     87e:	24 e6       	ldi	r18, 0x64	; 100
     880:	31 e0       	ldi	r19, 0x01	; 1
     882:	3f 93       	push	r19
     884:	2f 93       	push	r18
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <sscanf>
            if(v1 >= 0 && v1 <= 1023)
     88e:	6b 81       	ldd	r22, Y+3	; 0x03
     890:	7c 81       	ldd	r23, Y+4	; 0x04
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	61 15       	cp	r22, r1
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	79 07       	cpc	r23, r25
            {
                eeprom_busy_wait();
     8a2:	78 f4       	brcc	.+30     	; 0x8c2 <CDC_Recive_Event_Process+0x172>
     8a4:	f9 99       	sbic	0x1f, 1	; 31
                eeprom_write_word(&EEPROM_V1, v1);
     8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <CDC_Recive_Event_Process+0x154>
     8a8:	86 e0       	ldi	r24, 0x06	; 6
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <eeprom_write_word>

                ledvalue1 = eeprom_read_word(&EEPROM_V1) & 0x3FF;
     8b0:	86 e0       	ldi	r24, 0x06	; 6
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <eeprom_read_word>
     8b8:	93 70       	andi	r25, 0x03	; 3
     8ba:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ledvalue1+0x1>
     8be:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ledvalue1>

            }
            if(v2 >= 0 && v2 <= 1023)
     8c2:	69 81       	ldd	r22, Y+1	; 0x01
     8c4:	7a 81       	ldd	r23, Y+2	; 0x02
     8c6:	61 15       	cp	r22, r1
     8c8:	a4 e0       	ldi	r26, 0x04	; 4
     8ca:	7a 07       	cpc	r23, r26
            {
                eeprom_busy_wait();
     8cc:	78 f4       	brcc	.+30     	; 0x8ec <CDC_Recive_Event_Process+0x19c>
     8ce:	f9 99       	sbic	0x1f, 1	; 31
                eeprom_write_word(&EEPROM_V2,  v2);   
     8d0:	fe cf       	rjmp	.-4      	; 0x8ce <CDC_Recive_Event_Process+0x17e>
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <eeprom_write_word>

                ledvalue2 = eeprom_read_word(&EEPROM_V2) & 0x3FF;
     8da:	84 e0       	ldi	r24, 0x04	; 4
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <eeprom_read_word>
     8e2:	93 70       	andi	r25, 0x03	; 3
     8e4:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <ledvalue2+0x1>
            }
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'A');
     8e8:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <ledvalue2>
     8ec:	61 e4       	ldi	r22, 0x41	; 65
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'C');
     8ee:	80 e0       	ldi	r24, 0x00	; 0
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'K');
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        }
        else
        {
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'N');
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	98 d5       	rcall	.+2864   	; 0x1424 <CDC_Device_SendByte>
     8f4:	63 e4       	ldi	r22, 0x43	; 67
     8f6:	05 c0       	rjmp	.+10     	; 0x902 <CDC_Recive_Event_Process+0x1b2>
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'A');
     8f8:	6e e4       	ldi	r22, 0x4E	; 78
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	92 d5       	rcall	.+2852   	; 0x1424 <CDC_Device_SendByte>
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 'K');
     900:	61 e4       	ldi	r22, 0x41	; 65
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	8e d5       	rcall	.+2844   	; 0x1424 <CDC_Device_SendByte>
     908:	6b e4       	ldi	r22, 0x4B	; 75
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	8a d5       	rcall	.+2836   	; 0x1424 <CDC_Device_SendByte>
     910:	6a e0       	ldi	r22, 0x0A	; 10
     912:	80 e0       	ldi	r24, 0x00	; 0
        }
        
        memset(recvBuffer,0,CDC_BUFFER_SIZE);
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	86 d5       	rcall	.+2828   	; 0x1424 <CDC_Device_SendByte>
     918:	80 e2       	ldi	r24, 0x20	; 32
     91a:	e8 ea       	ldi	r30, 0xA8	; 168
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	df 01       	movw	r26, r30
     920:	1d 92       	st	X+, r1
        cdc_recive_index = 0;
     922:	8a 95       	dec	r24
     924:	e9 f7       	brne	.-6      	; 0x920 <CDC_Recive_Event_Process+0x1d0>
    }
}
     926:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <cdc_recive_index>
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <SetupHardware>:

void SetupHardware(void)
{
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
    MCUSR &= ~(1 << WDRF);
     940:	84 b7       	in	r24, 0x34	; 52
     942:	87 7f       	andi	r24, 0xF7	; 247
     944:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	a8 95       	wdr
     94c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     950:	88 61       	ori	r24, 0x18	; 24
     952:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     956:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     95a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	80 e8       	ldi	r24, 0x80	; 128
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     968:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     96c:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	clock_prescale_set(clock_div_1);


    DDRB |= 0b11110001;
     96e:	84 b1       	in	r24, 0x04	; 4
     970:	81 6f       	ori	r24, 0xF1	; 241
     972:	84 b9       	out	0x04, r24	; 4
    DDRD |= 0b11000000;
     974:	8a b1       	in	r24, 0x0a	; 10
     976:	80 6c       	ori	r24, 0xC0	; 192
     978:	8a b9       	out	0x0a, r24	; 10
    PORTB |= 0b11110001;
     97a:	85 b1       	in	r24, 0x05	; 5
     97c:	81 6f       	ori	r24, 0xF1	; 241
     97e:	85 b9       	out	0x05, r24	; 5
    PORTD |= 0b11000000;
     980:	8b b1       	in	r24, 0x0b	; 11
     982:	80 6c       	ori	r24, 0xC0	; 192

    spi_init();
     984:	8b b9       	out	0x0b, r24	; 11
    serial_init(9600);
     986:	82 d0       	rcall	.+260    	; 0xa8c <spi_init>
     988:	60 e8       	ldi	r22, 0x80	; 128
     98a:	75 e2       	ldi	r23, 0x25	; 37
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
    
    eeprom_busy_wait();
     990:	2f d0       	rcall	.+94     	; 0x9f0 <serial_init>
     992:	f9 99       	sbic	0x1f, 1	; 31
    uint16_t value1 = eeprom_read_word(&EEPROM_V1) & 0x3FF;
     994:	fe cf       	rjmp	.-4      	; 0x992 <SetupHardware+0x5a>
     996:	86 e0       	ldi	r24, 0x06	; 6
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <eeprom_read_word>
     99e:	8c 01       	movw	r16, r24
    eeprom_busy_wait();
     9a0:	13 70       	andi	r17, 0x03	; 3
     9a2:	f9 99       	sbic	0x1f, 1	; 31
    uint16_t value2 = eeprom_read_word(&EEPROM_V2) & 0x3FF;
     9a4:	fe cf       	rjmp	.-4      	; 0x9a2 <SetupHardware+0x6a>
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <eeprom_read_word>
     9ae:	ec 01       	movw	r28, r24

    // value1 = 600;
    // value2 = 1000;
    ledvalue1 = value1;
     9b0:	d3 70       	andi	r29, 0x03	; 3
     9b2:	10 93 a3 01 	sts	0x01A3, r17	; 0x8001a3 <ledvalue1+0x1>
     9b6:	00 93 a2 01 	sts	0x01A2, r16	; 0x8001a2 <ledvalue1>
    ledvalue2 = value2;
     9ba:	d0 93 a1 01 	sts	0x01A1, r29	; 0x8001a1 <ledvalue2+0x1>
    led1_update(value1);
     9be:	c0 93 a0 01 	sts	0x01A0, r28	; 0x8001a0 <ledvalue2>
    led2_update(value2);
     9c2:	c8 01       	movw	r24, r16
     9c4:	5f de       	rcall	.-834    	; 0x684 <led1_update>

    USB_Init();

}
     9c6:	ce 01       	movw	r24, r28
     9c8:	6d de       	rcall	.-806    	; 0x6a4 <led2_update>
     9ca:	df 91       	pop	r29
    ledvalue1 = value1;
    ledvalue2 = value2;
    led1_update(value1);
    led2_update(value2);

    USB_Init();
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	5c c2       	rjmp	.+1208   	; 0xe8c <USB_Init>

000009d4 <main>:

}

int main(void)
{
     9d4:	b1 df       	rcall	.-158    	; 0x938 <SetupHardware>
     9d6:	62 e9       	ldi	r22, 0x92	; 146
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	df d5       	rcall	.+3006   	; 0x159e <CDC_Device_CreateStream>
     9e0:	78 94       	sei
     9e2:	b6 de       	rcall	.-660    	; 0x750 <CDC_Recive_Event_Process>
     9e4:	a0 de       	rcall	.-704    	; 0x726 <CDC_Recive_Event>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	85 d5       	rcall	.+2826   	; 0x14f6 <CDC_Device_USBTask>
     9ec:	dc d4       	rcall	.+2488   	; 0x13a6 <USB_USBTask>
     9ee:	f9 cf       	rjmp	.-14     	; 0x9e2 <main+0xe>

000009f0 <serial_init>:
}

uint8_t serial_available()
{
    return (SERIAL_RX_BUFFER_SIZE + rx_head - rx_tail) % SERIAL_RX_BUFFER_SIZE;
}
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	60 e4       	ldi	r22, 0x40	; 64
     9f6:	72 e4       	ldi	r23, 0x42	; 66
     9f8:	8f e0       	ldi	r24, 0x0F	; 15
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 ba 14 	call	0x2974	; 0x2974 <__udivmodsi4>
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	31 09       	sbc	r19, r1
     a04:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     a08:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     a0c:	86 e0       	ldi	r24, 0x06	; 6
     a0e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     a12:	88 e9       	ldi	r24, 0x98	; 152
     a14:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     a18:	08 95       	ret

00000a1a <__vector_25>:

ISR(USART1_RX_vect)
{
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	8f 93       	push	r24
     a2a:	9f 93       	push	r25
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
    if (bit_is_clear(UCSR1A, UPE1) && bit_is_clear(UCSR1A, FE1) && bit_is_clear(UCSR1A, DOR1))
     a30:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     a34:	82 fd       	sbrc	r24, 2
     a36:	1d c0       	rjmp	.+58     	; 0xa72 <__vector_25+0x58>
     a38:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     a3c:	84 fd       	sbrc	r24, 4
     a3e:	19 c0       	rjmp	.+50     	; 0xa72 <__vector_25+0x58>
     a40:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     a44:	83 fd       	sbrc	r24, 3
     a46:	15 c0       	rjmp	.+42     	; 0xa72 <__vector_25+0x58>
    {
        uint8_t c = UDR1;
     a48:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
        uint8_t i = (rx_head + 1) % SERIAL_RX_BUFFER_SIZE;
     a4c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <rx_head>
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	8f 71       	andi	r24, 0x1F	; 31
     a56:	99 27       	eor	r25, r25
        if (i != rx_tail)
     a58:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <rx_tail>
     a5c:	38 17       	cp	r19, r24
     a5e:	59 f0       	breq	.+22     	; 0xa76 <__vector_25+0x5c>
        {
            rx[rx_tail] = c;
     a60:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <rx_tail>
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	e8 53       	subi	r30, 0x38	; 56
     a68:	fe 4f       	sbci	r31, 0xFE	; 254
     a6a:	20 83       	st	Z, r18
            rx_head = i;
     a6c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <rx_head>
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <__vector_25+0x5c>
        }
    }
    else
    {
        UDR1;
     a72:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    }
}
     a76:	ff 91       	pop	r31
     a78:	ef 91       	pop	r30
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	3f 91       	pop	r19
     a80:	2f 91       	pop	r18
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <spi_init>:
//#define DD_SS       DDB2
#define DD_SCK DDB1

void spi_init()
{
    DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK);
     a8c:	84 b1       	in	r24, 0x04	; 4
     a8e:	86 60       	ori	r24, 0x06	; 6
     a90:	84 b9       	out	0x04, r24	; 4
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << CPOL) | (1 << CPHA);
     a92:	8d e5       	ldi	r24, 0x5D	; 93
     a94:	8c bd       	out	0x2c, r24	; 44
     a96:	08 95       	ret

00000a98 <spi_transfer>:
}

uint8_t spi_transfer(uint8_t value)
{
    SPDR = value;
     a98:	8e bd       	out	0x2e, r24	; 46
    asm volatile("nop");
     a9a:	00 00       	nop
    while (!(SPSR & (1 << SPIF)));
     a9c:	0d b4       	in	r0, 0x2d	; 45
     a9e:	07 fe       	sbrs	r0, 7
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <spi_transfer+0x4>

    return SPDR;
     aa2:	8e b5       	in	r24, 0x2e	; 46
     aa4:	08 95       	ret

00000aa6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     aa6:	29 2f       	mov	r18, r25
     aa8:	33 27       	eor	r19, r19
     aaa:	22 30       	cpi	r18, 0x02	; 2
     aac:	31 05       	cpc	r19, r1
     aae:	59 f0       	breq	.+22     	; 0xac6 <CALLBACK_USB_GetDescriptor+0x20>
     ab0:	23 30       	cpi	r18, 0x03	; 3
     ab2:	31 05       	cpc	r19, r1
     ab4:	69 f0       	breq	.+26     	; 0xad0 <CALLBACK_USB_GetDescriptor+0x2a>
     ab6:	21 30       	cpi	r18, 0x01	; 1
     ab8:	31 05       	cpc	r19, r1
     aba:	e9 f4       	brne	.+58     	; 0xaf6 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     abc:	82 e1       	ldi	r24, 0x12	; 18
     abe:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     ac0:	24 e4       	ldi	r18, 0x44	; 68
     ac2:	32 e0       	ldi	r19, 0x02	; 2
     ac4:	1c c0       	rjmp	.+56     	; 0xafe <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     ac6:	8e e3       	ldi	r24, 0x3E	; 62
     ac8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     aca:	26 e0       	ldi	r18, 0x06	; 6
     acc:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     ace:	17 c0       	rjmp	.+46     	; 0xafe <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     ad0:	99 27       	eor	r25, r25
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	91 05       	cpc	r25, r1
     ad6:	49 f0       	breq	.+18     	; 0xaea <CALLBACK_USB_GetDescriptor+0x44>
     ad8:	28 f0       	brcs	.+10     	; 0xae4 <CALLBACK_USB_GetDescriptor+0x3e>
     ada:	02 97       	sbiw	r24, 0x02	; 2
     adc:	61 f4       	brne	.+24     	; 0xaf6 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     ade:	ee ea       	ldi	r30, 0xAE	; 174
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     ae4:	e2 e0       	ldi	r30, 0x02	; 2
     ae6:	f2 e0       	ldi	r31, 0x02	; 2
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     aea:	e2 ed       	ldi	r30, 0xD2	; 210
     aec:	f1 e0       	ldi	r31, 0x01	; 1
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     aee:	84 91       	lpm	r24, Z
     af0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     af2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     af4:	04 c0       	rjmp	.+8      	; 0xafe <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     afe:	fa 01       	movw	r30, r20
     b00:	31 83       	std	Z+1, r19	; 0x01
     b02:	20 83       	st	Z, r18
	return Size;
}
     b04:	08 95       	ret

00000b06 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b06:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <USB_ControlRequest+0x6>
     b0a:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <USB_ControlRequest+0x7>
     b0e:	26 17       	cp	r18, r22
     b10:	37 07       	cpc	r19, r23
     b12:	48 f0       	brcs	.+18     	; 0xb26 <Endpoint_Write_Control_Stream_LE+0x20>
     b14:	61 15       	cp	r22, r1
     b16:	71 05       	cpc	r23, r1
     b18:	39 f4       	brne	.+14     	; 0xb28 <Endpoint_Write_Control_Stream_LE+0x22>
     b1a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b1e:	2e 77       	andi	r18, 0x7E	; 126
     b20:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <Endpoint_Write_Control_Stream_LE+0x22>
     b26:	b9 01       	movw	r22, r18
     b28:	fc 01       	movw	r30, r24
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	61 15       	cp	r22, r1
     b2e:	71 05       	cpc	r23, r1
     b30:	79 f1       	breq	.+94     	; 0xb90 <Endpoint_Write_Control_Stream_LE+0x8a>
     b32:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>
     b36:	88 23       	and	r24, r24
     b38:	f1 f1       	breq	.+124    	; 0xbb6 <Endpoint_Write_Control_Stream_LE+0xb0>
     b3a:	85 30       	cpi	r24, 0x05	; 5
     b3c:	f1 f1       	breq	.+124    	; 0xbba <Endpoint_Write_Control_Stream_LE+0xb4>
     b3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b42:	83 fd       	sbrc	r24, 3
     b44:	3c c0       	rjmp	.+120    	; 0xbbe <Endpoint_Write_Control_Stream_LE+0xb8>
     b46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b4a:	82 fd       	sbrc	r24, 2
     b4c:	2e c0       	rjmp	.+92     	; 0xbaa <Endpoint_Write_Control_Stream_LE+0xa4>
     b4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b52:	80 ff       	sbrs	r24, 0
     b54:	eb cf       	rjmp	.-42     	; 0xb2c <Endpoint_Write_Control_Stream_LE+0x26>
     b56:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     b5a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	92 2b       	or	r25, r18
     b62:	61 15       	cp	r22, r1
     b64:	71 05       	cpc	r23, r1
     b66:	51 f0       	breq	.+20     	; 0xb7c <Endpoint_Write_Control_Stream_LE+0x76>
     b68:	88 30       	cpi	r24, 0x08	; 8
     b6a:	91 05       	cpc	r25, r1
     b6c:	38 f4       	brcc	.+14     	; 0xb7c <Endpoint_Write_Control_Stream_LE+0x76>
     b6e:	21 91       	ld	r18, Z+
     b70:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b74:	61 50       	subi	r22, 0x01	; 1
     b76:	71 09       	sbc	r23, r1
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	f3 cf       	rjmp	.-26     	; 0xb62 <Endpoint_Write_Control_Stream_LE+0x5c>
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	08 97       	sbiw	r24, 0x08	; 8
     b80:	09 f0       	breq	.+2      	; 0xb84 <Endpoint_Write_Control_Stream_LE+0x7e>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b88:	8e 77       	andi	r24, 0x7E	; 126
     b8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b8e:	ce cf       	rjmp	.-100    	; 0xb2c <Endpoint_Write_Control_Stream_LE+0x26>
     b90:	21 11       	cpse	r18, r1
     b92:	cf cf       	rjmp	.-98     	; 0xb32 <Endpoint_Write_Control_Stream_LE+0x2c>
     b94:	0a c0       	rjmp	.+20     	; 0xbaa <Endpoint_Write_Control_Stream_LE+0xa4>
     b96:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>
     b9a:	88 23       	and	r24, r24
     b9c:	61 f0       	breq	.+24     	; 0xbb6 <Endpoint_Write_Control_Stream_LE+0xb0>
     b9e:	85 30       	cpi	r24, 0x05	; 5
     ba0:	61 f0       	breq	.+24     	; 0xbba <Endpoint_Write_Control_Stream_LE+0xb4>
     ba2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ba6:	83 fd       	sbrc	r24, 3
     ba8:	0a c0       	rjmp	.+20     	; 0xbbe <Endpoint_Write_Control_Stream_LE+0xb8>
     baa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bae:	82 ff       	sbrs	r24, 2
     bb0:	f2 cf       	rjmp	.-28     	; 0xb96 <Endpoint_Write_Control_Stream_LE+0x90>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	08 95       	ret
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	08 95       	ret
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	08 95       	ret
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	08 95       	ret

00000bc2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     bc2:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <USB_ControlRequest+0x6>
     bc6:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <USB_ControlRequest+0x7>
     bca:	26 17       	cp	r18, r22
     bcc:	37 07       	cpc	r19, r23
     bce:	48 f0       	brcs	.+18     	; 0xbe2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     bd0:	61 15       	cp	r22, r1
     bd2:	71 05       	cpc	r23, r1
     bd4:	39 f4       	brne	.+14     	; 0xbe4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bd6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bda:	2e 77       	andi	r18, 0x7E	; 126
     bdc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <Endpoint_Write_Control_PStream_LE+0x22>
     be2:	b9 01       	movw	r22, r18
     be4:	fc 01       	movw	r30, r24
     be6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     be8:	61 15       	cp	r22, r1
     bea:	71 05       	cpc	r23, r1
     bec:	91 f1       	breq	.+100    	; 0xc52 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bee:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bf2:	88 23       	and	r24, r24
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <Endpoint_Write_Control_PStream_LE+0x36>
     bf6:	40 c0       	rjmp	.+128    	; 0xc78 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bf8:	85 30       	cpi	r24, 0x05	; 5
     bfa:	09 f4       	brne	.+2      	; 0xbfe <Endpoint_Write_Control_PStream_LE+0x3c>
     bfc:	3f c0       	rjmp	.+126    	; 0xc7c <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bfe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c02:	83 fd       	sbrc	r24, 3
     c04:	3d c0       	rjmp	.+122    	; 0xc80 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c0a:	82 fd       	sbrc	r24, 2
     c0c:	2f c0       	rjmp	.+94     	; 0xc6c <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     c12:	80 ff       	sbrs	r24, 0
     c14:	e9 cf       	rjmp	.-46     	; 0xbe8 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     c16:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     c1a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c22:	61 15       	cp	r22, r1
     c24:	71 05       	cpc	r23, r1
     c26:	59 f0       	breq	.+22     	; 0xc3e <Endpoint_Write_Control_PStream_LE+0x7c>
     c28:	88 30       	cpi	r24, 0x08	; 8
     c2a:	91 05       	cpc	r25, r1
     c2c:	40 f4       	brcc	.+16     	; 0xc3e <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c2e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c30:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     c34:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     c36:	61 50       	subi	r22, 0x01	; 1
     c38:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	f2 cf       	rjmp	.-28     	; 0xc22 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c3e:	21 e0       	ldi	r18, 0x01	; 1
     c40:	08 97       	sbiw	r24, 0x08	; 8
     c42:	09 f0       	breq	.+2      	; 0xc46 <Endpoint_Write_Control_PStream_LE+0x84>
     c44:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c4a:	8e 77       	andi	r24, 0x7E	; 126
     c4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c50:	cb cf       	rjmp	.-106    	; 0xbe8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c52:	21 11       	cpse	r18, r1
     c54:	cc cf       	rjmp	.-104    	; 0xbee <Endpoint_Write_Control_PStream_LE+0x2c>
     c56:	0a c0       	rjmp	.+20     	; 0xc6c <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c58:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c5c:	88 23       	and	r24, r24
     c5e:	61 f0       	breq	.+24     	; 0xc78 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c60:	85 30       	cpi	r24, 0x05	; 5
     c62:	61 f0       	breq	.+24     	; 0xc7c <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c68:	83 fd       	sbrc	r24, 3
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c70:	82 ff       	sbrs	r24, 2
     c72:	f2 cf       	rjmp	.-28     	; 0xc58 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c80:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c82:	08 95       	ret

00000c84 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     c84:	98 2f       	mov	r25, r24
     c86:	97 30       	cpi	r25, 0x07	; 7
     c88:	68 f5       	brcc	.+90     	; 0xce4 <Endpoint_ConfigureEndpoint_Prv+0x60>
     c8a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     c8e:	98 17       	cp	r25, r24
     c90:	39 f0       	breq	.+14     	; 0xca0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     c92:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c96:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     c9a:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <Endpoint_ConfigureEndpoint_Prv+0x22>
     ca0:	24 2f       	mov	r18, r20
     ca2:	76 2f       	mov	r23, r22
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	21 fd       	sbrc	r18, 1
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <Endpoint_ConfigureEndpoint_Prv+0x2a>
     caa:	9f 5f       	subi	r25, 0xFF	; 255
     cac:	ec cf       	rjmp	.-40     	; 0xc86 <Endpoint_ConfigureEndpoint_Prv+0x2>
     cae:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     cb2:	3e 7f       	andi	r19, 0xFE	; 254
     cb4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     cb8:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     cbc:	3d 7f       	andi	r19, 0xFD	; 253
     cbe:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     cc2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     cc6:	31 60       	ori	r19, 0x01	; 1
     cc8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ccc:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     cd0:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     cd4:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     cd8:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     cdc:	27 fd       	sbrc	r18, 7
     cde:	e5 cf       	rjmp	.-54     	; 0xcaa <Endpoint_ConfigureEndpoint_Prv+0x26>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	08 95       	ret
     ce4:	8f 70       	andi	r24, 0x0F	; 15
     ce6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	08 95       	ret

00000cee <Endpoint_ConfigureEndpointTable>:
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	06 2f       	mov	r16, r22
     cf8:	ec 01       	movw	r28, r24
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	10 17       	cp	r17, r16
     cfe:	71 f1       	breq	.+92     	; 0xd5c <Endpoint_ConfigureEndpointTable+0x6e>
     d00:	68 81       	ld	r22, Y
     d02:	61 11       	cpse	r22, r1
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <Endpoint_ConfigureEndpointTable+0x1e>
     d06:	1f 5f       	subi	r17, 0xFF	; 255
     d08:	25 96       	adiw	r28, 0x05	; 5
     d0a:	f8 cf       	rjmp	.-16     	; 0xcfc <Endpoint_ConfigureEndpointTable+0xe>
     d0c:	2c 81       	ldd	r18, Y+4	; 0x04
     d0e:	a9 81       	ldd	r26, Y+1	; 0x01
     d10:	ba 81       	ldd	r27, Y+2	; 0x02
     d12:	9b 81       	ldd	r25, Y+3	; 0x03
     d14:	86 2f       	mov	r24, r22
     d16:	8f 70       	andi	r24, 0x0F	; 15
     d18:	87 30       	cpi	r24, 0x07	; 7
     d1a:	10 f0       	brcs	.+4      	; 0xd20 <Endpoint_ConfigureEndpointTable+0x32>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	1f c0       	rjmp	.+62     	; 0xd5e <Endpoint_ConfigureEndpointTable+0x70>
     d20:	22 30       	cpi	r18, 0x02	; 2
     d22:	10 f4       	brcc	.+4      	; 0xd28 <Endpoint_ConfigureEndpointTable+0x3a>
     d24:	42 e0       	ldi	r20, 0x02	; 2
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <Endpoint_ConfigureEndpointTable+0x3c>
     d28:	46 e0       	ldi	r20, 0x06	; 6
     d2a:	e8 e0       	ldi	r30, 0x08	; 8
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	ea 17       	cp	r30, r26
     d32:	fb 07       	cpc	r31, r27
     d34:	20 f4       	brcc	.+8      	; 0xd3e <Endpoint_ConfigureEndpointTable+0x50>
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	f9 cf       	rjmp	.-14     	; 0xd30 <Endpoint_ConfigureEndpointTable+0x42>
     d3e:	22 95       	swap	r18
     d40:	20 7f       	andi	r18, 0xF0	; 240
     d42:	42 2b       	or	r20, r18
     d44:	50 e4       	ldi	r21, 0x40	; 64
     d46:	95 9f       	mul	r25, r21
     d48:	90 01       	movw	r18, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	66 1f       	adc	r22, r22
     d4e:	66 27       	eor	r22, r22
     d50:	66 1f       	adc	r22, r22
     d52:	62 2b       	or	r22, r18
     d54:	97 df       	rcall	.-210    	; 0xc84 <Endpoint_ConfigureEndpoint_Prv>
     d56:	81 11       	cpse	r24, r1
     d58:	d6 cf       	rjmp	.-84     	; 0xd06 <Endpoint_ConfigureEndpointTable+0x18>
     d5a:	e0 cf       	rjmp	.-64     	; 0xd1c <Endpoint_ConfigureEndpointTable+0x2e>
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     d68:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <USB_ControlRequest>
     d6c:	87 ff       	sbrs	r24, 7
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     d74:	82 fd       	sbrc	r24, 2
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d78:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>
     d7c:	81 11       	cpse	r24, r1
     d7e:	f8 cf       	rjmp	.-16     	; 0xd70 <Endpoint_ClearStatusStage+0x8>
     d80:	11 c0       	rjmp	.+34     	; 0xda4 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d86:	8b 77       	andi	r24, 0x7B	; 123
     d88:	0b c0       	rjmp	.+22     	; 0xda0 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d8a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>
     d8e:	88 23       	and	r24, r24
     d90:	49 f0       	breq	.+18     	; 0xda4 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d96:	80 ff       	sbrs	r24, 0
     d98:	f8 cf       	rjmp	.-16     	; 0xd8a <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d9e:	8e 77       	andi	r24, 0x7E	; 126
     da0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     da4:	08 95       	ret

00000da6 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     da6:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     daa:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     dae:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     db0:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     db4:	84 2f       	mov	r24, r20
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	40 ff       	sbrs	r20, 0
     dba:	23 c0       	rjmp	.+70     	; 0xe02 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     dc0:	80 fd       	sbrc	r24, 0
     dc2:	1d c0       	rjmp	.+58     	; 0xdfe <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     dc4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     dc8:	88 23       	and	r24, r24
     dca:	99 f0       	breq	.+38     	; 0xdf2 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dcc:	85 30       	cpi	r24, 0x05	; 5
     dce:	99 f0       	breq	.+38     	; 0xdf6 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     dd0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     dd4:	85 fd       	sbrc	r24, 5
     dd6:	11 c0       	rjmp	.+34     	; 0xdfa <Endpoint_WaitUntilReady+0x54>
     dd8:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     ddc:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     de0:	24 17       	cp	r18, r20
     de2:	35 07       	cpc	r19, r21
     de4:	29 f3       	breq	.-54     	; 0xdb0 <Endpoint_WaitUntilReady+0xa>
     de6:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     de8:	11 f0       	breq	.+4      	; 0xdee <Endpoint_WaitUntilReady+0x48>
     dea:	9a 01       	movw	r18, r20
     dec:	e1 cf       	rjmp	.-62     	; 0xdb0 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e02:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e06:	42 ff       	sbrs	r20, 2
     e08:	dd cf       	rjmp	.-70     	; 0xdc4 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     e0a:	08 95       	ret

00000e0c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     e12:	df 93       	push	r29
     e14:	4b d0       	rcall	.+150    	; 0xeac <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e16:	52 d0       	rcall	.+164    	; 0xebc <USB_INT_ClearAllInterrupts>
     e18:	c8 ed       	ldi	r28, 0xD8	; 216
     e1a:	d0 e0       	ldi	r29, 0x00	; 0
     e1c:	88 81       	ld	r24, Y
     e1e:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
     e20:	88 83       	st	Y, r24
     e22:	88 81       	ld	r24, Y
     e24:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e26:	88 83       	st	Y, r24
     e28:	88 81       	ld	r24, Y
     e2a:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e2c:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     e2e:	19 bc       	out	0x29, r1	; 41
     e30:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     e34:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     e38:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     e3c:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     e40:	00 ee       	ldi	r16, 0xE0	; 224
     e42:	10 e0       	ldi	r17, 0x00	; 0
     e44:	f8 01       	movw	r30, r16
     e46:	80 81       	ld	r24, Z
     e48:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     e4a:	80 83       	st	Z, r24
     e4c:	88 81       	ld	r24, Y
     e4e:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e50:	88 83       	st	Y, r24
     e52:	42 e0       	ldi	r20, 0x02	; 2
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e58:	15 df       	rcall	.-470    	; 0xc84 <Endpoint_ConfigureEndpoint_Prv>
     e5a:	e1 ee       	ldi	r30, 0xE1	; 225
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e62:	80 83       	st	Z, r24
     e64:	e2 ee       	ldi	r30, 0xE2	; 226
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e6c:	80 83       	st	Z, r24
     e6e:	80 81       	ld	r24, Z
     e70:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e72:	80 83       	st	Z, r24
     e74:	f8 01       	movw	r30, r16
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e7a:	80 83       	st	Z, r24
     e7c:	88 81       	ld	r24, Y
     e7e:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e80:	88 83       	st	Y, r24
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	08 95       	ret

00000e8c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e8c:	e8 ed       	ldi	r30, 0xD8	; 216
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7e       	andi	r24, 0xEF	; 239
     e94:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     e96:	e7 ed       	ldi	r30, 0xD7	; 215
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	81 60       	ori	r24, 0x01	; 1
     e9e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     ea0:	84 e0       	ldi	r24, 0x04	; 4
     ea2:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <USB_IsInitialized>
     eaa:	b0 cf       	rjmp	.-160    	; 0xe0c <USB_ResetInterface>

00000eac <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     eac:	e8 ed       	ldi	r30, 0xD8	; 216
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8e 7f       	andi	r24, 0xFE	; 254
     eb4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     eb6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     eba:	08 95       	ret

00000ebc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ebc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     ec0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     ec4:	08 95       	ret

00000ec6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     ee8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     eec:	82 ff       	sbrs	r24, 2
     eee:	0a c0       	rjmp	.+20     	; 0xf04 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ef0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ef4:	82 ff       	sbrs	r24, 2
     ef6:	06 c0       	rjmp	.+12     	; 0xf04 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ef8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     efc:	8b 7f       	andi	r24, 0xFB	; 251
     efe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     f02:	50 d2       	rcall	.+1184   	; 0x13a4 <USB_Event_Stub>
     f04:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     f08:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     f0a:	1d c0       	rjmp	.+58     	; 0xf46 <__vector_10+0x80>
     f0c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     f10:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     f12:	19 c0       	rjmp	.+50     	; 0xf46 <__vector_10+0x80>
     f14:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     f1e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     f22:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f24:	0c c0       	rjmp	.+24     	; 0xf3e <__vector_10+0x78>
     f26:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f28:	89 bd       	out	0x29, r24	; 41
     f2a:	82 e1       	ldi	r24, 0x12	; 18
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     f2c:	89 bd       	out	0x29, r24	; 41
     f2e:	09 b4       	in	r0, 0x29	; 41
     f30:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     f32:	fd cf       	rjmp	.-6      	; 0xf2e <__vector_10+0x68>
     f34:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
     f36:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <USB_DeviceState>
     f3a:	18 db       	rcall	.-2512   	; 0x56c <EVENT_USB_Device_Connect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__vector_10+0x80>
			EVENT_USB_Device_Disconnect();
     f3e:	19 bc       	out	0x29, r1	; 41
     f40:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <USB_DeviceState>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     f44:	14 db       	rcall	.-2520   	; 0x56e <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     f46:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     f4a:	80 ff       	sbrs	r24, 0
     f4c:	18 c0       	rjmp	.+48     	; 0xf7e <__vector_10+0xb8>
     f4e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f52:	80 ff       	sbrs	r24, 0
     f54:	14 c0       	rjmp	.+40     	; 0xf7e <__vector_10+0xb8>
     f56:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f5a:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f5c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f60:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f64:	80 61       	ori	r24, 0x10	; 16
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     f66:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f6a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     f6e:	80 62       	ori	r24, 0x20	; 32

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     f70:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		EVENT_USB_Device_Suspend();
     f74:	19 bc       	out	0x29, r1	; 41
     f76:	85 e0       	ldi	r24, 0x05	; 5
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f78:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f7c:	13 d2       	rcall	.+1062   	; 0x13a4 <USB_Event_Stub>
     f7e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f82:	84 ff       	sbrs	r24, 4
     f84:	2f c0       	rjmp	.+94     	; 0xfe4 <__vector_10+0x11e>
     f86:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f8a:	84 ff       	sbrs	r24, 4
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f8c:	2b c0       	rjmp	.+86     	; 0xfe4 <__vector_10+0x11e>
     f8e:	80 e1       	ldi	r24, 0x10	; 16
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f90:	89 bd       	out	0x29, r24	; 41
     f92:	82 e1       	ldi	r24, 0x12	; 18
     f94:	89 bd       	out	0x29, r24	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f96:	09 b4       	in	r0, 0x29	; 41
     f98:	00 fe       	sbrs	r0, 0
     f9a:	fd cf       	rjmp	.-6      	; 0xf96 <__vector_10+0xd0>
     f9c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     fa0:	8f 7d       	andi	r24, 0xDF	; 223
     fa2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     fa6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     faa:	8f 7e       	andi	r24, 0xEF	; 239
     fac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     fb0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     fb4:	8f 7e       	andi	r24, 0xEF	; 239
     fb6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     fbe:	81 60       	ori	r24, 0x01	; 1
     fc0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fc4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
     fc8:	88 23       	and	r24, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fca:	11 f0       	breq	.+4      	; 0xfd0 <__vector_10+0x10a>
     fcc:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     fce:	07 c0       	rjmp	.+14     	; 0xfde <__vector_10+0x118>
     fd0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     fd4:	87 fd       	sbrc	r24, 7
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <__vector_10+0x116>
     fd8:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     fda:	01 c0       	rjmp	.+2      	; 0xfde <__vector_10+0x118>
     fdc:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     fde:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     fe2:	e0 d1       	rcall	.+960    	; 0x13a4 <USB_Event_Stub>
     fe4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     fe8:	83 ff       	sbrs	r24, 3
     fea:	27 c0       	rjmp	.+78     	; 0x103a <__vector_10+0x174>
     fec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ff0:	83 ff       	sbrs	r24, 3
     ff2:	23 c0       	rjmp	.+70     	; 0x103a <__vector_10+0x174>
     ff4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     ff8:	87 7f       	andi	r24, 0xF7	; 247
     ffa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		USB_Device_ConfigurationNumber = 0;
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1004:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <USB_Device_ConfigurationNumber>
    1008:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1012:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1016:	8e 7f       	andi	r24, 0xFE	; 254
    1018:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    101c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1020:	80 61       	ori	r24, 0x10	; 16
    1022:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1026:	42 e0       	ldi	r20, 0x02	; 2
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	2b de       	rcall	.-938    	; 0xc84 <Endpoint_ConfigureEndpoint_Prv>
    102e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1032:	88 60       	ori	r24, 0x08	; 8
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1034:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1038:	b5 d1       	rcall	.+874    	; 0x13a4 <USB_Event_Stub>
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1082:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1086:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1088:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    108c:	d8 2f       	mov	r29, r24
    108e:	d1 70       	andi	r29, 0x01	; 1
    1090:	80 fd       	sbrc	r24, 0
    1092:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1094:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1098:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    109c:	87 7f       	andi	r24, 0xF7	; 247
    109e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
    10a2:	78 94       	sei
    10a4:	1e d0       	rcall	.+60     	; 0x10e2 <USB_Device_ProcessControlRequest>
    10a6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    10aa:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    10ae:	88 60       	ori	r24, 0x08	; 8
    10b0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    10b4:	cd 2b       	or	r28, r29
    10b6:	cf 70       	andi	r28, 0x0F	; 15
    10b8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	aa 97       	sbiw	r28, 0x2a	; 42
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	ed e0       	ldi	r30, 0x0D	; 13
    10fa:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10fc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1100:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1102:	22 e0       	ldi	r18, 0x02	; 2
    1104:	e5 31       	cpi	r30, 0x15	; 21
    1106:	f2 07       	cpc	r31, r18
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1108:	c9 f7       	brne	.-14     	; 0x10fc <USB_Device_ProcessControlRequest+0x1a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    110a:	35 da       	rcall	.-2966   	; 0x576 <EVENT_USB_Device_ControlRequest>
    110c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1110:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1112:	30 c1       	rjmp	.+608    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    1114:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1118:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <USB_ControlRequest+0x1>
    111c:	95 30       	cpi	r25, 0x05	; 5
    111e:	09 f4       	brne	.+2      	; 0x1122 <USB_Device_ProcessControlRequest+0x40>
    1120:	83 c0       	rjmp	.+262    	; 0x1228 <USB_Device_ProcessControlRequest+0x146>
    1122:	30 f4       	brcc	.+12     	; 0x1130 <USB_Device_ProcessControlRequest+0x4e>
    1124:	91 30       	cpi	r25, 0x01	; 1
    1126:	a9 f1       	breq	.+106    	; 0x1192 <USB_Device_ProcessControlRequest+0xb0>
    1128:	68 f0       	brcs	.+26     	; 0x1144 <USB_Device_ProcessControlRequest+0x62>
    112a:	93 30       	cpi	r25, 0x03	; 3
    112c:	91 f1       	breq	.+100    	; 0x1192 <USB_Device_ProcessControlRequest+0xb0>
    112e:	22 c1       	rjmp	.+580    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    1130:	98 30       	cpi	r25, 0x08	; 8
    1132:	09 f4       	brne	.+2      	; 0x1136 <USB_Device_ProcessControlRequest+0x54>
    1134:	ef c0       	rjmp	.+478    	; 0x1314 <USB_Device_ProcessControlRequest+0x232>
    1136:	99 30       	cpi	r25, 0x09	; 9
    1138:	09 f4       	brne	.+2      	; 0x113c <USB_Device_ProcessControlRequest+0x5a>
    113a:	fb c0       	rjmp	.+502    	; 0x1332 <USB_Device_ProcessControlRequest+0x250>
    113c:	96 30       	cpi	r25, 0x06	; 6
    113e:	09 f0       	breq	.+2      	; 0x1142 <USB_Device_ProcessControlRequest+0x60>
    1140:	19 c1       	rjmp	.+562    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1142:	94 c0       	rjmp	.+296    	; 0x126c <USB_Device_ProcessControlRequest+0x18a>
    1144:	80 38       	cpi	r24, 0x80	; 128
    1146:	21 f0       	breq	.+8      	; 0x1150 <USB_Device_ProcessControlRequest+0x6e>
    1148:	82 38       	cpi	r24, 0x82	; 130
    114a:	09 f0       	breq	.+2      	; 0x114e <USB_Device_ProcessControlRequest+0x6c>
    114c:	13 c1       	rjmp	.+550    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <USB_Device_ProcessControlRequest+0x7e>
    1150:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1154:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <USB_Device_RemoteWakeupEnabled>
    1158:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    115a:	89 f0       	breq	.+34     	; 0x117e <USB_Device_ProcessControlRequest+0x9c>
    115c:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    115e:	0f c0       	rjmp	.+30     	; 0x117e <USB_Device_ProcessControlRequest+0x9c>
    1160:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1164:	8f 70       	andi	r24, 0x0F	; 15
    1166:	87 30       	cpi	r24, 0x07	; 7
    1168:	08 f0       	brcs	.+2      	; 0x116c <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    116a:	04 c1       	rjmp	.+520    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    116c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1170:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1174:	85 fb       	bst	r24, 5
    1176:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1178:	80 f9       	bld	r24, 0
    117a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    117e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1182:	97 7f       	andi	r25, 0xF7	; 247
    1184:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1188:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    118c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1190:	cc c0       	rjmp	.+408    	; 0x132a <USB_Device_ProcessControlRequest+0x248>
    1192:	28 2f       	mov	r18, r24
    1194:	2d 7f       	andi	r18, 0xFD	; 253
    1196:	09 f0       	breq	.+2      	; 0x119a <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1198:	ed c0       	rjmp	.+474    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    119a:	88 23       	and	r24, r24
    119c:	19 f0       	breq	.+6      	; 0x11a4 <USB_Device_ProcessControlRequest+0xc2>
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	61 f0       	breq	.+24     	; 0x11ba <USB_Device_ProcessControlRequest+0xd8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    11a2:	e8 c0       	rjmp	.+464    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    11a4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <USB_ControlRequest+0x2>
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	09 f0       	breq	.+2      	; 0x11ae <USB_Device_ProcessControlRequest+0xcc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    11ac:	e3 c0       	rjmp	.+454    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    11ae:	93 30       	cpi	r25, 0x03	; 3
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <USB_Device_ProcessControlRequest+0xd2>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <USB_Device_RemoteWakeupEnabled>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    11b8:	2e c0       	rjmp	.+92     	; 0x1216 <USB_Device_ProcessControlRequest+0x134>
    11ba:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <USB_ControlRequest+0x2>
    11be:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    11c0:	2a c0       	rjmp	.+84     	; 0x1216 <USB_Device_ProcessControlRequest+0x134>
    11c2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    11c6:	8f 70       	andi	r24, 0x0F	; 15
    11c8:	2f ef       	ldi	r18, 0xFF	; 255
    11ca:	28 0f       	add	r18, r24
    11cc:	26 30       	cpi	r18, 0x06	; 6
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <USB_Device_ProcessControlRequest+0xf0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11d0:	d1 c0       	rjmp	.+418    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    11d2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    11d6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    11da:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    11dc:	1c c0       	rjmp	.+56     	; 0x1216 <USB_Device_ProcessControlRequest+0x134>
    11de:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    11e0:	21 f4       	brne	.+8      	; 0x11ea <USB_Device_ProcessControlRequest+0x108>
    11e2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11e6:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    11e8:	14 c0       	rjmp	.+40     	; 0x1212 <USB_Device_ProcessControlRequest+0x130>
    11ea:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11ee:	90 61       	ori	r25, 0x10	; 16
    11f0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	a9 01       	movw	r20, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <USB_Device_ProcessControlRequest+0x11e>
    11fc:	44 0f       	add	r20, r20
    11fe:	55 1f       	adc	r21, r21
    1200:	8a 95       	dec	r24
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <USB_Device_ProcessControlRequest+0x11a>
    1204:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1208:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    120c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1210:	88 60       	ori	r24, 0x08	; 8
    1212:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1216:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    121a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    121e:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1220:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1224:	a1 dd       	rcall	.-1214   	; 0xd68 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1226:	a6 c0       	rjmp	.+332    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    1228:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    122a:	a4 c0       	rjmp	.+328    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    122c:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1230:	1f 77       	andi	r17, 0x7F	; 127
    1232:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1236:	80 78       	andi	r24, 0x80	; 128
    1238:	81 2b       	or	r24, r17
    123a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    123e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1242:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1244:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1248:	8f dd       	rcall	.-1250   	; 0xd68 <Endpoint_ClearStatusStage>
    124a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    124e:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1250:	fc cf       	rjmp	.-8      	; 0x124a <USB_Device_ProcessControlRequest+0x168>
    1252:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    125c:	11 11       	cpse	r17, r1
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <USB_Device_ProcessControlRequest+0x182>
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <USB_Device_ProcessControlRequest+0x184>
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    126a:	84 c0       	rjmp	.+264    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    126c:	80 58       	subi	r24, 0x80	; 128
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	08 f0       	brcs	.+2      	; 0x1274 <USB_Device_ProcessControlRequest+0x192>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1272:	80 c0       	rjmp	.+256    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    1274:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <USB_ControlRequest+0x2>
    1278:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <USB_ControlRequest+0x3>
    127c:	8c 3d       	cpi	r24, 0xDC	; 220
    127e:	53 e0       	ldi	r21, 0x03	; 3
    1280:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1282:	71 f5       	brne	.+92     	; 0x12e0 <USB_Device_ProcessControlRequest+0x1fe>
    1284:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    128a:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    128c:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    128e:	f8 94       	cli
    1290:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1292:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1294:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1296:	3e e0       	ldi	r19, 0x0E	; 14
    1298:	51 e2       	ldi	r21, 0x21	; 33
    129a:	e3 2f       	mov	r30, r19
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
    12a2:	e4 91       	lpm	r30, Z
    12a4:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
    12a6:	03 c0       	rjmp	.+6      	; 0x12ae <USB_Device_ProcessControlRequest+0x1cc>
    12a8:	e2 95       	swap	r30
						SigReadAddress++;
    12aa:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    12ac:	3f 5f       	subi	r19, 0xFF	; 255
    12ae:	ef 70       	andi	r30, 0x0F	; 15
    12b0:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	ea 30       	cpi	r30, 0x0A	; 10
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <USB_Device_ProcessControlRequest+0x1da>
    12b8:	c7 96       	adiw	r24, 0x37	; 55
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <USB_Device_ProcessControlRequest+0x1dc>
    12bc:	c0 96       	adiw	r24, 0x30	; 48
    12be:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    12c0:	9d 93       	st	X+, r25
    12c2:	2f 5f       	subi	r18, 0xFF	; 255
    12c4:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    12c6:	49 f7       	brne	.-46     	; 0x129a <USB_Device_ProcessControlRequest+0x1b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12c8:	4f bf       	out	0x3f, r20	; 63
    12ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ce:	87 7f       	andi	r24, 0xF7	; 247
    12d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    12d4:	6a e2       	ldi	r22, 0x2A	; 42
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	ce 01       	movw	r24, r28
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	14 dc       	rcall	.-2008   	; 0xb06 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <USB_Device_ProcessControlRequest+0x226>
    12e0:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <USB_ControlRequest+0x4>
    12e4:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <USB_ControlRequest+0x5>
    12e8:	ae 01       	movw	r20, r28
    12ea:	4f 5f       	subi	r20, 0xFF	; 255
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    12ee:	db db       	rcall	.-2122   	; 0xaa6 <CALLBACK_USB_GetDescriptor>
    12f0:	bc 01       	movw	r22, r24
    12f2:	89 2b       	or	r24, r25
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <USB_Device_ProcessControlRequest+0x216>
    12f6:	3e c0       	rjmp	.+124    	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    12f8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12fc:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    12fe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1306:	5d dc       	rcall	.-1862   	; 0xbc2 <Endpoint_Write_Control_PStream_LE>
    1308:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    130c:	8b 77       	andi	r24, 0x7B	; 123
    130e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1312:	30 c0       	rjmp	.+96     	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    1314:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1316:	71 f5       	brne	.+92     	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    1318:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    131c:	87 7f       	andi	r24, 0xF7	; 247
    131e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1322:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1326:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    132a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    132e:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1330:	77 cf       	rjmp	.-274    	; 0x1220 <USB_Device_ProcessControlRequest+0x13e>
    1332:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1334:	1f c0       	rjmp	.+62     	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    1336:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <USB_ControlRequest+0x2>
    133a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <USB_ControlRequest+0x3>
    133e:	99 27       	eor	r25, r25
    1340:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1342:	c4 f4       	brge	.+48     	; 0x1374 <USB_Device_ProcessControlRequest+0x292>
    1344:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1348:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    134a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    134e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
    1352:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
    1356:	08 dd       	rcall	.-1520   	; 0xd68 <Endpoint_ClearStatusStage>
    1358:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_Device_ConfigurationNumber>
    135c:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    135e:	06 c0       	rjmp	.+12     	; 0x136c <USB_Device_ProcessControlRequest+0x28a>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1360:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1364:	87 fd       	sbrc	r24, 7
    1366:	02 c0       	rjmp	.+4      	; 0x136c <USB_Device_ProcessControlRequest+0x28a>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	01 c0       	rjmp	.+2      	; 0x136e <USB_Device_ProcessControlRequest+0x28c>

	EVENT_USB_Device_ConfigurationChanged();
    136c:	84 e0       	ldi	r24, 0x04	; 4
    136e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <USB_DeviceState>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1372:	fe d8       	rcall	.-3588   	; 0x570 <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1374:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1378:	83 ff       	sbrs	r24, 3
    137a:	0a c0       	rjmp	.+20     	; 0x1390 <USB_Device_ProcessControlRequest+0x2ae>
    137c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1380:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1382:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1386:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    138a:	80 62       	ori	r24, 0x20	; 32
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    138c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1390:	aa 96       	adiw	r28, 0x2a	; 42
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	08 95       	ret

000013a4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    13a4:	08 95       	ret

000013a6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    13a6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    13a8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>
    13ac:	88 23       	and	r24, r24
    13ae:	99 f0       	breq	.+38     	; 0x13d6 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13b0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    13b4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13b6:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    13ba:	89 2f       	mov	r24, r25
    13bc:	81 70       	andi	r24, 0x01	; 1
    13be:	90 fd       	sbrc	r25, 0
    13c0:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13c2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13c4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    13cc:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13ce:	89 de       	rcall	.-750    	; 0x10e2 <USB_Device_ProcessControlRequest>
    13d0:	cf 70       	andi	r28, 0x0F	; 15
    13d2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    13e0:	fc 01       	movw	r30, r24
    13e2:	70 96       	adiw	r30, 0x10	; 16
    13e4:	8b e0       	ldi	r24, 0x0B	; 11
    13e6:	df 01       	movw	r26, r30
    13e8:	1d 92       	st	X+, r1
    13ea:	8a 95       	dec	r24
    13ec:	e9 f7       	brne	.-6      	; 0x13e8 <CDC_Device_ConfigureEndpoints+0xe>
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	8c 83       	std	Y+4, r24	; 0x04
    13f2:	89 87       	std	Y+9, r24	; 0x09
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	8e 87       	std	Y+14, r24	; 0x0e
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	77 dc       	rcall	.-1810   	; 0xcee <Endpoint_ConfigureEndpointTable>
    1400:	88 23       	and	r24, r24
    1402:	61 f0       	breq	.+24     	; 0x141c <CDC_Device_ConfigureEndpoints+0x42>
    1404:	61 e0       	ldi	r22, 0x01	; 1
    1406:	ce 01       	movw	r24, r28
    1408:	06 96       	adiw	r24, 0x06	; 6
    140a:	71 dc       	rcall	.-1822   	; 0xcee <Endpoint_ConfigureEndpointTable>
    140c:	88 23       	and	r24, r24
    140e:	31 f0       	breq	.+12     	; 0x141c <CDC_Device_ConfigureEndpoints+0x42>
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	ce 01       	movw	r24, r28
    1414:	0b 96       	adiw	r24, 0x0b	; 11
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	69 cc       	rjmp	.-1838   	; 0xcee <Endpoint_ConfigureEndpointTable>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <CDC_Device_SendByte>:
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <USB_DeviceState>
    142e:	24 30       	cpi	r18, 0x04	; 4
    1430:	f9 f4       	brne	.+62     	; 0x1470 <CDC_Device_SendByte+0x4c>
    1432:	fc 01       	movw	r30, r24
    1434:	04 89       	ldd	r16, Z+20	; 0x14
    1436:	15 89       	ldd	r17, Z+21	; 0x15
    1438:	26 89       	ldd	r18, Z+22	; 0x16
    143a:	37 89       	ldd	r19, Z+23	; 0x17
    143c:	01 2b       	or	r16, r17
    143e:	02 2b       	or	r16, r18
    1440:	03 2b       	or	r16, r19
    1442:	b1 f0       	breq	.+44     	; 0x1470 <CDC_Device_SendByte+0x4c>
    1444:	c6 2f       	mov	r28, r22
    1446:	81 81       	ldd	r24, Z+1	; 0x01
    1448:	8f 70       	andi	r24, 0x0F	; 15
    144a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    144e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1452:	85 ff       	sbrs	r24, 5
    1454:	04 c0       	rjmp	.+8      	; 0x145e <CDC_Device_SendByte+0x3a>
    1456:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0a c0       	rjmp	.+20     	; 0x1472 <CDC_Device_SendByte+0x4e>
    145e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1462:	8e 77       	andi	r24, 0x7E	; 126
    1464:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1468:	9e dc       	rcall	.-1732   	; 0xda6 <Endpoint_WaitUntilReady>
    146a:	88 23       	and	r24, r24
    146c:	a1 f3       	breq	.-24     	; 0x1456 <CDC_Device_SendByte+0x32>
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <CDC_Device_SendByte+0x4e>
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	08 95       	ret

0000147a <CDC_Device_putchar>:
    147a:	fb 01       	movw	r30, r22
    147c:	68 2f       	mov	r22, r24
    147e:	84 85       	ldd	r24, Z+12	; 0x0c
    1480:	95 85       	ldd	r25, Z+13	; 0x0d
    1482:	d0 df       	rcall	.-96     	; 0x1424 <CDC_Device_SendByte>
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 11       	cpse	r24, r1
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <CDC_Device_putchar+0x16>
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	88 27       	eor	r24, r24
    1492:	99 27       	eor	r25, r25
    1494:	82 1b       	sub	r24, r18
    1496:	93 0b       	sbc	r25, r19
    1498:	08 95       	ret

0000149a <CDC_Device_Flush>:
    149a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <USB_DeviceState>
    149e:	24 30       	cpi	r18, 0x04	; 4
    14a0:	41 f5       	brne	.+80     	; 0x14f2 <CDC_Device_Flush+0x58>
    14a2:	fc 01       	movw	r30, r24
    14a4:	44 89       	ldd	r20, Z+20	; 0x14
    14a6:	55 89       	ldd	r21, Z+21	; 0x15
    14a8:	66 89       	ldd	r22, Z+22	; 0x16
    14aa:	77 89       	ldd	r23, Z+23	; 0x17
    14ac:	45 2b       	or	r20, r21
    14ae:	46 2b       	or	r20, r22
    14b0:	47 2b       	or	r20, r23
    14b2:	f9 f0       	breq	.+62     	; 0x14f2 <CDC_Device_Flush+0x58>
    14b4:	81 81       	ldd	r24, Z+1	; 0x01
    14b6:	8f 70       	andi	r24, 0x0F	; 15
    14b8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    14bc:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    14c0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	92 2b       	or	r25, r18
    14c8:	89 2b       	or	r24, r25
    14ca:	89 f0       	breq	.+34     	; 0x14ee <CDC_Device_Flush+0x54>
    14cc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14d4:	8e 77       	andi	r24, 0x7E	; 126
    14d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14da:	95 fd       	sbrc	r25, 5
    14dc:	08 c0       	rjmp	.+16     	; 0x14ee <CDC_Device_Flush+0x54>
    14de:	63 dc       	rcall	.-1850   	; 0xda6 <Endpoint_WaitUntilReady>
    14e0:	81 11       	cpse	r24, r1
    14e2:	08 c0       	rjmp	.+16     	; 0x14f4 <CDC_Device_Flush+0x5a>
    14e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14e8:	8e 77       	andi	r24, 0x7E	; 126
    14ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	08 95       	ret
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	08 95       	ret

000014f6 <CDC_Device_USBTask>:
    14f6:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <USB_DeviceState>
    14fa:	24 30       	cpi	r18, 0x04	; 4
    14fc:	89 f4       	brne	.+34     	; 0x1520 <CDC_Device_USBTask+0x2a>
    14fe:	fc 01       	movw	r30, r24
    1500:	44 89       	ldd	r20, Z+20	; 0x14
    1502:	55 89       	ldd	r21, Z+21	; 0x15
    1504:	66 89       	ldd	r22, Z+22	; 0x16
    1506:	77 89       	ldd	r23, Z+23	; 0x17
    1508:	45 2b       	or	r20, r21
    150a:	46 2b       	or	r20, r22
    150c:	47 2b       	or	r20, r23
    150e:	41 f0       	breq	.+16     	; 0x1520 <CDC_Device_USBTask+0x2a>
    1510:	21 81       	ldd	r18, Z+1	; 0x01
    1512:	2f 70       	andi	r18, 0x0F	; 15
    1514:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1518:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    151c:	20 fd       	sbrc	r18, 0
    151e:	bd cf       	rjmp	.-134    	; 0x149a <CDC_Device_Flush>
    1520:	08 95       	ret

00001522 <CDC_Device_ReceiveByte>:
    1522:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <USB_DeviceState>
    1526:	24 30       	cpi	r18, 0x04	; 4
    1528:	19 f0       	breq	.+6      	; 0x1530 <CDC_Device_ReceiveByte+0xe>
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	08 95       	ret
    1530:	fc 01       	movw	r30, r24
    1532:	44 89       	ldd	r20, Z+20	; 0x14
    1534:	55 89       	ldd	r21, Z+21	; 0x15
    1536:	66 89       	ldd	r22, Z+22	; 0x16
    1538:	77 89       	ldd	r23, Z+23	; 0x17
    153a:	45 2b       	or	r20, r21
    153c:	46 2b       	or	r20, r22
    153e:	47 2b       	or	r20, r23
    1540:	a1 f3       	breq	.-24     	; 0x152a <CDC_Device_ReceiveByte+0x8>
    1542:	86 81       	ldd	r24, Z+6	; 0x06
    1544:	8f 70       	andi	r24, 0x0F	; 15
    1546:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    154a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    154e:	82 ff       	sbrs	r24, 2
    1550:	ec cf       	rjmp	.-40     	; 0x152a <CDC_Device_ReceiveByte+0x8>
    1552:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1556:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	92 2b       	or	r25, r18
    155e:	89 2b       	or	r24, r25
    1560:	21 f0       	breq	.+8      	; 0x156a <CDC_Device_ReceiveByte+0x48>
    1562:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <CDC_Device_ReceiveByte+0x4c>
    156a:	2f ef       	ldi	r18, 0xFF	; 255
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1572:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	94 2b       	or	r25, r20
    157a:	89 2b       	or	r24, r25
    157c:	29 f4       	brne	.+10     	; 0x1588 <CDC_Device_ReceiveByte+0x66>
    157e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1582:	8b 77       	andi	r24, 0x7B	; 123
    1584:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1588:	c9 01       	movw	r24, r18
    158a:	08 95       	ret

0000158c <CDC_Device_getchar>:
    158c:	fc 01       	movw	r30, r24
    158e:	84 85       	ldd	r24, Z+12	; 0x0c
    1590:	95 85       	ldd	r25, Z+13	; 0x0d
    1592:	c7 df       	rcall	.-114    	; 0x1522 <CDC_Device_ReceiveByte>
    1594:	97 ff       	sbrs	r25, 7
    1596:	02 c0       	rjmp	.+4      	; 0x159c <CDC_Device_getchar+0x10>
    1598:	8e ef       	ldi	r24, 0xFE	; 254
    159a:	9f ef       	ldi	r25, 0xFF	; 255
    159c:	08 95       	ret

0000159e <CDC_Device_CreateStream>:
    159e:	fb 01       	movw	r30, r22
    15a0:	2e e0       	ldi	r18, 0x0E	; 14
    15a2:	db 01       	movw	r26, r22
    15a4:	1d 92       	st	X+, r1
    15a6:	2a 95       	dec	r18
    15a8:	e9 f7       	brne	.-6      	; 0x15a4 <CDC_Device_CreateStream+0x6>
    15aa:	23 e0       	ldi	r18, 0x03	; 3
    15ac:	23 83       	std	Z+3, r18	; 0x03
    15ae:	2d e3       	ldi	r18, 0x3D	; 61
    15b0:	3a e0       	ldi	r19, 0x0A	; 10
    15b2:	31 87       	std	Z+9, r19	; 0x09
    15b4:	20 87       	std	Z+8, r18	; 0x08
    15b6:	26 ec       	ldi	r18, 0xC6	; 198
    15b8:	3a e0       	ldi	r19, 0x0A	; 10
    15ba:	33 87       	std	Z+11, r19	; 0x0b
    15bc:	22 87       	std	Z+10, r18	; 0x0a
    15be:	95 87       	std	Z+13, r25	; 0x0d
    15c0:	84 87       	std	Z+12, r24	; 0x0c
    15c2:	08 95       	ret

000015c4 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    15c4:	08 95       	ret

000015c6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    15d0:	83 ff       	sbrs	r24, 3
    15d2:	a7 c0       	rjmp	.+334    	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    15d4:	88 81       	ld	r24, Y
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <USB_ControlRequest+0x4>
    15dc:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <USB_ControlRequest+0x5>
    15e0:	28 17       	cp	r18, r24
    15e2:	39 07       	cpc	r19, r25
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <CDC_Device_ProcessControlRequest+0x22>
    15e6:	9d c0       	rjmp	.+314    	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    15e8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <USB_ControlRequest+0x1>
    15ec:	81 32       	cpi	r24, 0x21	; 33
    15ee:	61 f0       	breq	.+24     	; 0x1608 <CDC_Device_ProcessControlRequest+0x42>
    15f0:	20 f4       	brcc	.+8      	; 0x15fa <CDC_Device_ProcessControlRequest+0x34>
    15f2:	80 32       	cpi	r24, 0x20	; 32
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <CDC_Device_ProcessControlRequest+0x32>
    15f6:	3e c0       	rjmp	.+124    	; 0x1674 <CDC_Device_ProcessControlRequest+0xae>
    15f8:	94 c0       	rjmp	.+296    	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
    15fa:	82 32       	cpi	r24, 0x22	; 34
    15fc:	09 f4       	brne	.+2      	; 0x1600 <CDC_Device_ProcessControlRequest+0x3a>
    15fe:	6c c0       	rjmp	.+216    	; 0x16d8 <CDC_Device_ProcessControlRequest+0x112>
    1600:	83 32       	cpi	r24, 0x23	; 35
    1602:	09 f4       	brne	.+2      	; 0x1606 <CDC_Device_ProcessControlRequest+0x40>
    1604:	7e c0       	rjmp	.+252    	; 0x1702 <CDC_Device_ProcessControlRequest+0x13c>
    1606:	8d c0       	rjmp	.+282    	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1608:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <USB_ControlRequest>
    160c:	81 3a       	cpi	r24, 0xA1	; 161
    160e:	09 f0       	breq	.+2      	; 0x1612 <CDC_Device_ProcessControlRequest+0x4c>
    1610:	88 c0       	rjmp	.+272    	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1612:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1616:	87 7f       	andi	r24, 0xF7	; 247
    1618:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    161c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1620:	80 ff       	sbrs	r24, 0
    1622:	fc cf       	rjmp	.-8      	; 0x161c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1624:	8c 89       	ldd	r24, Y+20	; 0x14
    1626:	9d 89       	ldd	r25, Y+21	; 0x15
    1628:	ae 89       	ldd	r26, Y+22	; 0x16
    162a:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    162c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1630:	49 2f       	mov	r20, r25
    1632:	5a 2f       	mov	r21, r26
    1634:	6b 2f       	mov	r22, r27
    1636:	77 27       	eor	r23, r23
    1638:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
    163c:	ad 01       	movw	r20, r26
    163e:	66 27       	eor	r22, r22
    1640:	77 27       	eor	r23, r23
    1642:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
    1646:	8b 2f       	mov	r24, r27
    1648:	99 27       	eor	r25, r25
    164a:	aa 27       	eor	r26, r26
    164c:	bb 27       	eor	r27, r27
    164e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1652:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1654:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1658:	89 8d       	ldd	r24, Y+25	; 0x19
    165a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    165e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1660:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1664:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1668:	8e 77       	andi	r24, 0x7E	; 126
    166a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    166e:	df 91       	pop	r29
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1670:	cf 91       	pop	r28
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1672:	7a cb       	rjmp	.-2316   	; 0xd68 <Endpoint_ClearStatusStage>
    1674:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <USB_ControlRequest>
    1678:	81 32       	cpi	r24, 0x21	; 33
    167a:	09 f0       	breq	.+2      	; 0x167e <CDC_Device_ProcessControlRequest+0xb8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    167c:	52 c0       	rjmp	.+164    	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
    167e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1682:	87 7f       	andi	r24, 0xF7	; 247
    1684:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1688:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    168c:	82 fd       	sbrc	r24, 2
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    168e:	05 c0       	rjmp	.+10     	; 0x169a <CDC_Device_ProcessControlRequest+0xd4>
    1690:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_DeviceState>
    1694:	81 11       	cpse	r24, r1
    1696:	f8 cf       	rjmp	.-16     	; 0x1688 <CDC_Device_ProcessControlRequest+0xc2>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1698:	44 c0       	rjmp	.+136    	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
    169a:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
    169e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
    16a2:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
    16a6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    16aa:	3c 8b       	std	Y+20, r19	; 0x14
    16ac:	2d 8b       	std	Y+21, r18	; 0x15
    16ae:	9e 8b       	std	Y+22, r25	; 0x16
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16b0:	8f 8b       	std	Y+23, r24	; 0x17
    16b2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    16b6:	88 8f       	std	Y+24, r24	; 0x18
    16b8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    16bc:	89 8f       	std	Y+25, r24	; 0x19
    16be:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16c2:	8a 8f       	std	Y+26, r24	; 0x1a
    16c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16c8:	8b 77       	andi	r24, 0x7B	; 123
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    16ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    16ce:	4c db       	rcall	.-2408   	; 0xd68 <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    16d0:	ce 01       	movw	r24, r28
    16d2:	df 91       	pop	r29
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16d4:	cf 91       	pop	r28
    16d6:	76 cf       	rjmp	.-276    	; 0x15c4 <CDC_Device_Event_Stub>
    16d8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <USB_ControlRequest>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16dc:	81 32       	cpi	r24, 0x21	; 33
    16de:	09 f5       	brne	.+66     	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
    16e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    16e4:	87 7f       	andi	r24, 0xF7	; 247
    16e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    16ea:	3e db       	rcall	.-2436   	; 0xd68 <Endpoint_ClearStatusStage>
    16ec:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <USB_ControlRequest+0x2>
    16f0:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <USB_ControlRequest+0x3>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    16f4:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    16f6:	88 8b       	std	Y+16, r24	; 0x10
    16f8:	ce 01       	movw	r24, r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16fe:	0c 94 bf 02 	jmp	0x57e	; 0x57e <EVENT_CDC_Device_ControLineStateChanged>
    1702:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <USB_ControlRequest>
    1706:	81 32       	cpi	r24, 0x21	; 33
    1708:	61 f4       	brne	.+24     	; 0x1722 <CDC_Device_ProcessControlRequest+0x15c>
    170a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    170e:	87 7f       	andi	r24, 0xF7	; 247

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1710:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}

			break;
	}
}
    1714:	29 db       	rcall	.-2478   	; 0xd68 <Endpoint_ClearStatusStage>
    1716:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <USB_ControlRequest+0x2>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    171a:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	51 cf       	rjmp	.-350    	; 0x15c4 <CDC_Device_Event_Stub>
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <__subsf3>:
    1728:	50 58       	subi	r21, 0x80	; 128

0000172a <__addsf3>:
    172a:	bb 27       	eor	r27, r27
    172c:	aa 27       	eor	r26, r26
    172e:	0e d0       	rcall	.+28     	; 0x174c <__addsf3x>
    1730:	44 c1       	rjmp	.+648    	; 0x19ba <__fp_round>
    1732:	35 d1       	rcall	.+618    	; 0x199e <__fp_pscA>
    1734:	30 f0       	brcs	.+12     	; 0x1742 <__addsf3+0x18>
    1736:	3a d1       	rcall	.+628    	; 0x19ac <__fp_pscB>
    1738:	20 f0       	brcs	.+8      	; 0x1742 <__addsf3+0x18>
    173a:	31 f4       	brne	.+12     	; 0x1748 <__addsf3+0x1e>
    173c:	9f 3f       	cpi	r25, 0xFF	; 255
    173e:	11 f4       	brne	.+4      	; 0x1744 <__addsf3+0x1a>
    1740:	1e f4       	brtc	.+6      	; 0x1748 <__addsf3+0x1e>
    1742:	2a c1       	rjmp	.+596    	; 0x1998 <__fp_nan>
    1744:	0e f4       	brtc	.+2      	; 0x1748 <__addsf3+0x1e>
    1746:	e0 95       	com	r30
    1748:	e7 fb       	bst	r30, 7
    174a:	20 c1       	rjmp	.+576    	; 0x198c <__fp_inf>

0000174c <__addsf3x>:
    174c:	e9 2f       	mov	r30, r25
    174e:	46 d1       	rcall	.+652    	; 0x19dc <__fp_split3>
    1750:	80 f3       	brcs	.-32     	; 0x1732 <__addsf3+0x8>
    1752:	ba 17       	cp	r27, r26
    1754:	62 07       	cpc	r22, r18
    1756:	73 07       	cpc	r23, r19
    1758:	84 07       	cpc	r24, r20
    175a:	95 07       	cpc	r25, r21
    175c:	18 f0       	brcs	.+6      	; 0x1764 <__addsf3x+0x18>
    175e:	71 f4       	brne	.+28     	; 0x177c <__addsf3x+0x30>
    1760:	9e f5       	brtc	.+102    	; 0x17c8 <__addsf3x+0x7c>
    1762:	5e c1       	rjmp	.+700    	; 0x1a20 <__fp_zero>
    1764:	0e f4       	brtc	.+2      	; 0x1768 <__addsf3x+0x1c>
    1766:	e0 95       	com	r30
    1768:	0b 2e       	mov	r0, r27
    176a:	ba 2f       	mov	r27, r26
    176c:	a0 2d       	mov	r26, r0
    176e:	0b 01       	movw	r0, r22
    1770:	b9 01       	movw	r22, r18
    1772:	90 01       	movw	r18, r0
    1774:	0c 01       	movw	r0, r24
    1776:	ca 01       	movw	r24, r20
    1778:	a0 01       	movw	r20, r0
    177a:	11 24       	eor	r1, r1
    177c:	ff 27       	eor	r31, r31
    177e:	59 1b       	sub	r21, r25
    1780:	99 f0       	breq	.+38     	; 0x17a8 <__addsf3x+0x5c>
    1782:	59 3f       	cpi	r21, 0xF9	; 249
    1784:	50 f4       	brcc	.+20     	; 0x179a <__addsf3x+0x4e>
    1786:	50 3e       	cpi	r21, 0xE0	; 224
    1788:	68 f1       	brcs	.+90     	; 0x17e4 <__addsf3x+0x98>
    178a:	1a 16       	cp	r1, r26
    178c:	f0 40       	sbci	r31, 0x00	; 0
    178e:	a2 2f       	mov	r26, r18
    1790:	23 2f       	mov	r18, r19
    1792:	34 2f       	mov	r19, r20
    1794:	44 27       	eor	r20, r20
    1796:	58 5f       	subi	r21, 0xF8	; 248
    1798:	f3 cf       	rjmp	.-26     	; 0x1780 <__addsf3x+0x34>
    179a:	46 95       	lsr	r20
    179c:	37 95       	ror	r19
    179e:	27 95       	ror	r18
    17a0:	a7 95       	ror	r26
    17a2:	f0 40       	sbci	r31, 0x00	; 0
    17a4:	53 95       	inc	r21
    17a6:	c9 f7       	brne	.-14     	; 0x179a <__addsf3x+0x4e>
    17a8:	7e f4       	brtc	.+30     	; 0x17c8 <__addsf3x+0x7c>
    17aa:	1f 16       	cp	r1, r31
    17ac:	ba 0b       	sbc	r27, r26
    17ae:	62 0b       	sbc	r22, r18
    17b0:	73 0b       	sbc	r23, r19
    17b2:	84 0b       	sbc	r24, r20
    17b4:	ba f0       	brmi	.+46     	; 0x17e4 <__addsf3x+0x98>
    17b6:	91 50       	subi	r25, 0x01	; 1
    17b8:	a1 f0       	breq	.+40     	; 0x17e2 <__addsf3x+0x96>
    17ba:	ff 0f       	add	r31, r31
    17bc:	bb 1f       	adc	r27, r27
    17be:	66 1f       	adc	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	88 1f       	adc	r24, r24
    17c4:	c2 f7       	brpl	.-16     	; 0x17b6 <__addsf3x+0x6a>
    17c6:	0e c0       	rjmp	.+28     	; 0x17e4 <__addsf3x+0x98>
    17c8:	ba 0f       	add	r27, r26
    17ca:	62 1f       	adc	r22, r18
    17cc:	73 1f       	adc	r23, r19
    17ce:	84 1f       	adc	r24, r20
    17d0:	48 f4       	brcc	.+18     	; 0x17e4 <__addsf3x+0x98>
    17d2:	87 95       	ror	r24
    17d4:	77 95       	ror	r23
    17d6:	67 95       	ror	r22
    17d8:	b7 95       	ror	r27
    17da:	f7 95       	ror	r31
    17dc:	9e 3f       	cpi	r25, 0xFE	; 254
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <__addsf3x+0x96>
    17e0:	b3 cf       	rjmp	.-154    	; 0x1748 <__addsf3+0x1e>
    17e2:	93 95       	inc	r25
    17e4:	88 0f       	add	r24, r24
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <__addsf3x+0x9e>
    17e8:	99 27       	eor	r25, r25
    17ea:	ee 0f       	add	r30, r30
    17ec:	97 95       	ror	r25
    17ee:	87 95       	ror	r24
    17f0:	08 95       	ret

000017f2 <__cmpsf2>:
    17f2:	a8 d0       	rcall	.+336    	; 0x1944 <__fp_cmp>
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <__cmpsf2+0x6>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	08 95       	ret

000017fa <__divsf3>:
    17fa:	0c d0       	rcall	.+24     	; 0x1814 <__divsf3x>
    17fc:	de c0       	rjmp	.+444    	; 0x19ba <__fp_round>
    17fe:	d6 d0       	rcall	.+428    	; 0x19ac <__fp_pscB>
    1800:	40 f0       	brcs	.+16     	; 0x1812 <__divsf3+0x18>
    1802:	cd d0       	rcall	.+410    	; 0x199e <__fp_pscA>
    1804:	30 f0       	brcs	.+12     	; 0x1812 <__divsf3+0x18>
    1806:	21 f4       	brne	.+8      	; 0x1810 <__divsf3+0x16>
    1808:	5f 3f       	cpi	r21, 0xFF	; 255
    180a:	19 f0       	breq	.+6      	; 0x1812 <__divsf3+0x18>
    180c:	bf c0       	rjmp	.+382    	; 0x198c <__fp_inf>
    180e:	51 11       	cpse	r21, r1
    1810:	08 c1       	rjmp	.+528    	; 0x1a22 <__fp_szero>
    1812:	c2 c0       	rjmp	.+388    	; 0x1998 <__fp_nan>

00001814 <__divsf3x>:
    1814:	e3 d0       	rcall	.+454    	; 0x19dc <__fp_split3>
    1816:	98 f3       	brcs	.-26     	; 0x17fe <__divsf3+0x4>

00001818 <__divsf3_pse>:
    1818:	99 23       	and	r25, r25
    181a:	c9 f3       	breq	.-14     	; 0x180e <__divsf3+0x14>
    181c:	55 23       	and	r21, r21
    181e:	b1 f3       	breq	.-20     	; 0x180c <__divsf3+0x12>
    1820:	95 1b       	sub	r25, r21
    1822:	55 0b       	sbc	r21, r21
    1824:	bb 27       	eor	r27, r27
    1826:	aa 27       	eor	r26, r26
    1828:	62 17       	cp	r22, r18
    182a:	73 07       	cpc	r23, r19
    182c:	84 07       	cpc	r24, r20
    182e:	38 f0       	brcs	.+14     	; 0x183e <__divsf3_pse+0x26>
    1830:	9f 5f       	subi	r25, 0xFF	; 255
    1832:	5f 4f       	sbci	r21, 0xFF	; 255
    1834:	22 0f       	add	r18, r18
    1836:	33 1f       	adc	r19, r19
    1838:	44 1f       	adc	r20, r20
    183a:	aa 1f       	adc	r26, r26
    183c:	a9 f3       	breq	.-22     	; 0x1828 <__divsf3_pse+0x10>
    183e:	33 d0       	rcall	.+102    	; 0x18a6 <__divsf3_pse+0x8e>
    1840:	0e 2e       	mov	r0, r30
    1842:	3a f0       	brmi	.+14     	; 0x1852 <__divsf3_pse+0x3a>
    1844:	e0 e8       	ldi	r30, 0x80	; 128
    1846:	30 d0       	rcall	.+96     	; 0x18a8 <__divsf3_pse+0x90>
    1848:	91 50       	subi	r25, 0x01	; 1
    184a:	50 40       	sbci	r21, 0x00	; 0
    184c:	e6 95       	lsr	r30
    184e:	00 1c       	adc	r0, r0
    1850:	ca f7       	brpl	.-14     	; 0x1844 <__divsf3_pse+0x2c>
    1852:	29 d0       	rcall	.+82     	; 0x18a6 <__divsf3_pse+0x8e>
    1854:	fe 2f       	mov	r31, r30
    1856:	27 d0       	rcall	.+78     	; 0x18a6 <__divsf3_pse+0x8e>
    1858:	66 0f       	add	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	bb 1f       	adc	r27, r27
    1860:	26 17       	cp	r18, r22
    1862:	37 07       	cpc	r19, r23
    1864:	48 07       	cpc	r20, r24
    1866:	ab 07       	cpc	r26, r27
    1868:	b0 e8       	ldi	r27, 0x80	; 128
    186a:	09 f0       	breq	.+2      	; 0x186e <__divsf3_pse+0x56>
    186c:	bb 0b       	sbc	r27, r27
    186e:	80 2d       	mov	r24, r0
    1870:	bf 01       	movw	r22, r30
    1872:	ff 27       	eor	r31, r31
    1874:	93 58       	subi	r25, 0x83	; 131
    1876:	5f 4f       	sbci	r21, 0xFF	; 255
    1878:	2a f0       	brmi	.+10     	; 0x1884 <__divsf3_pse+0x6c>
    187a:	9e 3f       	cpi	r25, 0xFE	; 254
    187c:	51 05       	cpc	r21, r1
    187e:	68 f0       	brcs	.+26     	; 0x189a <__divsf3_pse+0x82>
    1880:	85 c0       	rjmp	.+266    	; 0x198c <__fp_inf>
    1882:	cf c0       	rjmp	.+414    	; 0x1a22 <__fp_szero>
    1884:	5f 3f       	cpi	r21, 0xFF	; 255
    1886:	ec f3       	brlt	.-6      	; 0x1882 <__divsf3_pse+0x6a>
    1888:	98 3e       	cpi	r25, 0xE8	; 232
    188a:	dc f3       	brlt	.-10     	; 0x1882 <__divsf3_pse+0x6a>
    188c:	86 95       	lsr	r24
    188e:	77 95       	ror	r23
    1890:	67 95       	ror	r22
    1892:	b7 95       	ror	r27
    1894:	f7 95       	ror	r31
    1896:	9f 5f       	subi	r25, 0xFF	; 255
    1898:	c9 f7       	brne	.-14     	; 0x188c <__divsf3_pse+0x74>
    189a:	88 0f       	add	r24, r24
    189c:	91 1d       	adc	r25, r1
    189e:	96 95       	lsr	r25
    18a0:	87 95       	ror	r24
    18a2:	97 f9       	bld	r25, 7
    18a4:	08 95       	ret
    18a6:	e1 e0       	ldi	r30, 0x01	; 1
    18a8:	66 0f       	add	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	bb 1f       	adc	r27, r27
    18b0:	62 17       	cp	r22, r18
    18b2:	73 07       	cpc	r23, r19
    18b4:	84 07       	cpc	r24, r20
    18b6:	ba 07       	cpc	r27, r26
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <__divsf3_pse+0xaa>
    18ba:	62 1b       	sub	r22, r18
    18bc:	73 0b       	sbc	r23, r19
    18be:	84 0b       	sbc	r24, r20
    18c0:	ba 0b       	sbc	r27, r26
    18c2:	ee 1f       	adc	r30, r30
    18c4:	88 f7       	brcc	.-30     	; 0x18a8 <__divsf3_pse+0x90>
    18c6:	e0 95       	com	r30
    18c8:	08 95       	ret

000018ca <__floatunsisf>:
    18ca:	e8 94       	clt
    18cc:	09 c0       	rjmp	.+18     	; 0x18e0 <__floatsisf+0x12>

000018ce <__floatsisf>:
    18ce:	97 fb       	bst	r25, 7
    18d0:	3e f4       	brtc	.+14     	; 0x18e0 <__floatsisf+0x12>
    18d2:	90 95       	com	r25
    18d4:	80 95       	com	r24
    18d6:	70 95       	com	r23
    18d8:	61 95       	neg	r22
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	8f 4f       	sbci	r24, 0xFF	; 255
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	99 23       	and	r25, r25
    18e2:	a9 f0       	breq	.+42     	; 0x190e <__floatsisf+0x40>
    18e4:	f9 2f       	mov	r31, r25
    18e6:	96 e9       	ldi	r25, 0x96	; 150
    18e8:	bb 27       	eor	r27, r27
    18ea:	93 95       	inc	r25
    18ec:	f6 95       	lsr	r31
    18ee:	87 95       	ror	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	f1 11       	cpse	r31, r1
    18f8:	f8 cf       	rjmp	.-16     	; 0x18ea <__floatsisf+0x1c>
    18fa:	fa f4       	brpl	.+62     	; 0x193a <__floatsisf+0x6c>
    18fc:	bb 0f       	add	r27, r27
    18fe:	11 f4       	brne	.+4      	; 0x1904 <__floatsisf+0x36>
    1900:	60 ff       	sbrs	r22, 0
    1902:	1b c0       	rjmp	.+54     	; 0x193a <__floatsisf+0x6c>
    1904:	6f 5f       	subi	r22, 0xFF	; 255
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	8f 4f       	sbci	r24, 0xFF	; 255
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	16 c0       	rjmp	.+44     	; 0x193a <__floatsisf+0x6c>
    190e:	88 23       	and	r24, r24
    1910:	11 f0       	breq	.+4      	; 0x1916 <__floatsisf+0x48>
    1912:	96 e9       	ldi	r25, 0x96	; 150
    1914:	11 c0       	rjmp	.+34     	; 0x1938 <__floatsisf+0x6a>
    1916:	77 23       	and	r23, r23
    1918:	21 f0       	breq	.+8      	; 0x1922 <__floatsisf+0x54>
    191a:	9e e8       	ldi	r25, 0x8E	; 142
    191c:	87 2f       	mov	r24, r23
    191e:	76 2f       	mov	r23, r22
    1920:	05 c0       	rjmp	.+10     	; 0x192c <__floatsisf+0x5e>
    1922:	66 23       	and	r22, r22
    1924:	71 f0       	breq	.+28     	; 0x1942 <__floatsisf+0x74>
    1926:	96 e8       	ldi	r25, 0x86	; 134
    1928:	86 2f       	mov	r24, r22
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	2a f0       	brmi	.+10     	; 0x193a <__floatsisf+0x6c>
    1930:	9a 95       	dec	r25
    1932:	66 0f       	add	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	da f7       	brpl	.-10     	; 0x1930 <__floatsisf+0x62>
    193a:	88 0f       	add	r24, r24
    193c:	96 95       	lsr	r25
    193e:	87 95       	ror	r24
    1940:	97 f9       	bld	r25, 7
    1942:	08 95       	ret

00001944 <__fp_cmp>:
    1944:	99 0f       	add	r25, r25
    1946:	00 08       	sbc	r0, r0
    1948:	55 0f       	add	r21, r21
    194a:	aa 0b       	sbc	r26, r26
    194c:	e0 e8       	ldi	r30, 0x80	; 128
    194e:	fe ef       	ldi	r31, 0xFE	; 254
    1950:	16 16       	cp	r1, r22
    1952:	17 06       	cpc	r1, r23
    1954:	e8 07       	cpc	r30, r24
    1956:	f9 07       	cpc	r31, r25
    1958:	c0 f0       	brcs	.+48     	; 0x198a <__fp_cmp+0x46>
    195a:	12 16       	cp	r1, r18
    195c:	13 06       	cpc	r1, r19
    195e:	e4 07       	cpc	r30, r20
    1960:	f5 07       	cpc	r31, r21
    1962:	98 f0       	brcs	.+38     	; 0x198a <__fp_cmp+0x46>
    1964:	62 1b       	sub	r22, r18
    1966:	73 0b       	sbc	r23, r19
    1968:	84 0b       	sbc	r24, r20
    196a:	95 0b       	sbc	r25, r21
    196c:	39 f4       	brne	.+14     	; 0x197c <__fp_cmp+0x38>
    196e:	0a 26       	eor	r0, r26
    1970:	61 f0       	breq	.+24     	; 0x198a <__fp_cmp+0x46>
    1972:	23 2b       	or	r18, r19
    1974:	24 2b       	or	r18, r20
    1976:	25 2b       	or	r18, r21
    1978:	21 f4       	brne	.+8      	; 0x1982 <__fp_cmp+0x3e>
    197a:	08 95       	ret
    197c:	0a 26       	eor	r0, r26
    197e:	09 f4       	brne	.+2      	; 0x1982 <__fp_cmp+0x3e>
    1980:	a1 40       	sbci	r26, 0x01	; 1
    1982:	a6 95       	lsr	r26
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	81 1d       	adc	r24, r1
    1988:	81 1d       	adc	r24, r1
    198a:	08 95       	ret

0000198c <__fp_inf>:
    198c:	97 f9       	bld	r25, 7
    198e:	9f 67       	ori	r25, 0x7F	; 127
    1990:	80 e8       	ldi	r24, 0x80	; 128
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	08 95       	ret

00001998 <__fp_nan>:
    1998:	9f ef       	ldi	r25, 0xFF	; 255
    199a:	80 ec       	ldi	r24, 0xC0	; 192
    199c:	08 95       	ret

0000199e <__fp_pscA>:
    199e:	00 24       	eor	r0, r0
    19a0:	0a 94       	dec	r0
    19a2:	16 16       	cp	r1, r22
    19a4:	17 06       	cpc	r1, r23
    19a6:	18 06       	cpc	r1, r24
    19a8:	09 06       	cpc	r0, r25
    19aa:	08 95       	ret

000019ac <__fp_pscB>:
    19ac:	00 24       	eor	r0, r0
    19ae:	0a 94       	dec	r0
    19b0:	12 16       	cp	r1, r18
    19b2:	13 06       	cpc	r1, r19
    19b4:	14 06       	cpc	r1, r20
    19b6:	05 06       	cpc	r0, r21
    19b8:	08 95       	ret

000019ba <__fp_round>:
    19ba:	09 2e       	mov	r0, r25
    19bc:	03 94       	inc	r0
    19be:	00 0c       	add	r0, r0
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <__fp_round+0xc>
    19c2:	88 23       	and	r24, r24
    19c4:	52 f0       	brmi	.+20     	; 0x19da <__fp_round+0x20>
    19c6:	bb 0f       	add	r27, r27
    19c8:	40 f4       	brcc	.+16     	; 0x19da <__fp_round+0x20>
    19ca:	bf 2b       	or	r27, r31
    19cc:	11 f4       	brne	.+4      	; 0x19d2 <__fp_round+0x18>
    19ce:	60 ff       	sbrs	r22, 0
    19d0:	04 c0       	rjmp	.+8      	; 0x19da <__fp_round+0x20>
    19d2:	6f 5f       	subi	r22, 0xFF	; 255
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	08 95       	ret

000019dc <__fp_split3>:
    19dc:	57 fd       	sbrc	r21, 7
    19de:	90 58       	subi	r25, 0x80	; 128
    19e0:	44 0f       	add	r20, r20
    19e2:	55 1f       	adc	r21, r21
    19e4:	59 f0       	breq	.+22     	; 0x19fc <__fp_splitA+0x10>
    19e6:	5f 3f       	cpi	r21, 0xFF	; 255
    19e8:	71 f0       	breq	.+28     	; 0x1a06 <__fp_splitA+0x1a>
    19ea:	47 95       	ror	r20

000019ec <__fp_splitA>:
    19ec:	88 0f       	add	r24, r24
    19ee:	97 fb       	bst	r25, 7
    19f0:	99 1f       	adc	r25, r25
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <__fp_splitA+0x20>
    19f4:	9f 3f       	cpi	r25, 0xFF	; 255
    19f6:	79 f0       	breq	.+30     	; 0x1a16 <__fp_splitA+0x2a>
    19f8:	87 95       	ror	r24
    19fa:	08 95       	ret
    19fc:	12 16       	cp	r1, r18
    19fe:	13 06       	cpc	r1, r19
    1a00:	14 06       	cpc	r1, r20
    1a02:	55 1f       	adc	r21, r21
    1a04:	f2 cf       	rjmp	.-28     	; 0x19ea <__fp_split3+0xe>
    1a06:	46 95       	lsr	r20
    1a08:	f1 df       	rcall	.-30     	; 0x19ec <__fp_splitA>
    1a0a:	08 c0       	rjmp	.+16     	; 0x1a1c <__fp_splitA+0x30>
    1a0c:	16 16       	cp	r1, r22
    1a0e:	17 06       	cpc	r1, r23
    1a10:	18 06       	cpc	r1, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	f1 cf       	rjmp	.-30     	; 0x19f8 <__fp_splitA+0xc>
    1a16:	86 95       	lsr	r24
    1a18:	71 05       	cpc	r23, r1
    1a1a:	61 05       	cpc	r22, r1
    1a1c:	08 94       	sec
    1a1e:	08 95       	ret

00001a20 <__fp_zero>:
    1a20:	e8 94       	clt

00001a22 <__fp_szero>:
    1a22:	bb 27       	eor	r27, r27
    1a24:	66 27       	eor	r22, r22
    1a26:	77 27       	eor	r23, r23
    1a28:	cb 01       	movw	r24, r22
    1a2a:	97 f9       	bld	r25, 7
    1a2c:	08 95       	ret

00001a2e <__gesf2>:
    1a2e:	8a df       	rcall	.-236    	; 0x1944 <__fp_cmp>
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <__gesf2+0x6>
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	08 95       	ret

00001a36 <__mulsf3>:
    1a36:	0b d0       	rcall	.+22     	; 0x1a4e <__mulsf3x>
    1a38:	c0 cf       	rjmp	.-128    	; 0x19ba <__fp_round>
    1a3a:	b1 df       	rcall	.-158    	; 0x199e <__fp_pscA>
    1a3c:	28 f0       	brcs	.+10     	; 0x1a48 <__mulsf3+0x12>
    1a3e:	b6 df       	rcall	.-148    	; 0x19ac <__fp_pscB>
    1a40:	18 f0       	brcs	.+6      	; 0x1a48 <__mulsf3+0x12>
    1a42:	95 23       	and	r25, r21
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <__mulsf3+0x12>
    1a46:	a2 cf       	rjmp	.-188    	; 0x198c <__fp_inf>
    1a48:	a7 cf       	rjmp	.-178    	; 0x1998 <__fp_nan>
    1a4a:	11 24       	eor	r1, r1
    1a4c:	ea cf       	rjmp	.-44     	; 0x1a22 <__fp_szero>

00001a4e <__mulsf3x>:
    1a4e:	c6 df       	rcall	.-116    	; 0x19dc <__fp_split3>
    1a50:	a0 f3       	brcs	.-24     	; 0x1a3a <__mulsf3+0x4>

00001a52 <__mulsf3_pse>:
    1a52:	95 9f       	mul	r25, r21
    1a54:	d1 f3       	breq	.-12     	; 0x1a4a <__mulsf3+0x14>
    1a56:	95 0f       	add	r25, r21
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	55 1f       	adc	r21, r21
    1a5c:	62 9f       	mul	r22, r18
    1a5e:	f0 01       	movw	r30, r0
    1a60:	72 9f       	mul	r23, r18
    1a62:	bb 27       	eor	r27, r27
    1a64:	f0 0d       	add	r31, r0
    1a66:	b1 1d       	adc	r27, r1
    1a68:	63 9f       	mul	r22, r19
    1a6a:	aa 27       	eor	r26, r26
    1a6c:	f0 0d       	add	r31, r0
    1a6e:	b1 1d       	adc	r27, r1
    1a70:	aa 1f       	adc	r26, r26
    1a72:	64 9f       	mul	r22, r20
    1a74:	66 27       	eor	r22, r22
    1a76:	b0 0d       	add	r27, r0
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	66 1f       	adc	r22, r22
    1a7c:	82 9f       	mul	r24, r18
    1a7e:	22 27       	eor	r18, r18
    1a80:	b0 0d       	add	r27, r0
    1a82:	a1 1d       	adc	r26, r1
    1a84:	62 1f       	adc	r22, r18
    1a86:	73 9f       	mul	r23, r19
    1a88:	b0 0d       	add	r27, r0
    1a8a:	a1 1d       	adc	r26, r1
    1a8c:	62 1f       	adc	r22, r18
    1a8e:	83 9f       	mul	r24, r19
    1a90:	a0 0d       	add	r26, r0
    1a92:	61 1d       	adc	r22, r1
    1a94:	22 1f       	adc	r18, r18
    1a96:	74 9f       	mul	r23, r20
    1a98:	33 27       	eor	r19, r19
    1a9a:	a0 0d       	add	r26, r0
    1a9c:	61 1d       	adc	r22, r1
    1a9e:	23 1f       	adc	r18, r19
    1aa0:	84 9f       	mul	r24, r20
    1aa2:	60 0d       	add	r22, r0
    1aa4:	21 1d       	adc	r18, r1
    1aa6:	82 2f       	mov	r24, r18
    1aa8:	76 2f       	mov	r23, r22
    1aaa:	6a 2f       	mov	r22, r26
    1aac:	11 24       	eor	r1, r1
    1aae:	9f 57       	subi	r25, 0x7F	; 127
    1ab0:	50 40       	sbci	r21, 0x00	; 0
    1ab2:	8a f0       	brmi	.+34     	; 0x1ad6 <__mulsf3_pse+0x84>
    1ab4:	e1 f0       	breq	.+56     	; 0x1aee <__mulsf3_pse+0x9c>
    1ab6:	88 23       	and	r24, r24
    1ab8:	4a f0       	brmi	.+18     	; 0x1acc <__mulsf3_pse+0x7a>
    1aba:	ee 0f       	add	r30, r30
    1abc:	ff 1f       	adc	r31, r31
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	66 1f       	adc	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	91 50       	subi	r25, 0x01	; 1
    1ac8:	50 40       	sbci	r21, 0x00	; 0
    1aca:	a9 f7       	brne	.-22     	; 0x1ab6 <__mulsf3_pse+0x64>
    1acc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ace:	51 05       	cpc	r21, r1
    1ad0:	70 f0       	brcs	.+28     	; 0x1aee <__mulsf3_pse+0x9c>
    1ad2:	5c cf       	rjmp	.-328    	; 0x198c <__fp_inf>
    1ad4:	a6 cf       	rjmp	.-180    	; 0x1a22 <__fp_szero>
    1ad6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad8:	ec f3       	brlt	.-6      	; 0x1ad4 <__mulsf3_pse+0x82>
    1ada:	98 3e       	cpi	r25, 0xE8	; 232
    1adc:	dc f3       	brlt	.-10     	; 0x1ad4 <__mulsf3_pse+0x82>
    1ade:	86 95       	lsr	r24
    1ae0:	77 95       	ror	r23
    1ae2:	67 95       	ror	r22
    1ae4:	b7 95       	ror	r27
    1ae6:	f7 95       	ror	r31
    1ae8:	e7 95       	ror	r30
    1aea:	9f 5f       	subi	r25, 0xFF	; 255
    1aec:	c1 f7       	brne	.-16     	; 0x1ade <__mulsf3_pse+0x8c>
    1aee:	fe 2b       	or	r31, r30
    1af0:	88 0f       	add	r24, r24
    1af2:	91 1d       	adc	r25, r1
    1af4:	96 95       	lsr	r25
    1af6:	87 95       	ror	r24
    1af8:	97 f9       	bld	r25, 7
    1afa:	08 95       	ret

00001afc <vfprintf>:
    1afc:	a0 e1       	ldi	r26, 0x10	; 16
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e3 e8       	ldi	r30, 0x83	; 131
    1b02:	fd e0       	ldi	r31, 0x0D	; 13
    1b04:	59 c7       	rjmp	.+3762   	; 0x29b8 <__prologue_saves__>
    1b06:	7c 01       	movw	r14, r24
    1b08:	1b 01       	movw	r2, r22
    1b0a:	6a 01       	movw	r12, r20
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	17 82       	std	Z+7, r1	; 0x07
    1b10:	16 82       	std	Z+6, r1	; 0x06
    1b12:	83 81       	ldd	r24, Z+3	; 0x03
    1b14:	81 ff       	sbrs	r24, 1
    1b16:	2b c3       	rjmp	.+1622   	; 0x216e <vfprintf+0x672>
    1b18:	9e 01       	movw	r18, r28
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	39 01       	movw	r6, r18
    1b20:	f7 01       	movw	r30, r14
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	f1 01       	movw	r30, r2
    1b26:	93 fd       	sbrc	r25, 3
    1b28:	85 91       	lpm	r24, Z+
    1b2a:	93 ff       	sbrs	r25, 3
    1b2c:	81 91       	ld	r24, Z+
    1b2e:	1f 01       	movw	r2, r30
    1b30:	88 23       	and	r24, r24
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <vfprintf+0x3a>
    1b34:	18 c3       	rjmp	.+1584   	; 0x2166 <vfprintf+0x66a>
    1b36:	85 32       	cpi	r24, 0x25	; 37
    1b38:	39 f4       	brne	.+14     	; 0x1b48 <vfprintf+0x4c>
    1b3a:	93 fd       	sbrc	r25, 3
    1b3c:	85 91       	lpm	r24, Z+
    1b3e:	93 ff       	sbrs	r25, 3
    1b40:	81 91       	ld	r24, Z+
    1b42:	1f 01       	movw	r2, r30
    1b44:	85 32       	cpi	r24, 0x25	; 37
    1b46:	39 f4       	brne	.+14     	; 0x1b56 <vfprintf+0x5a>
    1b48:	b7 01       	movw	r22, r14
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <fputc>
    1b50:	56 01       	movw	r10, r12
    1b52:	65 01       	movw	r12, r10
    1b54:	e5 cf       	rjmp	.-54     	; 0x1b20 <vfprintf+0x24>
    1b56:	10 e0       	ldi	r17, 0x00	; 0
    1b58:	51 2c       	mov	r5, r1
    1b5a:	91 2c       	mov	r9, r1
    1b5c:	ff e1       	ldi	r31, 0x1F	; 31
    1b5e:	f9 15       	cp	r31, r9
    1b60:	d8 f0       	brcs	.+54     	; 0x1b98 <vfprintf+0x9c>
    1b62:	8b 32       	cpi	r24, 0x2B	; 43
    1b64:	79 f0       	breq	.+30     	; 0x1b84 <vfprintf+0x88>
    1b66:	38 f4       	brcc	.+14     	; 0x1b76 <vfprintf+0x7a>
    1b68:	80 32       	cpi	r24, 0x20	; 32
    1b6a:	79 f0       	breq	.+30     	; 0x1b8a <vfprintf+0x8e>
    1b6c:	83 32       	cpi	r24, 0x23	; 35
    1b6e:	a1 f4       	brne	.+40     	; 0x1b98 <vfprintf+0x9c>
    1b70:	f9 2d       	mov	r31, r9
    1b72:	f0 61       	ori	r31, 0x10	; 16
    1b74:	2e c0       	rjmp	.+92     	; 0x1bd2 <vfprintf+0xd6>
    1b76:	8d 32       	cpi	r24, 0x2D	; 45
    1b78:	61 f0       	breq	.+24     	; 0x1b92 <vfprintf+0x96>
    1b7a:	80 33       	cpi	r24, 0x30	; 48
    1b7c:	69 f4       	brne	.+26     	; 0x1b98 <vfprintf+0x9c>
    1b7e:	29 2d       	mov	r18, r9
    1b80:	21 60       	ori	r18, 0x01	; 1
    1b82:	2d c0       	rjmp	.+90     	; 0x1bde <vfprintf+0xe2>
    1b84:	39 2d       	mov	r19, r9
    1b86:	32 60       	ori	r19, 0x02	; 2
    1b88:	93 2e       	mov	r9, r19
    1b8a:	89 2d       	mov	r24, r9
    1b8c:	84 60       	ori	r24, 0x04	; 4
    1b8e:	98 2e       	mov	r9, r24
    1b90:	2a c0       	rjmp	.+84     	; 0x1be6 <vfprintf+0xea>
    1b92:	e9 2d       	mov	r30, r9
    1b94:	e8 60       	ori	r30, 0x08	; 8
    1b96:	15 c0       	rjmp	.+42     	; 0x1bc2 <vfprintf+0xc6>
    1b98:	97 fc       	sbrc	r9, 7
    1b9a:	2d c0       	rjmp	.+90     	; 0x1bf6 <vfprintf+0xfa>
    1b9c:	20 ed       	ldi	r18, 0xD0	; 208
    1b9e:	28 0f       	add	r18, r24
    1ba0:	2a 30       	cpi	r18, 0x0A	; 10
    1ba2:	88 f4       	brcc	.+34     	; 0x1bc6 <vfprintf+0xca>
    1ba4:	96 fe       	sbrs	r9, 6
    1ba6:	06 c0       	rjmp	.+12     	; 0x1bb4 <vfprintf+0xb8>
    1ba8:	3a e0       	ldi	r19, 0x0A	; 10
    1baa:	13 9f       	mul	r17, r19
    1bac:	20 0d       	add	r18, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	12 2f       	mov	r17, r18
    1bb2:	19 c0       	rjmp	.+50     	; 0x1be6 <vfprintf+0xea>
    1bb4:	8a e0       	ldi	r24, 0x0A	; 10
    1bb6:	58 9e       	mul	r5, r24
    1bb8:	20 0d       	add	r18, r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	52 2e       	mov	r5, r18
    1bbe:	e9 2d       	mov	r30, r9
    1bc0:	e0 62       	ori	r30, 0x20	; 32
    1bc2:	9e 2e       	mov	r9, r30
    1bc4:	10 c0       	rjmp	.+32     	; 0x1be6 <vfprintf+0xea>
    1bc6:	8e 32       	cpi	r24, 0x2E	; 46
    1bc8:	31 f4       	brne	.+12     	; 0x1bd6 <vfprintf+0xda>
    1bca:	96 fc       	sbrc	r9, 6
    1bcc:	cc c2       	rjmp	.+1432   	; 0x2166 <vfprintf+0x66a>
    1bce:	f9 2d       	mov	r31, r9
    1bd0:	f0 64       	ori	r31, 0x40	; 64
    1bd2:	9f 2e       	mov	r9, r31
    1bd4:	08 c0       	rjmp	.+16     	; 0x1be6 <vfprintf+0xea>
    1bd6:	8c 36       	cpi	r24, 0x6C	; 108
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <vfprintf+0xe6>
    1bda:	29 2d       	mov	r18, r9
    1bdc:	20 68       	ori	r18, 0x80	; 128
    1bde:	92 2e       	mov	r9, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <vfprintf+0xea>
    1be2:	88 36       	cpi	r24, 0x68	; 104
    1be4:	41 f4       	brne	.+16     	; 0x1bf6 <vfprintf+0xfa>
    1be6:	f1 01       	movw	r30, r2
    1be8:	93 fd       	sbrc	r25, 3
    1bea:	85 91       	lpm	r24, Z+
    1bec:	93 ff       	sbrs	r25, 3
    1bee:	81 91       	ld	r24, Z+
    1bf0:	1f 01       	movw	r2, r30
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	b3 cf       	rjmp	.-154    	; 0x1b5c <vfprintf+0x60>
    1bf6:	9b eb       	ldi	r25, 0xBB	; 187
    1bf8:	98 0f       	add	r25, r24
    1bfa:	93 30       	cpi	r25, 0x03	; 3
    1bfc:	20 f4       	brcc	.+8      	; 0x1c06 <vfprintf+0x10a>
    1bfe:	99 2d       	mov	r25, r9
    1c00:	90 61       	ori	r25, 0x10	; 16
    1c02:	80 5e       	subi	r24, 0xE0	; 224
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <vfprintf+0x118>
    1c06:	9b e9       	ldi	r25, 0x9B	; 155
    1c08:	98 0f       	add	r25, r24
    1c0a:	93 30       	cpi	r25, 0x03	; 3
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <vfprintf+0x114>
    1c0e:	59 c1       	rjmp	.+690    	; 0x1ec2 <vfprintf+0x3c6>
    1c10:	99 2d       	mov	r25, r9
    1c12:	9f 7e       	andi	r25, 0xEF	; 239
    1c14:	96 ff       	sbrs	r25, 6
    1c16:	16 e0       	ldi	r17, 0x06	; 6
    1c18:	9f 73       	andi	r25, 0x3F	; 63
    1c1a:	99 2e       	mov	r9, r25
    1c1c:	85 36       	cpi	r24, 0x65	; 101
    1c1e:	19 f4       	brne	.+6      	; 0x1c26 <vfprintf+0x12a>
    1c20:	90 64       	ori	r25, 0x40	; 64
    1c22:	99 2e       	mov	r9, r25
    1c24:	08 c0       	rjmp	.+16     	; 0x1c36 <vfprintf+0x13a>
    1c26:	86 36       	cpi	r24, 0x66	; 102
    1c28:	21 f4       	brne	.+8      	; 0x1c32 <vfprintf+0x136>
    1c2a:	39 2f       	mov	r19, r25
    1c2c:	30 68       	ori	r19, 0x80	; 128
    1c2e:	93 2e       	mov	r9, r19
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <vfprintf+0x13a>
    1c32:	11 11       	cpse	r17, r1
    1c34:	11 50       	subi	r17, 0x01	; 1
    1c36:	97 fe       	sbrs	r9, 7
    1c38:	07 c0       	rjmp	.+14     	; 0x1c48 <vfprintf+0x14c>
    1c3a:	1c 33       	cpi	r17, 0x3C	; 60
    1c3c:	50 f4       	brcc	.+20     	; 0x1c52 <vfprintf+0x156>
    1c3e:	44 24       	eor	r4, r4
    1c40:	43 94       	inc	r4
    1c42:	41 0e       	add	r4, r17
    1c44:	27 e0       	ldi	r18, 0x07	; 7
    1c46:	0b c0       	rjmp	.+22     	; 0x1c5e <vfprintf+0x162>
    1c48:	18 30       	cpi	r17, 0x08	; 8
    1c4a:	38 f0       	brcs	.+14     	; 0x1c5a <vfprintf+0x15e>
    1c4c:	27 e0       	ldi	r18, 0x07	; 7
    1c4e:	17 e0       	ldi	r17, 0x07	; 7
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <vfprintf+0x160>
    1c52:	27 e0       	ldi	r18, 0x07	; 7
    1c54:	9c e3       	ldi	r25, 0x3C	; 60
    1c56:	49 2e       	mov	r4, r25
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <vfprintf+0x162>
    1c5a:	21 2f       	mov	r18, r17
    1c5c:	41 2c       	mov	r4, r1
    1c5e:	56 01       	movw	r10, r12
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	a8 0e       	add	r10, r24
    1c64:	b1 1c       	adc	r11, r1
    1c66:	f6 01       	movw	r30, r12
    1c68:	60 81       	ld	r22, Z
    1c6a:	71 81       	ldd	r23, Z+1	; 0x01
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	04 2d       	mov	r16, r4
    1c72:	a3 01       	movw	r20, r6
    1c74:	d8 d6       	rcall	.+3504   	; 0x2a26 <__ftoa_engine>
    1c76:	6c 01       	movw	r12, r24
    1c78:	f9 81       	ldd	r31, Y+1	; 0x01
    1c7a:	fc 87       	std	Y+12, r31	; 0x0c
    1c7c:	f0 ff       	sbrs	r31, 0
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <vfprintf+0x188>
    1c80:	f3 ff       	sbrs	r31, 3
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <vfprintf+0x194>
    1c84:	91 fc       	sbrc	r9, 1
    1c86:	06 c0       	rjmp	.+12     	; 0x1c94 <vfprintf+0x198>
    1c88:	92 fe       	sbrs	r9, 2
    1c8a:	06 c0       	rjmp	.+12     	; 0x1c98 <vfprintf+0x19c>
    1c8c:	00 e2       	ldi	r16, 0x20	; 32
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <vfprintf+0x19e>
    1c90:	0d e2       	ldi	r16, 0x2D	; 45
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <vfprintf+0x19e>
    1c94:	0b e2       	ldi	r16, 0x2B	; 43
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <vfprintf+0x19e>
    1c98:	00 e0       	ldi	r16, 0x00	; 0
    1c9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c9c:	8c 70       	andi	r24, 0x0C	; 12
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <vfprintf+0x1aa>
    1ca0:	01 11       	cpse	r16, r1
    1ca2:	43 c2       	rjmp	.+1158   	; 0x212a <vfprintf+0x62e>
    1ca4:	80 c2       	rjmp	.+1280   	; 0x21a6 <vfprintf+0x6aa>
    1ca6:	97 fe       	sbrs	r9, 7
    1ca8:	10 c0       	rjmp	.+32     	; 0x1cca <vfprintf+0x1ce>
    1caa:	4c 0c       	add	r4, r12
    1cac:	fc 85       	ldd	r31, Y+12	; 0x0c
    1cae:	f4 ff       	sbrs	r31, 4
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <vfprintf+0x1be>
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	81 33       	cpi	r24, 0x31	; 49
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <vfprintf+0x1be>
    1cb8:	4a 94       	dec	r4
    1cba:	14 14       	cp	r1, r4
    1cbc:	74 f5       	brge	.+92     	; 0x1d1a <vfprintf+0x21e>
    1cbe:	28 e0       	ldi	r18, 0x08	; 8
    1cc0:	24 15       	cp	r18, r4
    1cc2:	78 f5       	brcc	.+94     	; 0x1d22 <vfprintf+0x226>
    1cc4:	88 e0       	ldi	r24, 0x08	; 8
    1cc6:	48 2e       	mov	r4, r24
    1cc8:	2c c0       	rjmp	.+88     	; 0x1d22 <vfprintf+0x226>
    1cca:	96 fc       	sbrc	r9, 6
    1ccc:	2a c0       	rjmp	.+84     	; 0x1d22 <vfprintf+0x226>
    1cce:	81 2f       	mov	r24, r17
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	8c 15       	cp	r24, r12
    1cd4:	9d 05       	cpc	r25, r13
    1cd6:	9c f0       	brlt	.+38     	; 0x1cfe <vfprintf+0x202>
    1cd8:	3c ef       	ldi	r19, 0xFC	; 252
    1cda:	c3 16       	cp	r12, r19
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	d3 06       	cpc	r13, r19
    1ce0:	74 f0       	brlt	.+28     	; 0x1cfe <vfprintf+0x202>
    1ce2:	89 2d       	mov	r24, r9
    1ce4:	80 68       	ori	r24, 0x80	; 128
    1ce6:	98 2e       	mov	r9, r24
    1ce8:	0a c0       	rjmp	.+20     	; 0x1cfe <vfprintf+0x202>
    1cea:	e2 e0       	ldi	r30, 0x02	; 2
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	ec 0f       	add	r30, r28
    1cf0:	fd 1f       	adc	r31, r29
    1cf2:	e1 0f       	add	r30, r17
    1cf4:	f1 1d       	adc	r31, r1
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 33       	cpi	r24, 0x30	; 48
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <vfprintf+0x206>
    1cfc:	11 50       	subi	r17, 0x01	; 1
    1cfe:	11 11       	cpse	r17, r1
    1d00:	f4 cf       	rjmp	.-24     	; 0x1cea <vfprintf+0x1ee>
    1d02:	97 fe       	sbrs	r9, 7
    1d04:	0e c0       	rjmp	.+28     	; 0x1d22 <vfprintf+0x226>
    1d06:	44 24       	eor	r4, r4
    1d08:	43 94       	inc	r4
    1d0a:	41 0e       	add	r4, r17
    1d0c:	81 2f       	mov	r24, r17
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	c8 16       	cp	r12, r24
    1d12:	d9 06       	cpc	r13, r25
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <vfprintf+0x224>
    1d16:	1c 19       	sub	r17, r12
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <vfprintf+0x226>
    1d1a:	44 24       	eor	r4, r4
    1d1c:	43 94       	inc	r4
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <vfprintf+0x226>
    1d20:	10 e0       	ldi	r17, 0x00	; 0
    1d22:	97 fe       	sbrs	r9, 7
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <vfprintf+0x236>
    1d26:	1c 14       	cp	r1, r12
    1d28:	1d 04       	cpc	r1, r13
    1d2a:	34 f4       	brge	.+12     	; 0x1d38 <vfprintf+0x23c>
    1d2c:	c6 01       	movw	r24, r12
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <vfprintf+0x240>
    1d32:	85 e0       	ldi	r24, 0x05	; 5
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <vfprintf+0x240>
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	01 11       	cpse	r16, r1
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	11 23       	and	r17, r17
    1d42:	31 f0       	breq	.+12     	; 0x1d50 <vfprintf+0x254>
    1d44:	21 2f       	mov	r18, r17
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	2f 5f       	subi	r18, 0xFF	; 255
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	82 0f       	add	r24, r18
    1d4e:	93 1f       	adc	r25, r19
    1d50:	25 2d       	mov	r18, r5
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	82 17       	cp	r24, r18
    1d56:	93 07       	cpc	r25, r19
    1d58:	14 f4       	brge	.+4      	; 0x1d5e <vfprintf+0x262>
    1d5a:	58 1a       	sub	r5, r24
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <vfprintf+0x264>
    1d5e:	51 2c       	mov	r5, r1
    1d60:	89 2d       	mov	r24, r9
    1d62:	89 70       	andi	r24, 0x09	; 9
    1d64:	41 f4       	brne	.+16     	; 0x1d76 <vfprintf+0x27a>
    1d66:	55 20       	and	r5, r5
    1d68:	31 f0       	breq	.+12     	; 0x1d76 <vfprintf+0x27a>
    1d6a:	b7 01       	movw	r22, r14
    1d6c:	80 e2       	ldi	r24, 0x20	; 32
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	af d7       	rcall	.+3934   	; 0x2cd0 <fputc>
    1d72:	5a 94       	dec	r5
    1d74:	f8 cf       	rjmp	.-16     	; 0x1d66 <vfprintf+0x26a>
    1d76:	00 23       	and	r16, r16
    1d78:	21 f0       	breq	.+8      	; 0x1d82 <vfprintf+0x286>
    1d7a:	b7 01       	movw	r22, r14
    1d7c:	80 2f       	mov	r24, r16
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a7 d7       	rcall	.+3918   	; 0x2cd0 <fputc>
    1d82:	93 fc       	sbrc	r9, 3
    1d84:	08 c0       	rjmp	.+16     	; 0x1d96 <vfprintf+0x29a>
    1d86:	55 20       	and	r5, r5
    1d88:	31 f0       	breq	.+12     	; 0x1d96 <vfprintf+0x29a>
    1d8a:	b7 01       	movw	r22, r14
    1d8c:	80 e3       	ldi	r24, 0x30	; 48
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9f d7       	rcall	.+3902   	; 0x2cd0 <fputc>
    1d92:	5a 94       	dec	r5
    1d94:	f8 cf       	rjmp	.-16     	; 0x1d86 <vfprintf+0x28a>
    1d96:	97 fe       	sbrs	r9, 7
    1d98:	4a c0       	rjmp	.+148    	; 0x1e2e <vfprintf+0x332>
    1d9a:	46 01       	movw	r8, r12
    1d9c:	d7 fe       	sbrs	r13, 7
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <vfprintf+0x2a8>
    1da0:	81 2c       	mov	r8, r1
    1da2:	91 2c       	mov	r9, r1
    1da4:	c6 01       	movw	r24, r12
    1da6:	88 19       	sub	r24, r8
    1da8:	99 09       	sbc	r25, r9
    1daa:	f3 01       	movw	r30, r6
    1dac:	e8 0f       	add	r30, r24
    1dae:	f9 1f       	adc	r31, r25
    1db0:	fe 87       	std	Y+14, r31	; 0x0e
    1db2:	ed 87       	std	Y+13, r30	; 0x0d
    1db4:	96 01       	movw	r18, r12
    1db6:	24 19       	sub	r18, r4
    1db8:	31 09       	sbc	r19, r1
    1dba:	38 8b       	std	Y+16, r19	; 0x10
    1dbc:	2f 87       	std	Y+15, r18	; 0x0f
    1dbe:	01 2f       	mov	r16, r17
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	11 95       	neg	r17
    1dc4:	01 95       	neg	r16
    1dc6:	11 09       	sbc	r17, r1
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	83 16       	cp	r8, r19
    1dcc:	93 06       	cpc	r9, r19
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <vfprintf+0x2dc>
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	8e e2       	ldi	r24, 0x2E	; 46
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	7c d7       	rcall	.+3832   	; 0x2cd0 <fputc>
    1dd8:	c8 14       	cp	r12, r8
    1dda:	d9 04       	cpc	r13, r9
    1ddc:	4c f0       	brlt	.+18     	; 0x1df0 <vfprintf+0x2f4>
    1dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de0:	98 89       	ldd	r25, Y+16	; 0x10
    1de2:	88 15       	cp	r24, r8
    1de4:	99 05       	cpc	r25, r9
    1de6:	24 f4       	brge	.+8      	; 0x1df0 <vfprintf+0x2f4>
    1de8:	ed 85       	ldd	r30, Y+13	; 0x0d
    1dea:	fe 85       	ldd	r31, Y+14	; 0x0e
    1dec:	81 81       	ldd	r24, Z+1	; 0x01
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <vfprintf+0x2f6>
    1df0:	80 e3       	ldi	r24, 0x30	; 48
    1df2:	f1 e0       	ldi	r31, 0x01	; 1
    1df4:	8f 1a       	sub	r8, r31
    1df6:	91 08       	sbc	r9, r1
    1df8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dfa:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dfc:	2f 5f       	subi	r18, 0xFF	; 255
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	3e 87       	std	Y+14, r19	; 0x0e
    1e02:	2d 87       	std	Y+13, r18	; 0x0d
    1e04:	80 16       	cp	r8, r16
    1e06:	91 06       	cpc	r9, r17
    1e08:	24 f0       	brlt	.+8      	; 0x1e12 <vfprintf+0x316>
    1e0a:	b7 01       	movw	r22, r14
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	60 d7       	rcall	.+3776   	; 0x2cd0 <fputc>
    1e10:	db cf       	rjmp	.-74     	; 0x1dc8 <vfprintf+0x2cc>
    1e12:	c8 14       	cp	r12, r8
    1e14:	d9 04       	cpc	r13, r9
    1e16:	41 f4       	brne	.+16     	; 0x1e28 <vfprintf+0x32c>
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	96 33       	cpi	r25, 0x36	; 54
    1e1c:	20 f4       	brcc	.+8      	; 0x1e26 <vfprintf+0x32a>
    1e1e:	95 33       	cpi	r25, 0x35	; 53
    1e20:	19 f4       	brne	.+6      	; 0x1e28 <vfprintf+0x32c>
    1e22:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e24:	34 ff       	sbrs	r19, 4
    1e26:	81 e3       	ldi	r24, 0x31	; 49
    1e28:	b7 01       	movw	r22, r14
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	48 c0       	rjmp	.+144    	; 0x1ebe <vfprintf+0x3c2>
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	81 33       	cpi	r24, 0x31	; 49
    1e32:	19 f0       	breq	.+6      	; 0x1e3a <vfprintf+0x33e>
    1e34:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e36:	9f 7e       	andi	r25, 0xEF	; 239
    1e38:	9c 87       	std	Y+12, r25	; 0x0c
    1e3a:	b7 01       	movw	r22, r14
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	48 d7       	rcall	.+3728   	; 0x2cd0 <fputc>
    1e40:	11 11       	cpse	r17, r1
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <vfprintf+0x352>
    1e44:	94 fc       	sbrc	r9, 4
    1e46:	16 c0       	rjmp	.+44     	; 0x1e74 <vfprintf+0x378>
    1e48:	85 e6       	ldi	r24, 0x65	; 101
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	15 c0       	rjmp	.+42     	; 0x1e78 <vfprintf+0x37c>
    1e4e:	b7 01       	movw	r22, r14
    1e50:	8e e2       	ldi	r24, 0x2E	; 46
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	3d d7       	rcall	.+3706   	; 0x2cd0 <fputc>
    1e56:	1e 5f       	subi	r17, 0xFE	; 254
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	01 e0       	ldi	r16, 0x01	; 1
    1e5c:	08 0f       	add	r16, r24
    1e5e:	f3 01       	movw	r30, r6
    1e60:	e8 0f       	add	r30, r24
    1e62:	f1 1d       	adc	r31, r1
    1e64:	80 81       	ld	r24, Z
    1e66:	b7 01       	movw	r22, r14
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	32 d7       	rcall	.+3684   	; 0x2cd0 <fputc>
    1e6c:	80 2f       	mov	r24, r16
    1e6e:	01 13       	cpse	r16, r17
    1e70:	f4 cf       	rjmp	.-24     	; 0x1e5a <vfprintf+0x35e>
    1e72:	e8 cf       	rjmp	.-48     	; 0x1e44 <vfprintf+0x348>
    1e74:	85 e4       	ldi	r24, 0x45	; 69
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	b7 01       	movw	r22, r14
    1e7a:	2a d7       	rcall	.+3668   	; 0x2cd0 <fputc>
    1e7c:	d7 fc       	sbrc	r13, 7
    1e7e:	06 c0       	rjmp	.+12     	; 0x1e8c <vfprintf+0x390>
    1e80:	c1 14       	cp	r12, r1
    1e82:	d1 04       	cpc	r13, r1
    1e84:	41 f4       	brne	.+16     	; 0x1e96 <vfprintf+0x39a>
    1e86:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e88:	e4 ff       	sbrs	r30, 4
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <vfprintf+0x39a>
    1e8c:	d1 94       	neg	r13
    1e8e:	c1 94       	neg	r12
    1e90:	d1 08       	sbc	r13, r1
    1e92:	8d e2       	ldi	r24, 0x2D	; 45
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <vfprintf+0x39c>
    1e96:	8b e2       	ldi	r24, 0x2B	; 43
    1e98:	b7 01       	movw	r22, r14
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	19 d7       	rcall	.+3634   	; 0x2cd0 <fputc>
    1e9e:	80 e3       	ldi	r24, 0x30	; 48
    1ea0:	2a e0       	ldi	r18, 0x0A	; 10
    1ea2:	c2 16       	cp	r12, r18
    1ea4:	d1 04       	cpc	r13, r1
    1ea6:	2c f0       	brlt	.+10     	; 0x1eb2 <vfprintf+0x3b6>
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	fa e0       	ldi	r31, 0x0A	; 10
    1eac:	cf 1a       	sub	r12, r31
    1eae:	d1 08       	sbc	r13, r1
    1eb0:	f7 cf       	rjmp	.-18     	; 0x1ea0 <vfprintf+0x3a4>
    1eb2:	b7 01       	movw	r22, r14
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0c d7       	rcall	.+3608   	; 0x2cd0 <fputc>
    1eb8:	b7 01       	movw	r22, r14
    1eba:	c6 01       	movw	r24, r12
    1ebc:	c0 96       	adiw	r24, 0x30	; 48
    1ebe:	08 d7       	rcall	.+3600   	; 0x2cd0 <fputc>
    1ec0:	49 c1       	rjmp	.+658    	; 0x2154 <vfprintf+0x658>
    1ec2:	83 36       	cpi	r24, 0x63	; 99
    1ec4:	31 f0       	breq	.+12     	; 0x1ed2 <vfprintf+0x3d6>
    1ec6:	83 37       	cpi	r24, 0x73	; 115
    1ec8:	79 f0       	breq	.+30     	; 0x1ee8 <vfprintf+0x3ec>
    1eca:	83 35       	cpi	r24, 0x53	; 83
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <vfprintf+0x3d4>
    1ece:	52 c0       	rjmp	.+164    	; 0x1f74 <vfprintf+0x478>
    1ed0:	1f c0       	rjmp	.+62     	; 0x1f10 <vfprintf+0x414>
    1ed2:	56 01       	movw	r10, r12
    1ed4:	32 e0       	ldi	r19, 0x02	; 2
    1ed6:	a3 0e       	add	r10, r19
    1ed8:	b1 1c       	adc	r11, r1
    1eda:	f6 01       	movw	r30, r12
    1edc:	80 81       	ld	r24, Z
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	01 e0       	ldi	r16, 0x01	; 1
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	63 01       	movw	r12, r6
    1ee6:	11 c0       	rjmp	.+34     	; 0x1f0a <vfprintf+0x40e>
    1ee8:	56 01       	movw	r10, r12
    1eea:	f2 e0       	ldi	r31, 0x02	; 2
    1eec:	af 0e       	add	r10, r31
    1eee:	b1 1c       	adc	r11, r1
    1ef0:	f6 01       	movw	r30, r12
    1ef2:	c0 80       	ld	r12, Z
    1ef4:	d1 80       	ldd	r13, Z+1	; 0x01
    1ef6:	96 fe       	sbrs	r9, 6
    1ef8:	03 c0       	rjmp	.+6      	; 0x1f00 <vfprintf+0x404>
    1efa:	61 2f       	mov	r22, r17
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <vfprintf+0x408>
    1f00:	6f ef       	ldi	r22, 0xFF	; 255
    1f02:	7f ef       	ldi	r23, 0xFF	; 255
    1f04:	c6 01       	movw	r24, r12
    1f06:	9b d6       	rcall	.+3382   	; 0x2c3e <strnlen>
    1f08:	8c 01       	movw	r16, r24
    1f0a:	f9 2d       	mov	r31, r9
    1f0c:	ff 77       	andi	r31, 0x7F	; 127
    1f0e:	13 c0       	rjmp	.+38     	; 0x1f36 <vfprintf+0x43a>
    1f10:	56 01       	movw	r10, r12
    1f12:	22 e0       	ldi	r18, 0x02	; 2
    1f14:	a2 0e       	add	r10, r18
    1f16:	b1 1c       	adc	r11, r1
    1f18:	f6 01       	movw	r30, r12
    1f1a:	c0 80       	ld	r12, Z
    1f1c:	d1 80       	ldd	r13, Z+1	; 0x01
    1f1e:	96 fe       	sbrs	r9, 6
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <vfprintf+0x42c>
    1f22:	61 2f       	mov	r22, r17
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <vfprintf+0x430>
    1f28:	6f ef       	ldi	r22, 0xFF	; 255
    1f2a:	7f ef       	ldi	r23, 0xFF	; 255
    1f2c:	c6 01       	movw	r24, r12
    1f2e:	6e d6       	rcall	.+3292   	; 0x2c0c <strnlen_P>
    1f30:	8c 01       	movw	r16, r24
    1f32:	f9 2d       	mov	r31, r9
    1f34:	f0 68       	ori	r31, 0x80	; 128
    1f36:	9f 2e       	mov	r9, r31
    1f38:	f3 fd       	sbrc	r31, 3
    1f3a:	18 c0       	rjmp	.+48     	; 0x1f6c <vfprintf+0x470>
    1f3c:	85 2d       	mov	r24, r5
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	08 17       	cp	r16, r24
    1f42:	19 07       	cpc	r17, r25
    1f44:	98 f4       	brcc	.+38     	; 0x1f6c <vfprintf+0x470>
    1f46:	b7 01       	movw	r22, r14
    1f48:	80 e2       	ldi	r24, 0x20	; 32
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	c1 d6       	rcall	.+3458   	; 0x2cd0 <fputc>
    1f4e:	5a 94       	dec	r5
    1f50:	f5 cf       	rjmp	.-22     	; 0x1f3c <vfprintf+0x440>
    1f52:	f6 01       	movw	r30, r12
    1f54:	97 fc       	sbrc	r9, 7
    1f56:	85 91       	lpm	r24, Z+
    1f58:	97 fe       	sbrs	r9, 7
    1f5a:	81 91       	ld	r24, Z+
    1f5c:	6f 01       	movw	r12, r30
    1f5e:	b7 01       	movw	r22, r14
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	b6 d6       	rcall	.+3436   	; 0x2cd0 <fputc>
    1f64:	51 10       	cpse	r5, r1
    1f66:	5a 94       	dec	r5
    1f68:	01 50       	subi	r16, 0x01	; 1
    1f6a:	11 09       	sbc	r17, r1
    1f6c:	01 15       	cp	r16, r1
    1f6e:	11 05       	cpc	r17, r1
    1f70:	81 f7       	brne	.-32     	; 0x1f52 <vfprintf+0x456>
    1f72:	f0 c0       	rjmp	.+480    	; 0x2154 <vfprintf+0x658>
    1f74:	84 36       	cpi	r24, 0x64	; 100
    1f76:	11 f0       	breq	.+4      	; 0x1f7c <vfprintf+0x480>
    1f78:	89 36       	cpi	r24, 0x69	; 105
    1f7a:	59 f5       	brne	.+86     	; 0x1fd2 <vfprintf+0x4d6>
    1f7c:	56 01       	movw	r10, r12
    1f7e:	97 fe       	sbrs	r9, 7
    1f80:	09 c0       	rjmp	.+18     	; 0x1f94 <vfprintf+0x498>
    1f82:	24 e0       	ldi	r18, 0x04	; 4
    1f84:	a2 0e       	add	r10, r18
    1f86:	b1 1c       	adc	r11, r1
    1f88:	f6 01       	movw	r30, r12
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	0a c0       	rjmp	.+20     	; 0x1fa8 <vfprintf+0x4ac>
    1f94:	f2 e0       	ldi	r31, 0x02	; 2
    1f96:	af 0e       	add	r10, r31
    1f98:	b1 1c       	adc	r11, r1
    1f9a:	f6 01       	movw	r30, r12
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	07 2e       	mov	r0, r23
    1fa2:	00 0c       	add	r0, r0
    1fa4:	88 0b       	sbc	r24, r24
    1fa6:	99 0b       	sbc	r25, r25
    1fa8:	f9 2d       	mov	r31, r9
    1faa:	ff 76       	andi	r31, 0x6F	; 111
    1fac:	9f 2e       	mov	r9, r31
    1fae:	97 ff       	sbrs	r25, 7
    1fb0:	09 c0       	rjmp	.+18     	; 0x1fc4 <vfprintf+0x4c8>
    1fb2:	90 95       	com	r25
    1fb4:	80 95       	com	r24
    1fb6:	70 95       	com	r23
    1fb8:	61 95       	neg	r22
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	f0 68       	ori	r31, 0x80	; 128
    1fc2:	9f 2e       	mov	r9, r31
    1fc4:	2a e0       	ldi	r18, 0x0A	; 10
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	a3 01       	movw	r20, r6
    1fca:	0d d7       	rcall	.+3610   	; 0x2de6 <__ultoa_invert>
    1fcc:	c8 2e       	mov	r12, r24
    1fce:	c6 18       	sub	r12, r6
    1fd0:	3e c0       	rjmp	.+124    	; 0x204e <vfprintf+0x552>
    1fd2:	09 2d       	mov	r16, r9
    1fd4:	85 37       	cpi	r24, 0x75	; 117
    1fd6:	21 f4       	brne	.+8      	; 0x1fe0 <vfprintf+0x4e4>
    1fd8:	0f 7e       	andi	r16, 0xEF	; 239
    1fda:	2a e0       	ldi	r18, 0x0A	; 10
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	1d c0       	rjmp	.+58     	; 0x201a <vfprintf+0x51e>
    1fe0:	09 7f       	andi	r16, 0xF9	; 249
    1fe2:	8f 36       	cpi	r24, 0x6F	; 111
    1fe4:	91 f0       	breq	.+36     	; 0x200a <vfprintf+0x50e>
    1fe6:	18 f4       	brcc	.+6      	; 0x1fee <vfprintf+0x4f2>
    1fe8:	88 35       	cpi	r24, 0x58	; 88
    1fea:	59 f0       	breq	.+22     	; 0x2002 <vfprintf+0x506>
    1fec:	bc c0       	rjmp	.+376    	; 0x2166 <vfprintf+0x66a>
    1fee:	80 37       	cpi	r24, 0x70	; 112
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <vfprintf+0x4fc>
    1ff2:	88 37       	cpi	r24, 0x78	; 120
    1ff4:	11 f0       	breq	.+4      	; 0x1ffa <vfprintf+0x4fe>
    1ff6:	b7 c0       	rjmp	.+366    	; 0x2166 <vfprintf+0x66a>
    1ff8:	00 61       	ori	r16, 0x10	; 16
    1ffa:	04 ff       	sbrs	r16, 4
    1ffc:	09 c0       	rjmp	.+18     	; 0x2010 <vfprintf+0x514>
    1ffe:	04 60       	ori	r16, 0x04	; 4
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <vfprintf+0x514>
    2002:	94 fe       	sbrs	r9, 4
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <vfprintf+0x51a>
    2006:	06 60       	ori	r16, 0x06	; 6
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <vfprintf+0x51a>
    200a:	28 e0       	ldi	r18, 0x08	; 8
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	05 c0       	rjmp	.+10     	; 0x201a <vfprintf+0x51e>
    2010:	20 e1       	ldi	r18, 0x10	; 16
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	02 c0       	rjmp	.+4      	; 0x201a <vfprintf+0x51e>
    2016:	20 e1       	ldi	r18, 0x10	; 16
    2018:	32 e0       	ldi	r19, 0x02	; 2
    201a:	56 01       	movw	r10, r12
    201c:	07 ff       	sbrs	r16, 7
    201e:	09 c0       	rjmp	.+18     	; 0x2032 <vfprintf+0x536>
    2020:	84 e0       	ldi	r24, 0x04	; 4
    2022:	a8 0e       	add	r10, r24
    2024:	b1 1c       	adc	r11, r1
    2026:	f6 01       	movw	r30, r12
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	08 c0       	rjmp	.+16     	; 0x2042 <vfprintf+0x546>
    2032:	f2 e0       	ldi	r31, 0x02	; 2
    2034:	af 0e       	add	r10, r31
    2036:	b1 1c       	adc	r11, r1
    2038:	f6 01       	movw	r30, r12
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a3 01       	movw	r20, r6
    2044:	d0 d6       	rcall	.+3488   	; 0x2de6 <__ultoa_invert>
    2046:	c8 2e       	mov	r12, r24
    2048:	c6 18       	sub	r12, r6
    204a:	0f 77       	andi	r16, 0x7F	; 127
    204c:	90 2e       	mov	r9, r16
    204e:	96 fe       	sbrs	r9, 6
    2050:	0b c0       	rjmp	.+22     	; 0x2068 <vfprintf+0x56c>
    2052:	09 2d       	mov	r16, r9
    2054:	0e 7f       	andi	r16, 0xFE	; 254
    2056:	c1 16       	cp	r12, r17
    2058:	50 f4       	brcc	.+20     	; 0x206e <vfprintf+0x572>
    205a:	94 fe       	sbrs	r9, 4
    205c:	0a c0       	rjmp	.+20     	; 0x2072 <vfprintf+0x576>
    205e:	92 fc       	sbrc	r9, 2
    2060:	08 c0       	rjmp	.+16     	; 0x2072 <vfprintf+0x576>
    2062:	09 2d       	mov	r16, r9
    2064:	0e 7e       	andi	r16, 0xEE	; 238
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <vfprintf+0x576>
    2068:	dc 2c       	mov	r13, r12
    206a:	09 2d       	mov	r16, r9
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <vfprintf+0x578>
    206e:	dc 2c       	mov	r13, r12
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <vfprintf+0x578>
    2072:	d1 2e       	mov	r13, r17
    2074:	04 ff       	sbrs	r16, 4
    2076:	0d c0       	rjmp	.+26     	; 0x2092 <vfprintf+0x596>
    2078:	fe 01       	movw	r30, r28
    207a:	ec 0d       	add	r30, r12
    207c:	f1 1d       	adc	r31, r1
    207e:	80 81       	ld	r24, Z
    2080:	80 33       	cpi	r24, 0x30	; 48
    2082:	11 f4       	brne	.+4      	; 0x2088 <vfprintf+0x58c>
    2084:	09 7e       	andi	r16, 0xE9	; 233
    2086:	09 c0       	rjmp	.+18     	; 0x209a <vfprintf+0x59e>
    2088:	02 ff       	sbrs	r16, 2
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <vfprintf+0x59c>
    208c:	d3 94       	inc	r13
    208e:	d3 94       	inc	r13
    2090:	04 c0       	rjmp	.+8      	; 0x209a <vfprintf+0x59e>
    2092:	80 2f       	mov	r24, r16
    2094:	86 78       	andi	r24, 0x86	; 134
    2096:	09 f0       	breq	.+2      	; 0x209a <vfprintf+0x59e>
    2098:	d3 94       	inc	r13
    209a:	03 fd       	sbrc	r16, 3
    209c:	10 c0       	rjmp	.+32     	; 0x20be <vfprintf+0x5c2>
    209e:	00 ff       	sbrs	r16, 0
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <vfprintf+0x5b2>
    20a2:	1c 2d       	mov	r17, r12
    20a4:	d5 14       	cp	r13, r5
    20a6:	78 f4       	brcc	.+30     	; 0x20c6 <vfprintf+0x5ca>
    20a8:	15 0d       	add	r17, r5
    20aa:	1d 19       	sub	r17, r13
    20ac:	0c c0       	rjmp	.+24     	; 0x20c6 <vfprintf+0x5ca>
    20ae:	d5 14       	cp	r13, r5
    20b0:	50 f4       	brcc	.+20     	; 0x20c6 <vfprintf+0x5ca>
    20b2:	b7 01       	movw	r22, r14
    20b4:	80 e2       	ldi	r24, 0x20	; 32
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0b d6       	rcall	.+3094   	; 0x2cd0 <fputc>
    20ba:	d3 94       	inc	r13
    20bc:	f8 cf       	rjmp	.-16     	; 0x20ae <vfprintf+0x5b2>
    20be:	d5 14       	cp	r13, r5
    20c0:	10 f4       	brcc	.+4      	; 0x20c6 <vfprintf+0x5ca>
    20c2:	5d 18       	sub	r5, r13
    20c4:	01 c0       	rjmp	.+2      	; 0x20c8 <vfprintf+0x5cc>
    20c6:	51 2c       	mov	r5, r1
    20c8:	04 ff       	sbrs	r16, 4
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <vfprintf+0x5ee>
    20cc:	b7 01       	movw	r22, r14
    20ce:	80 e3       	ldi	r24, 0x30	; 48
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	fe d5       	rcall	.+3068   	; 0x2cd0 <fputc>
    20d4:	02 ff       	sbrs	r16, 2
    20d6:	16 c0       	rjmp	.+44     	; 0x2104 <vfprintf+0x608>
    20d8:	01 fd       	sbrc	r16, 1
    20da:	03 c0       	rjmp	.+6      	; 0x20e2 <vfprintf+0x5e6>
    20dc:	88 e7       	ldi	r24, 0x78	; 120
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <vfprintf+0x5ea>
    20e2:	88 e5       	ldi	r24, 0x58	; 88
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	b7 01       	movw	r22, r14
    20e8:	0c c0       	rjmp	.+24     	; 0x2102 <vfprintf+0x606>
    20ea:	80 2f       	mov	r24, r16
    20ec:	86 78       	andi	r24, 0x86	; 134
    20ee:	51 f0       	breq	.+20     	; 0x2104 <vfprintf+0x608>
    20f0:	01 ff       	sbrs	r16, 1
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <vfprintf+0x5fc>
    20f4:	8b e2       	ldi	r24, 0x2B	; 43
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <vfprintf+0x5fe>
    20f8:	80 e2       	ldi	r24, 0x20	; 32
    20fa:	07 fd       	sbrc	r16, 7
    20fc:	8d e2       	ldi	r24, 0x2D	; 45
    20fe:	b7 01       	movw	r22, r14
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	e6 d5       	rcall	.+3020   	; 0x2cd0 <fputc>
    2104:	c1 16       	cp	r12, r17
    2106:	30 f4       	brcc	.+12     	; 0x2114 <vfprintf+0x618>
    2108:	b7 01       	movw	r22, r14
    210a:	80 e3       	ldi	r24, 0x30	; 48
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	e0 d5       	rcall	.+3008   	; 0x2cd0 <fputc>
    2110:	11 50       	subi	r17, 0x01	; 1
    2112:	f8 cf       	rjmp	.-16     	; 0x2104 <vfprintf+0x608>
    2114:	ca 94       	dec	r12
    2116:	f3 01       	movw	r30, r6
    2118:	ec 0d       	add	r30, r12
    211a:	f1 1d       	adc	r31, r1
    211c:	80 81       	ld	r24, Z
    211e:	b7 01       	movw	r22, r14
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	d6 d5       	rcall	.+2988   	; 0x2cd0 <fputc>
    2124:	c1 10       	cpse	r12, r1
    2126:	f6 cf       	rjmp	.-20     	; 0x2114 <vfprintf+0x618>
    2128:	15 c0       	rjmp	.+42     	; 0x2154 <vfprintf+0x658>
    212a:	f4 e0       	ldi	r31, 0x04	; 4
    212c:	f5 15       	cp	r31, r5
    212e:	50 f5       	brcc	.+84     	; 0x2184 <vfprintf+0x688>
    2130:	84 e0       	ldi	r24, 0x04	; 4
    2132:	58 1a       	sub	r5, r24
    2134:	93 fe       	sbrs	r9, 3
    2136:	1e c0       	rjmp	.+60     	; 0x2174 <vfprintf+0x678>
    2138:	01 11       	cpse	r16, r1
    213a:	25 c0       	rjmp	.+74     	; 0x2186 <vfprintf+0x68a>
    213c:	2c 85       	ldd	r18, Y+12	; 0x0c
    213e:	23 ff       	sbrs	r18, 3
    2140:	27 c0       	rjmp	.+78     	; 0x2190 <vfprintf+0x694>
    2142:	0c ea       	ldi	r16, 0xAC	; 172
    2144:	10 e0       	ldi	r17, 0x00	; 0
    2146:	39 2d       	mov	r19, r9
    2148:	30 71       	andi	r19, 0x10	; 16
    214a:	93 2e       	mov	r9, r19
    214c:	f8 01       	movw	r30, r16
    214e:	84 91       	lpm	r24, Z
    2150:	81 11       	cpse	r24, r1
    2152:	21 c0       	rjmp	.+66     	; 0x2196 <vfprintf+0x69a>
    2154:	55 20       	and	r5, r5
    2156:	09 f4       	brne	.+2      	; 0x215a <vfprintf+0x65e>
    2158:	fc cc       	rjmp	.-1544   	; 0x1b52 <vfprintf+0x56>
    215a:	b7 01       	movw	r22, r14
    215c:	80 e2       	ldi	r24, 0x20	; 32
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	b7 d5       	rcall	.+2926   	; 0x2cd0 <fputc>
    2162:	5a 94       	dec	r5
    2164:	f7 cf       	rjmp	.-18     	; 0x2154 <vfprintf+0x658>
    2166:	f7 01       	movw	r30, r14
    2168:	86 81       	ldd	r24, Z+6	; 0x06
    216a:	97 81       	ldd	r25, Z+7	; 0x07
    216c:	23 c0       	rjmp	.+70     	; 0x21b4 <vfprintf+0x6b8>
    216e:	8f ef       	ldi	r24, 0xFF	; 255
    2170:	9f ef       	ldi	r25, 0xFF	; 255
    2172:	20 c0       	rjmp	.+64     	; 0x21b4 <vfprintf+0x6b8>
    2174:	b7 01       	movw	r22, r14
    2176:	80 e2       	ldi	r24, 0x20	; 32
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	aa d5       	rcall	.+2900   	; 0x2cd0 <fputc>
    217c:	5a 94       	dec	r5
    217e:	51 10       	cpse	r5, r1
    2180:	f9 cf       	rjmp	.-14     	; 0x2174 <vfprintf+0x678>
    2182:	da cf       	rjmp	.-76     	; 0x2138 <vfprintf+0x63c>
    2184:	51 2c       	mov	r5, r1
    2186:	b7 01       	movw	r22, r14
    2188:	80 2f       	mov	r24, r16
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a1 d5       	rcall	.+2882   	; 0x2cd0 <fputc>
    218e:	d6 cf       	rjmp	.-84     	; 0x213c <vfprintf+0x640>
    2190:	00 eb       	ldi	r16, 0xB0	; 176
    2192:	10 e0       	ldi	r17, 0x00	; 0
    2194:	d8 cf       	rjmp	.-80     	; 0x2146 <vfprintf+0x64a>
    2196:	91 10       	cpse	r9, r1
    2198:	80 52       	subi	r24, 0x20	; 32
    219a:	b7 01       	movw	r22, r14
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	98 d5       	rcall	.+2864   	; 0x2cd0 <fputc>
    21a0:	0f 5f       	subi	r16, 0xFF	; 255
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	d3 cf       	rjmp	.-90     	; 0x214c <vfprintf+0x650>
    21a6:	23 e0       	ldi	r18, 0x03	; 3
    21a8:	25 15       	cp	r18, r5
    21aa:	10 f4       	brcc	.+4      	; 0x21b0 <vfprintf+0x6b4>
    21ac:	83 e0       	ldi	r24, 0x03	; 3
    21ae:	c1 cf       	rjmp	.-126    	; 0x2132 <vfprintf+0x636>
    21b0:	51 2c       	mov	r5, r1
    21b2:	c4 cf       	rjmp	.-120    	; 0x213c <vfprintf+0x640>
    21b4:	60 96       	adiw	r28, 0x10	; 16
    21b6:	e2 e1       	ldi	r30, 0x12	; 18
    21b8:	1b c4       	rjmp	.+2102   	; 0x29f0 <__epilogue_restores__>

000021ba <putval>:
    21ba:	20 fd       	sbrc	r18, 0
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <putval+0x16>
    21be:	fc 01       	movw	r30, r24
    21c0:	23 fd       	sbrc	r18, 3
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <putval+0x14>
    21c4:	22 ff       	sbrs	r18, 2
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <putval+0x12>
    21c8:	73 83       	std	Z+3, r23	; 0x03
    21ca:	62 83       	std	Z+2, r22	; 0x02
    21cc:	51 83       	std	Z+1, r21	; 0x01
    21ce:	40 83       	st	Z, r20
    21d0:	08 95       	ret

000021d2 <mulacc>:
    21d2:	44 fd       	sbrc	r20, 4
    21d4:	17 c0       	rjmp	.+46     	; 0x2204 <mulacc+0x32>
    21d6:	46 fd       	sbrc	r20, 6
    21d8:	17 c0       	rjmp	.+46     	; 0x2208 <mulacc+0x36>
    21da:	ab 01       	movw	r20, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	da 01       	movw	r26, r20
    21e0:	fb 01       	movw	r30, r22
    21e2:	aa 0f       	add	r26, r26
    21e4:	bb 1f       	adc	r27, r27
    21e6:	ee 1f       	adc	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	10 94       	com	r1
    21ec:	d1 f7       	brne	.-12     	; 0x21e2 <mulacc+0x10>
    21ee:	4a 0f       	add	r20, r26
    21f0:	5b 1f       	adc	r21, r27
    21f2:	6e 1f       	adc	r22, r30
    21f4:	7f 1f       	adc	r23, r31
    21f6:	cb 01       	movw	r24, r22
    21f8:	ba 01       	movw	r22, r20
    21fa:	66 0f       	add	r22, r22
    21fc:	77 1f       	adc	r23, r23
    21fe:	88 1f       	adc	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	09 c0       	rjmp	.+18     	; 0x2216 <mulacc+0x44>
    2204:	33 e0       	ldi	r19, 0x03	; 3
    2206:	01 c0       	rjmp	.+2      	; 0x220a <mulacc+0x38>
    2208:	34 e0       	ldi	r19, 0x04	; 4
    220a:	66 0f       	add	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	31 50       	subi	r19, 0x01	; 1
    2214:	d1 f7       	brne	.-12     	; 0x220a <mulacc+0x38>
    2216:	62 0f       	add	r22, r18
    2218:	71 1d       	adc	r23, r1
    221a:	81 1d       	adc	r24, r1
    221c:	91 1d       	adc	r25, r1
    221e:	08 95       	ret

00002220 <skip_spaces>:
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	8c 01       	movw	r16, r24
    222a:	c8 01       	movw	r24, r16
    222c:	13 d5       	rcall	.+2598   	; 0x2c54 <fgetc>
    222e:	ec 01       	movw	r28, r24
    2230:	97 fd       	sbrc	r25, 7
    2232:	06 c0       	rjmp	.+12     	; 0x2240 <skip_spaces+0x20>
    2234:	d0 d4       	rcall	.+2464   	; 0x2bd6 <isspace>
    2236:	89 2b       	or	r24, r25
    2238:	c1 f7       	brne	.-16     	; 0x222a <skip_spaces+0xa>
    223a:	b8 01       	movw	r22, r16
    223c:	ce 01       	movw	r24, r28
    223e:	ba d5       	rcall	.+2932   	; 0x2db4 <ungetc>
    2240:	ce 01       	movw	r24, r28
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <conv_int>:
    224c:	a0 e0       	ldi	r26, 0x00	; 0
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	eb e2       	ldi	r30, 0x2B	; 43
    2252:	f1 e1       	ldi	r31, 0x11	; 17
    2254:	b7 c3       	rjmp	.+1902   	; 0x29c4 <__prologue_saves__+0xc>
    2256:	7c 01       	movw	r14, r24
    2258:	8b 01       	movw	r16, r22
    225a:	6a 01       	movw	r12, r20
    225c:	d2 2f       	mov	r29, r18
    225e:	fa d4       	rcall	.+2548   	; 0x2c54 <fgetc>
    2260:	9c 01       	movw	r18, r24
    2262:	33 27       	eor	r19, r19
    2264:	2b 32       	cpi	r18, 0x2B	; 43
    2266:	31 05       	cpc	r19, r1
    2268:	21 f0       	breq	.+8      	; 0x2272 <conv_int+0x26>
    226a:	2d 32       	cpi	r18, 0x2D	; 45
    226c:	31 05       	cpc	r19, r1
    226e:	51 f4       	brne	.+20     	; 0x2284 <conv_int+0x38>
    2270:	d0 68       	ori	r29, 0x80	; 128
    2272:	01 50       	subi	r16, 0x01	; 1
    2274:	11 09       	sbc	r17, r1
    2276:	11 f4       	brne	.+4      	; 0x227c <conv_int+0x30>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	64 c0       	rjmp	.+200    	; 0x2344 <conv_int+0xf8>
    227c:	c7 01       	movw	r24, r14
    227e:	ea d4       	rcall	.+2516   	; 0x2c54 <fgetc>
    2280:	97 fd       	sbrc	r25, 7
    2282:	fa cf       	rjmp	.-12     	; 0x2278 <conv_int+0x2c>
    2284:	cd 2f       	mov	r28, r29
    2286:	cd 7f       	andi	r28, 0xFD	; 253
    2288:	2d 2f       	mov	r18, r29
    228a:	20 73       	andi	r18, 0x30	; 48
    228c:	09 f5       	brne	.+66     	; 0x22d0 <conv_int+0x84>
    228e:	80 33       	cpi	r24, 0x30	; 48
    2290:	f9 f4       	brne	.+62     	; 0x22d0 <conv_int+0x84>
    2292:	58 01       	movw	r10, r16
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	a8 1a       	sub	r10, r24
    2298:	b1 08       	sbc	r11, r1
    229a:	09 f4       	brne	.+2      	; 0x229e <conv_int+0x52>
    229c:	40 c0       	rjmp	.+128    	; 0x231e <conv_int+0xd2>
    229e:	c7 01       	movw	r24, r14
    22a0:	d9 d4       	rcall	.+2482   	; 0x2c54 <fgetc>
    22a2:	97 fd       	sbrc	r25, 7
    22a4:	3c c0       	rjmp	.+120    	; 0x231e <conv_int+0xd2>
    22a6:	9c 01       	movw	r18, r24
    22a8:	2f 7d       	andi	r18, 0xDF	; 223
    22aa:	33 27       	eor	r19, r19
    22ac:	28 35       	cpi	r18, 0x58	; 88
    22ae:	31 05       	cpc	r19, r1
    22b0:	49 f4       	brne	.+18     	; 0x22c4 <conv_int+0x78>
    22b2:	c2 64       	ori	r28, 0x42	; 66
    22b4:	02 50       	subi	r16, 0x02	; 2
    22b6:	11 09       	sbc	r17, r1
    22b8:	91 f1       	breq	.+100    	; 0x231e <conv_int+0xd2>
    22ba:	c7 01       	movw	r24, r14
    22bc:	cb d4       	rcall	.+2454   	; 0x2c54 <fgetc>
    22be:	97 ff       	sbrs	r25, 7
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <conv_int+0x84>
    22c2:	2d c0       	rjmp	.+90     	; 0x231e <conv_int+0xd2>
    22c4:	d6 ff       	sbrs	r29, 6
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <conv_int+0x80>
    22c8:	c2 60       	ori	r28, 0x02	; 2
    22ca:	01 c0       	rjmp	.+2      	; 0x22ce <conv_int+0x82>
    22cc:	c2 61       	ori	r28, 0x12	; 18
    22ce:	85 01       	movw	r16, r10
    22d0:	81 2c       	mov	r8, r1
    22d2:	91 2c       	mov	r9, r1
    22d4:	54 01       	movw	r10, r8
    22d6:	20 ed       	ldi	r18, 0xD0	; 208
    22d8:	28 0f       	add	r18, r24
    22da:	28 30       	cpi	r18, 0x08	; 8
    22dc:	78 f0       	brcs	.+30     	; 0x22fc <conv_int+0xb0>
    22de:	c4 ff       	sbrs	r28, 4
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <conv_int+0x9c>
    22e2:	b7 01       	movw	r22, r14
    22e4:	67 d5       	rcall	.+2766   	; 0x2db4 <ungetc>
    22e6:	18 c0       	rjmp	.+48     	; 0x2318 <conv_int+0xcc>
    22e8:	2a 30       	cpi	r18, 0x0A	; 10
    22ea:	40 f0       	brcs	.+16     	; 0x22fc <conv_int+0xb0>
    22ec:	c6 ff       	sbrs	r28, 6
    22ee:	f9 cf       	rjmp	.-14     	; 0x22e2 <conv_int+0x96>
    22f0:	2f 7d       	andi	r18, 0xDF	; 223
    22f2:	3f ee       	ldi	r19, 0xEF	; 239
    22f4:	32 0f       	add	r19, r18
    22f6:	36 30       	cpi	r19, 0x06	; 6
    22f8:	a0 f7       	brcc	.-24     	; 0x22e2 <conv_int+0x96>
    22fa:	27 50       	subi	r18, 0x07	; 7
    22fc:	4c 2f       	mov	r20, r28
    22fe:	c5 01       	movw	r24, r10
    2300:	b4 01       	movw	r22, r8
    2302:	67 df       	rcall	.-306    	; 0x21d2 <mulacc>
    2304:	4b 01       	movw	r8, r22
    2306:	5c 01       	movw	r10, r24
    2308:	c2 60       	ori	r28, 0x02	; 2
    230a:	01 50       	subi	r16, 0x01	; 1
    230c:	11 09       	sbc	r17, r1
    230e:	51 f0       	breq	.+20     	; 0x2324 <conv_int+0xd8>
    2310:	c7 01       	movw	r24, r14
    2312:	a0 d4       	rcall	.+2368   	; 0x2c54 <fgetc>
    2314:	97 ff       	sbrs	r25, 7
    2316:	df cf       	rjmp	.-66     	; 0x22d6 <conv_int+0x8a>
    2318:	c1 fd       	sbrc	r28, 1
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <conv_int+0xd8>
    231c:	ad cf       	rjmp	.-166    	; 0x2278 <conv_int+0x2c>
    231e:	81 2c       	mov	r8, r1
    2320:	91 2c       	mov	r9, r1
    2322:	54 01       	movw	r10, r8
    2324:	c7 ff       	sbrs	r28, 7
    2326:	08 c0       	rjmp	.+16     	; 0x2338 <conv_int+0xec>
    2328:	b0 94       	com	r11
    232a:	a0 94       	com	r10
    232c:	90 94       	com	r9
    232e:	80 94       	com	r8
    2330:	81 1c       	adc	r8, r1
    2332:	91 1c       	adc	r9, r1
    2334:	a1 1c       	adc	r10, r1
    2336:	b1 1c       	adc	r11, r1
    2338:	2c 2f       	mov	r18, r28
    233a:	b5 01       	movw	r22, r10
    233c:	a4 01       	movw	r20, r8
    233e:	c6 01       	movw	r24, r12
    2340:	3c df       	rcall	.-392    	; 0x21ba <putval>
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	ec e0       	ldi	r30, 0x0C	; 12
    234a:	58 c3       	rjmp	.+1712   	; 0x29fc <__epilogue_restores__+0xc>

0000234c <conv_brk>:
    234c:	a0 e2       	ldi	r26, 0x20	; 32
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	eb ea       	ldi	r30, 0xAB	; 171
    2352:	f1 e1       	ldi	r31, 0x11	; 17
    2354:	33 c3       	rjmp	.+1638   	; 0x29bc <__prologue_saves__+0x4>
    2356:	5c 01       	movw	r10, r24
    2358:	4b 01       	movw	r8, r22
    235a:	7a 01       	movw	r14, r20
    235c:	8e 01       	movw	r16, r28
    235e:	0f 5f       	subi	r16, 0xFF	; 255
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	68 01       	movw	r12, r16
    2364:	80 e2       	ldi	r24, 0x20	; 32
    2366:	f8 01       	movw	r30, r16
    2368:	11 92       	st	Z+, r1
    236a:	8a 95       	dec	r24
    236c:	e9 f7       	brne	.-6      	; 0x2368 <conv_brk+0x1c>
    236e:	f5 01       	movw	r30, r10
    2370:	53 80       	ldd	r5, Z+3	; 0x03
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	61 2c       	mov	r6, r1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	71 2c       	mov	r7, r1
    237c:	a1 e0       	ldi	r26, 0x01	; 1
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	f9 01       	movw	r30, r18
    2382:	53 fc       	sbrc	r5, 3
    2384:	85 91       	lpm	r24, Z+
    2386:	53 fe       	sbrs	r5, 3
    2388:	81 91       	ld	r24, Z+
    238a:	8f 01       	movw	r16, r30
    238c:	48 2e       	mov	r4, r24
    238e:	9f 01       	movw	r18, r30
    2390:	81 11       	cpse	r24, r1
    2392:	03 c0       	rjmp	.+6      	; 0x239a <conv_brk+0x4e>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	94 c0       	rjmp	.+296    	; 0x24c2 <conv_brk+0x176>
    239a:	8e 35       	cpi	r24, 0x5E	; 94
    239c:	19 f4       	brne	.+6      	; 0x23a4 <conv_brk+0x58>
    239e:	41 15       	cp	r20, r1
    23a0:	51 05       	cpc	r21, r1
    23a2:	51 f1       	breq	.+84     	; 0x23f8 <conv_brk+0xac>
    23a4:	67 2d       	mov	r22, r7
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	64 17       	cp	r22, r20
    23aa:	75 07       	cpc	r23, r21
    23ac:	3c f4       	brge	.+14     	; 0x23bc <conv_brk+0x70>
    23ae:	8d 35       	cpi	r24, 0x5D	; 93
    23b0:	61 f1       	breq	.+88     	; 0x240a <conv_brk+0xbe>
    23b2:	8d 32       	cpi	r24, 0x2D	; 45
    23b4:	19 f4       	brne	.+6      	; 0x23bc <conv_brk+0x70>
    23b6:	99 23       	and	r25, r25
    23b8:	11 f1       	breq	.+68     	; 0x23fe <conv_brk+0xb2>
    23ba:	03 c0       	rjmp	.+6      	; 0x23c2 <conv_brk+0x76>
    23bc:	99 23       	and	r25, r25
    23be:	09 f4       	brne	.+2      	; 0x23c2 <conv_brk+0x76>
    23c0:	6b c0       	rjmp	.+214    	; 0x2498 <conv_brk+0x14c>
    23c2:	84 2d       	mov	r24, r4
    23c4:	86 95       	lsr	r24
    23c6:	86 95       	lsr	r24
    23c8:	86 95       	lsr	r24
    23ca:	f6 01       	movw	r30, r12
    23cc:	e8 0f       	add	r30, r24
    23ce:	f1 1d       	adc	r31, r1
    23d0:	84 2d       	mov	r24, r4
    23d2:	87 70       	andi	r24, 0x07	; 7
    23d4:	8d 01       	movw	r16, r26
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <conv_brk+0x90>
    23d8:	00 0f       	add	r16, r16
    23da:	11 1f       	adc	r17, r17
    23dc:	8a 95       	dec	r24
    23de:	e2 f7       	brpl	.-8      	; 0x23d8 <conv_brk+0x8c>
    23e0:	c8 01       	movw	r24, r16
    23e2:	90 81       	ld	r25, Z
    23e4:	89 2b       	or	r24, r25
    23e6:	80 83       	st	Z, r24
    23e8:	64 14       	cp	r6, r4
    23ea:	59 f0       	breq	.+22     	; 0x2402 <conv_brk+0xb6>
    23ec:	46 14       	cp	r4, r6
    23ee:	10 f4       	brcc	.+4      	; 0x23f4 <conv_brk+0xa8>
    23f0:	43 94       	inc	r4
    23f2:	e7 cf       	rjmp	.-50     	; 0x23c2 <conv_brk+0x76>
    23f4:	4a 94       	dec	r4
    23f6:	e5 cf       	rjmp	.-54     	; 0x23c2 <conv_brk+0x76>
    23f8:	77 24       	eor	r7, r7
    23fa:	73 94       	inc	r7
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <conv_brk+0xb8>
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	01 c0       	rjmp	.+2      	; 0x2404 <conv_brk+0xb8>
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	4f 5f       	subi	r20, 0xFF	; 255
    2406:	5f 4f       	sbci	r21, 0xFF	; 255
    2408:	bb cf       	rjmp	.-138    	; 0x2380 <conv_brk+0x34>
    240a:	99 23       	and	r25, r25
    240c:	19 f0       	breq	.+6      	; 0x2414 <conv_brk+0xc8>
    240e:	8e 81       	ldd	r24, Y+6	; 0x06
    2410:	80 62       	ori	r24, 0x20	; 32
    2412:	8e 83       	std	Y+6, r24	; 0x06
    2414:	71 10       	cpse	r7, r1
    2416:	03 c0       	rjmp	.+6      	; 0x241e <conv_brk+0xd2>
    2418:	77 24       	eor	r7, r7
    241a:	73 94       	inc	r7
    241c:	19 c0       	rjmp	.+50     	; 0x2450 <conv_brk+0x104>
    241e:	f6 01       	movw	r30, r12
    2420:	9e 01       	movw	r18, r28
    2422:	2f 5d       	subi	r18, 0xDF	; 223
    2424:	3f 4f       	sbci	r19, 0xFF	; 255
    2426:	80 81       	ld	r24, Z
    2428:	80 95       	com	r24
    242a:	81 93       	st	Z+, r24
    242c:	2e 17       	cp	r18, r30
    242e:	3f 07       	cpc	r19, r31
    2430:	d1 f7       	brne	.-12     	; 0x2426 <conv_brk+0xda>
    2432:	f2 cf       	rjmp	.-28     	; 0x2418 <conv_brk+0xcc>
    2434:	e1 14       	cp	r14, r1
    2436:	f1 04       	cpc	r15, r1
    2438:	31 f0       	breq	.+12     	; 0x2446 <conv_brk+0xfa>
    243a:	f7 01       	movw	r30, r14
    243c:	80 83       	st	Z, r24
    243e:	b7 01       	movw	r22, r14
    2440:	6f 5f       	subi	r22, 0xFF	; 255
    2442:	7f 4f       	sbci	r23, 0xFF	; 255
    2444:	7b 01       	movw	r14, r22
    2446:	71 e0       	ldi	r23, 0x01	; 1
    2448:	87 1a       	sub	r8, r23
    244a:	91 08       	sbc	r9, r1
    244c:	71 2c       	mov	r7, r1
    244e:	e9 f0       	breq	.+58     	; 0x248a <conv_brk+0x13e>
    2450:	c5 01       	movw	r24, r10
    2452:	00 d4       	rcall	.+2048   	; 0x2c54 <fgetc>
    2454:	97 fd       	sbrc	r25, 7
    2456:	17 c0       	rjmp	.+46     	; 0x2486 <conv_brk+0x13a>
    2458:	fc 01       	movw	r30, r24
    245a:	ff 27       	eor	r31, r31
    245c:	23 e0       	ldi	r18, 0x03	; 3
    245e:	f5 95       	asr	r31
    2460:	e7 95       	ror	r30
    2462:	2a 95       	dec	r18
    2464:	e1 f7       	brne	.-8      	; 0x245e <conv_brk+0x112>
    2466:	ec 0d       	add	r30, r12
    2468:	fd 1d       	adc	r31, r13
    246a:	20 81       	ld	r18, Z
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	ac 01       	movw	r20, r24
    2470:	47 70       	andi	r20, 0x07	; 7
    2472:	55 27       	eor	r21, r21
    2474:	02 c0       	rjmp	.+4      	; 0x247a <conv_brk+0x12e>
    2476:	35 95       	asr	r19
    2478:	27 95       	ror	r18
    247a:	4a 95       	dec	r20
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <conv_brk+0x12a>
    247e:	20 fd       	sbrc	r18, 0
    2480:	d9 cf       	rjmp	.-78     	; 0x2434 <conv_brk+0xe8>
    2482:	b5 01       	movw	r22, r10
    2484:	97 d4       	rcall	.+2350   	; 0x2db4 <ungetc>
    2486:	71 10       	cpse	r7, r1
    2488:	85 cf       	rjmp	.-246    	; 0x2394 <conv_brk+0x48>
    248a:	e1 14       	cp	r14, r1
    248c:	f1 04       	cpc	r15, r1
    248e:	11 f0       	breq	.+4      	; 0x2494 <conv_brk+0x148>
    2490:	f7 01       	movw	r30, r14
    2492:	10 82       	st	Z, r1
    2494:	c8 01       	movw	r24, r16
    2496:	15 c0       	rjmp	.+42     	; 0x24c2 <conv_brk+0x176>
    2498:	68 2f       	mov	r22, r24
    249a:	66 95       	lsr	r22
    249c:	66 95       	lsr	r22
    249e:	66 95       	lsr	r22
    24a0:	f6 01       	movw	r30, r12
    24a2:	e6 0f       	add	r30, r22
    24a4:	f1 1d       	adc	r31, r1
    24a6:	68 2f       	mov	r22, r24
    24a8:	67 70       	andi	r22, 0x07	; 7
    24aa:	8d 01       	movw	r16, r26
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <conv_brk+0x166>
    24ae:	00 0f       	add	r16, r16
    24b0:	11 1f       	adc	r17, r17
    24b2:	6a 95       	dec	r22
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <conv_brk+0x162>
    24b6:	b8 01       	movw	r22, r16
    24b8:	70 81       	ld	r23, Z
    24ba:	67 2b       	or	r22, r23
    24bc:	60 83       	st	Z, r22
    24be:	68 2e       	mov	r6, r24
    24c0:	a1 cf       	rjmp	.-190    	; 0x2404 <conv_brk+0xb8>
    24c2:	a0 96       	adiw	r28, 0x20	; 32
    24c4:	e0 e1       	ldi	r30, 0x10	; 16
    24c6:	96 c2       	rjmp	.+1324   	; 0x29f4 <__epilogue_restores__+0x4>

000024c8 <conv_flt>:
    24c8:	2f 92       	push	r2
    24ca:	3f 92       	push	r3
    24cc:	4f 92       	push	r4
    24ce:	5f 92       	push	r5
    24d0:	6f 92       	push	r6
    24d2:	7f 92       	push	r7
    24d4:	9f 92       	push	r9
    24d6:	af 92       	push	r10
    24d8:	bf 92       	push	r11
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	6c 01       	movw	r12, r24
    24ec:	8b 01       	movw	r16, r22
    24ee:	1a 01       	movw	r2, r20
    24f0:	b1 d3       	rcall	.+1890   	; 0x2c54 <fgetc>
    24f2:	ec 01       	movw	r28, r24
    24f4:	99 27       	eor	r25, r25
    24f6:	8b 32       	cpi	r24, 0x2B	; 43
    24f8:	91 05       	cpc	r25, r1
    24fa:	29 f0       	breq	.+10     	; 0x2506 <conv_flt+0x3e>
    24fc:	8d 97       	sbiw	r24, 0x2d	; 45
    24fe:	79 f4       	brne	.+30     	; 0x251e <conv_flt+0x56>
    2500:	30 e8       	ldi	r19, 0x80	; 128
    2502:	93 2e       	mov	r9, r19
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <conv_flt+0x40>
    2506:	91 2c       	mov	r9, r1
    2508:	01 50       	subi	r16, 0x01	; 1
    250a:	11 09       	sbc	r17, r1
    250c:	11 f4       	brne	.+4      	; 0x2512 <conv_flt+0x4a>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	fe c0       	rjmp	.+508    	; 0x270e <conv_flt+0x246>
    2512:	c6 01       	movw	r24, r12
    2514:	9f d3       	rcall	.+1854   	; 0x2c54 <fgetc>
    2516:	ec 01       	movw	r28, r24
    2518:	97 ff       	sbrs	r25, 7
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <conv_flt+0x58>
    251c:	f8 cf       	rjmp	.-16     	; 0x250e <conv_flt+0x46>
    251e:	91 2c       	mov	r9, r1
    2520:	ce 01       	movw	r24, r28
    2522:	61 d3       	rcall	.+1730   	; 0x2be6 <tolower>
    2524:	89 36       	cpi	r24, 0x69	; 105
    2526:	91 05       	cpc	r25, r1
    2528:	31 f0       	breq	.+12     	; 0x2536 <conv_flt+0x6e>
    252a:	8e 36       	cpi	r24, 0x6E	; 110
    252c:	91 05       	cpc	r25, r1
    252e:	81 f5       	brne	.+96     	; 0x2590 <conv_flt+0xc8>
    2530:	c8 e6       	ldi	r28, 0x68	; 104
    2532:	d2 e0       	ldi	r29, 0x02	; 2
    2534:	02 c0       	rjmp	.+4      	; 0x253a <conv_flt+0x72>
    2536:	cb e6       	ldi	r28, 0x6B	; 107
    2538:	d2 e0       	ldi	r29, 0x02	; 2
    253a:	21 96       	adiw	r28, 0x01	; 1
    253c:	fe 01       	movw	r30, r28
    253e:	31 97       	sbiw	r30, 0x01	; 1
    2540:	b4 90       	lpm	r11, Z
    2542:	bb 20       	and	r11, r11
    2544:	b1 f0       	breq	.+44     	; 0x2572 <conv_flt+0xaa>
    2546:	01 50       	subi	r16, 0x01	; 1
    2548:	11 09       	sbc	r17, r1
    254a:	79 f0       	breq	.+30     	; 0x256a <conv_flt+0xa2>
    254c:	c6 01       	movw	r24, r12
    254e:	82 d3       	rcall	.+1796   	; 0x2c54 <fgetc>
    2550:	7c 01       	movw	r14, r24
    2552:	97 fd       	sbrc	r25, 7
    2554:	0a c0       	rjmp	.+20     	; 0x256a <conv_flt+0xa2>
    2556:	47 d3       	rcall	.+1678   	; 0x2be6 <tolower>
    2558:	99 27       	eor	r25, r25
    255a:	eb 2d       	mov	r30, r11
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	8e 17       	cp	r24, r30
    2560:	9f 07       	cpc	r25, r31
    2562:	59 f3       	breq	.-42     	; 0x253a <conv_flt+0x72>
    2564:	b6 01       	movw	r22, r12
    2566:	c7 01       	movw	r24, r14
    2568:	25 d4       	rcall	.+2122   	; 0x2db4 <ungetc>
    256a:	ce 56       	subi	r28, 0x6E	; 110
    256c:	d2 40       	sbci	r29, 0x02	; 2
    256e:	79 f6       	brne	.-98     	; 0x250e <conv_flt+0x46>
    2570:	03 c0       	rjmp	.+6      	; 0x2578 <conv_flt+0xb0>
    2572:	cb 56       	subi	r28, 0x6B	; 107
    2574:	d2 40       	sbci	r29, 0x02	; 2
    2576:	29 f0       	breq	.+10     	; 0x2582 <conv_flt+0xba>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	a0 e8       	ldi	r26, 0x80	; 128
    257e:	bf e7       	ldi	r27, 0x7F	; 127
    2580:	04 c0       	rjmp	.+8      	; 0x258a <conv_flt+0xc2>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a0 ec       	ldi	r26, 0xC0	; 192
    2588:	bf e7       	ldi	r27, 0x7F	; 127
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	af c0       	rjmp	.+350    	; 0x26ee <conv_flt+0x226>
    2590:	41 2c       	mov	r4, r1
    2592:	51 2c       	mov	r5, r1
    2594:	32 01       	movw	r6, r4
    2596:	e1 2c       	mov	r14, r1
    2598:	f1 2c       	mov	r15, r1
    259a:	2c 2f       	mov	r18, r28
    259c:	20 53       	subi	r18, 0x30	; 48
    259e:	2a 30       	cpi	r18, 0x0A	; 10
    25a0:	08 f5       	brcc	.+66     	; 0x25e4 <conv_flt+0x11c>
    25a2:	e9 2d       	mov	r30, r9
    25a4:	e2 60       	ori	r30, 0x02	; 2
    25a6:	be 2e       	mov	r11, r30
    25a8:	89 2d       	mov	r24, r9
    25aa:	88 70       	andi	r24, 0x08	; 8
    25ac:	92 fe       	sbrs	r9, 2
    25ae:	06 c0       	rjmp	.+12     	; 0x25bc <conv_flt+0xf4>
    25b0:	81 11       	cpse	r24, r1
    25b2:	1f c0       	rjmp	.+62     	; 0x25f2 <conv_flt+0x12a>
    25b4:	ff ef       	ldi	r31, 0xFF	; 255
    25b6:	ef 1a       	sub	r14, r31
    25b8:	ff 0a       	sbc	r15, r31
    25ba:	1b c0       	rjmp	.+54     	; 0x25f2 <conv_flt+0x12a>
    25bc:	88 23       	and	r24, r24
    25be:	19 f0       	breq	.+6      	; 0x25c6 <conv_flt+0xfe>
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	e8 1a       	sub	r14, r24
    25c4:	f1 08       	sbc	r15, r1
    25c6:	40 e2       	ldi	r20, 0x20	; 32
    25c8:	c3 01       	movw	r24, r6
    25ca:	b2 01       	movw	r22, r4
    25cc:	02 de       	rcall	.-1020   	; 0x21d2 <mulacc>
    25ce:	2b 01       	movw	r4, r22
    25d0:	3c 01       	movw	r6, r24
    25d2:	68 39       	cpi	r22, 0x98	; 152
    25d4:	79 49       	sbci	r23, 0x99	; 153
    25d6:	89 49       	sbci	r24, 0x99	; 153
    25d8:	99 41       	sbci	r25, 0x19	; 25
    25da:	58 f0       	brcs	.+22     	; 0x25f2 <conv_flt+0x12a>
    25dc:	f9 2d       	mov	r31, r9
    25de:	f6 60       	ori	r31, 0x06	; 6
    25e0:	bf 2e       	mov	r11, r31
    25e2:	07 c0       	rjmp	.+14     	; 0x25f2 <conv_flt+0x12a>
    25e4:	2e 3f       	cpi	r18, 0xFE	; 254
    25e6:	81 f4       	brne	.+32     	; 0x2608 <conv_flt+0x140>
    25e8:	93 fc       	sbrc	r9, 3
    25ea:	0e c0       	rjmp	.+28     	; 0x2608 <conv_flt+0x140>
    25ec:	29 2d       	mov	r18, r9
    25ee:	28 60       	ori	r18, 0x08	; 8
    25f0:	b2 2e       	mov	r11, r18
    25f2:	01 50       	subi	r16, 0x01	; 1
    25f4:	11 09       	sbc	r17, r1
    25f6:	39 f0       	breq	.+14     	; 0x2606 <conv_flt+0x13e>
    25f8:	c6 01       	movw	r24, r12
    25fa:	2c d3       	rcall	.+1624   	; 0x2c54 <fgetc>
    25fc:	ec 01       	movw	r28, r24
    25fe:	9b 2c       	mov	r9, r11
    2600:	97 ff       	sbrs	r25, 7
    2602:	cb cf       	rjmp	.-106    	; 0x259a <conv_flt+0xd2>
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <conv_flt+0x140>
    2606:	9b 2c       	mov	r9, r11
    2608:	91 fe       	sbrs	r9, 1
    260a:	81 cf       	rjmp	.-254    	; 0x250e <conv_flt+0x46>
    260c:	ce 01       	movw	r24, r28
    260e:	8f 7d       	andi	r24, 0xDF	; 223
    2610:	99 27       	eor	r25, r25
    2612:	85 34       	cpi	r24, 0x45	; 69
    2614:	91 05       	cpc	r25, r1
    2616:	09 f0       	breq	.+2      	; 0x261a <conv_flt+0x152>
    2618:	3e c0       	rjmp	.+124    	; 0x2696 <conv_flt+0x1ce>
    261a:	58 01       	movw	r10, r16
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	a8 1a       	sub	r10, r24
    2620:	b1 08       	sbc	r11, r1
    2622:	09 f4       	brne	.+2      	; 0x2626 <conv_flt+0x15e>
    2624:	74 cf       	rjmp	.-280    	; 0x250e <conv_flt+0x46>
    2626:	c6 01       	movw	r24, r12
    2628:	15 d3       	rcall	.+1578   	; 0x2c54 <fgetc>
    262a:	ec 01       	movw	r28, r24
    262c:	97 fd       	sbrc	r25, 7
    262e:	6f cf       	rjmp	.-290    	; 0x250e <conv_flt+0x46>
    2630:	99 27       	eor	r25, r25
    2632:	8b 32       	cpi	r24, 0x2B	; 43
    2634:	91 05       	cpc	r25, r1
    2636:	29 f0       	breq	.+10     	; 0x2642 <conv_flt+0x17a>
    2638:	8d 97       	sbiw	r24, 0x2d	; 45
    263a:	61 f4       	brne	.+24     	; 0x2654 <conv_flt+0x18c>
    263c:	e9 2d       	mov	r30, r9
    263e:	e0 61       	ori	r30, 0x10	; 16
    2640:	9e 2e       	mov	r9, r30
    2642:	58 01       	movw	r10, r16
    2644:	f2 e0       	ldi	r31, 0x02	; 2
    2646:	af 1a       	sub	r10, r31
    2648:	b1 08       	sbc	r11, r1
    264a:	09 f4       	brne	.+2      	; 0x264e <conv_flt+0x186>
    264c:	60 cf       	rjmp	.-320    	; 0x250e <conv_flt+0x46>
    264e:	c6 01       	movw	r24, r12
    2650:	01 d3       	rcall	.+1538   	; 0x2c54 <fgetc>
    2652:	ec 01       	movw	r28, r24
    2654:	ce 01       	movw	r24, r28
    2656:	c0 97       	sbiw	r24, 0x30	; 48
    2658:	0a 97       	sbiw	r24, 0x0a	; 10
    265a:	08 f0       	brcs	.+2      	; 0x265e <conv_flt+0x196>
    265c:	58 cf       	rjmp	.-336    	; 0x250e <conv_flt+0x46>
    265e:	85 01       	movw	r16, r10
    2660:	a1 2c       	mov	r10, r1
    2662:	b1 2c       	mov	r11, r1
    2664:	b5 01       	movw	r22, r10
    2666:	bb 0c       	add	r11, r11
    2668:	88 0b       	sbc	r24, r24
    266a:	99 0b       	sbc	r25, r25
    266c:	2c 2f       	mov	r18, r28
    266e:	20 53       	subi	r18, 0x30	; 48
    2670:	40 e2       	ldi	r20, 0x20	; 32
    2672:	af dd       	rcall	.-1186   	; 0x21d2 <mulacc>
    2674:	5b 01       	movw	r10, r22
    2676:	01 50       	subi	r16, 0x01	; 1
    2678:	11 09       	sbc	r17, r1
    267a:	31 f0       	breq	.+12     	; 0x2688 <conv_flt+0x1c0>
    267c:	c6 01       	movw	r24, r12
    267e:	ea d2       	rcall	.+1492   	; 0x2c54 <fgetc>
    2680:	ec 01       	movw	r28, r24
    2682:	c0 97       	sbiw	r24, 0x30	; 48
    2684:	0a 97       	sbiw	r24, 0x0a	; 10
    2686:	70 f3       	brcs	.-36     	; 0x2664 <conv_flt+0x19c>
    2688:	94 fe       	sbrs	r9, 4
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <conv_flt+0x1ca>
    268c:	b1 94       	neg	r11
    268e:	a1 94       	neg	r10
    2690:	b1 08       	sbc	r11, r1
    2692:	ea 0c       	add	r14, r10
    2694:	fb 1c       	adc	r15, r11
    2696:	01 2b       	or	r16, r17
    2698:	29 f0       	breq	.+10     	; 0x26a4 <conv_flt+0x1dc>
    269a:	d7 fd       	sbrc	r29, 7
    269c:	03 c0       	rjmp	.+6      	; 0x26a4 <conv_flt+0x1dc>
    269e:	b6 01       	movw	r22, r12
    26a0:	ce 01       	movw	r24, r28
    26a2:	88 d3       	rcall	.+1808   	; 0x2db4 <ungetc>
    26a4:	c3 01       	movw	r24, r6
    26a6:	b2 01       	movw	r22, r4
    26a8:	10 d9       	rcall	.-3552   	; 0x18ca <__floatunsisf>
    26aa:	f7 fe       	sbrs	r15, 7
    26ac:	06 c0       	rjmp	.+12     	; 0x26ba <conv_flt+0x1f2>
    26ae:	f1 94       	neg	r15
    26b0:	e1 94       	neg	r14
    26b2:	f1 08       	sbc	r15, r1
    26b4:	c7 e8       	ldi	r28, 0x87	; 135
    26b6:	d2 e0       	ldi	r29, 0x02	; 2
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <conv_flt+0x1f6>
    26ba:	cf e9       	ldi	r28, 0x9F	; 159
    26bc:	d2 e0       	ldi	r29, 0x02	; 2
    26be:	6e 01       	movw	r12, r28
    26c0:	28 e1       	ldi	r18, 0x18	; 24
    26c2:	c2 1a       	sub	r12, r18
    26c4:	d1 08       	sbc	r13, r1
    26c6:	00 e2       	ldi	r16, 0x20	; 32
    26c8:	10 e0       	ldi	r17, 0x00	; 0
    26ca:	e0 16       	cp	r14, r16
    26cc:	f1 06       	cpc	r15, r17
    26ce:	48 f0       	brcs	.+18     	; 0x26e2 <conv_flt+0x21a>
    26d0:	fe 01       	movw	r30, r28
    26d2:	25 91       	lpm	r18, Z+
    26d4:	35 91       	lpm	r19, Z+
    26d6:	45 91       	lpm	r20, Z+
    26d8:	54 91       	lpm	r21, Z
    26da:	ad d9       	rcall	.-3238   	; 0x1a36 <__mulsf3>
    26dc:	e0 1a       	sub	r14, r16
    26de:	f1 0a       	sbc	r15, r17
    26e0:	f4 cf       	rjmp	.-24     	; 0x26ca <conv_flt+0x202>
    26e2:	24 97       	sbiw	r28, 0x04	; 4
    26e4:	16 95       	lsr	r17
    26e6:	07 95       	ror	r16
    26e8:	cc 16       	cp	r12, r28
    26ea:	dd 06       	cpc	r13, r29
    26ec:	71 f7       	brne	.-36     	; 0x26ca <conv_flt+0x202>
    26ee:	97 fe       	sbrs	r9, 7
    26f0:	05 c0       	rjmp	.+10     	; 0x26fc <conv_flt+0x234>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	b0 58       	subi	r27, 0x80	; 128
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	21 14       	cp	r2, r1
    26fe:	31 04       	cpc	r3, r1
    2700:	29 f0       	breq	.+10     	; 0x270c <conv_flt+0x244>
    2702:	f1 01       	movw	r30, r2
    2704:	60 83       	st	Z, r22
    2706:	71 83       	std	Z+1, r23	; 0x01
    2708:	82 83       	std	Z+2, r24	; 0x02
    270a:	93 83       	std	Z+3, r25	; 0x03
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
    271e:	bf 90       	pop	r11
    2720:	af 90       	pop	r10
    2722:	9f 90       	pop	r9
    2724:	7f 90       	pop	r7
    2726:	6f 90       	pop	r6
    2728:	5f 90       	pop	r5
    272a:	4f 90       	pop	r4
    272c:	3f 90       	pop	r3
    272e:	2f 90       	pop	r2
    2730:	08 95       	ret

00002732 <vfscanf>:
    2732:	a0 e0       	ldi	r26, 0x00	; 0
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	ee e9       	ldi	r30, 0x9E	; 158
    2738:	f3 e1       	ldi	r31, 0x13	; 19
    273a:	42 c1       	rjmp	.+644    	; 0x29c0 <__prologue_saves__+0x8>
    273c:	5c 01       	movw	r10, r24
    273e:	eb 01       	movw	r28, r22
    2740:	4a 01       	movw	r8, r20
    2742:	fc 01       	movw	r30, r24
    2744:	17 82       	std	Z+7, r1	; 0x07
    2746:	16 82       	std	Z+6, r1	; 0x06
    2748:	61 2c       	mov	r6, r1
    274a:	f5 01       	movw	r30, r10
    274c:	03 81       	ldd	r16, Z+3	; 0x03
    274e:	fe 01       	movw	r30, r28
    2750:	03 fd       	sbrc	r16, 3
    2752:	85 91       	lpm	r24, Z+
    2754:	03 ff       	sbrs	r16, 3
    2756:	81 91       	ld	r24, Z+
    2758:	18 2f       	mov	r17, r24
    275a:	ef 01       	movw	r28, r30
    275c:	88 23       	and	r24, r24
    275e:	09 f4       	brne	.+2      	; 0x2762 <vfscanf+0x30>
    2760:	00 c1       	rjmp	.+512    	; 0x2962 <vfscanf+0x230>
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	38 d2       	rcall	.+1136   	; 0x2bd6 <isspace>
    2766:	89 2b       	or	r24, r25
    2768:	19 f0       	breq	.+6      	; 0x2770 <vfscanf+0x3e>
    276a:	c5 01       	movw	r24, r10
    276c:	59 dd       	rcall	.-1358   	; 0x2220 <skip_spaces>
    276e:	ed cf       	rjmp	.-38     	; 0x274a <vfscanf+0x18>
    2770:	15 32       	cpi	r17, 0x25	; 37
    2772:	41 f4       	brne	.+16     	; 0x2784 <vfscanf+0x52>
    2774:	fe 01       	movw	r30, r28
    2776:	03 fd       	sbrc	r16, 3
    2778:	15 91       	lpm	r17, Z+
    277a:	03 ff       	sbrs	r16, 3
    277c:	11 91       	ld	r17, Z+
    277e:	ef 01       	movw	r28, r30
    2780:	15 32       	cpi	r17, 0x25	; 37
    2782:	71 f4       	brne	.+28     	; 0x27a0 <vfscanf+0x6e>
    2784:	c5 01       	movw	r24, r10
    2786:	66 d2       	rcall	.+1228   	; 0x2c54 <fgetc>
    2788:	97 fd       	sbrc	r25, 7
    278a:	e9 c0       	rjmp	.+466    	; 0x295e <vfscanf+0x22c>
    278c:	41 2f       	mov	r20, r17
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	9c 01       	movw	r18, r24
    2792:	33 27       	eor	r19, r19
    2794:	24 17       	cp	r18, r20
    2796:	35 07       	cpc	r19, r21
    2798:	c1 f2       	breq	.-80     	; 0x274a <vfscanf+0x18>
    279a:	b5 01       	movw	r22, r10
    279c:	0b d3       	rcall	.+1558   	; 0x2db4 <ungetc>
    279e:	e1 c0       	rjmp	.+450    	; 0x2962 <vfscanf+0x230>
    27a0:	1a 32       	cpi	r17, 0x2A	; 42
    27a2:	41 f4       	brne	.+16     	; 0x27b4 <vfscanf+0x82>
    27a4:	03 fd       	sbrc	r16, 3
    27a6:	15 91       	lpm	r17, Z+
    27a8:	03 ff       	sbrs	r16, 3
    27aa:	11 91       	ld	r17, Z+
    27ac:	ef 01       	movw	r28, r30
    27ae:	77 24       	eor	r7, r7
    27b0:	73 94       	inc	r7
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <vfscanf+0x84>
    27b4:	71 2c       	mov	r7, r1
    27b6:	e1 2c       	mov	r14, r1
    27b8:	f1 2c       	mov	r15, r1
    27ba:	20 ed       	ldi	r18, 0xD0	; 208
    27bc:	21 0f       	add	r18, r17
    27be:	2a 30       	cpi	r18, 0x0A	; 10
    27c0:	80 f4       	brcc	.+32     	; 0x27e2 <vfscanf+0xb0>
    27c2:	f7 2d       	mov	r31, r7
    27c4:	f2 60       	ori	r31, 0x02	; 2
    27c6:	7f 2e       	mov	r7, r31
    27c8:	b7 01       	movw	r22, r14
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	00 dd       	rcall	.-1536   	; 0x21d2 <mulacc>
    27d2:	7b 01       	movw	r14, r22
    27d4:	fe 01       	movw	r30, r28
    27d6:	03 fd       	sbrc	r16, 3
    27d8:	15 91       	lpm	r17, Z+
    27da:	03 ff       	sbrs	r16, 3
    27dc:	11 91       	ld	r17, Z+
    27de:	ef 01       	movw	r28, r30
    27e0:	ec cf       	rjmp	.-40     	; 0x27ba <vfscanf+0x88>
    27e2:	71 fe       	sbrs	r7, 1
    27e4:	04 c0       	rjmp	.+8      	; 0x27ee <vfscanf+0xbc>
    27e6:	e1 14       	cp	r14, r1
    27e8:	f1 04       	cpc	r15, r1
    27ea:	21 f4       	brne	.+8      	; 0x27f4 <vfscanf+0xc2>
    27ec:	ba c0       	rjmp	.+372    	; 0x2962 <vfscanf+0x230>
    27ee:	ee 24       	eor	r14, r14
    27f0:	ea 94       	dec	r14
    27f2:	fe 2c       	mov	r15, r14
    27f4:	18 36       	cpi	r17, 0x68	; 104
    27f6:	19 f0       	breq	.+6      	; 0x27fe <vfscanf+0xcc>
    27f8:	1c 36       	cpi	r17, 0x6C	; 108
    27fa:	61 f0       	breq	.+24     	; 0x2814 <vfscanf+0xe2>
    27fc:	14 c0       	rjmp	.+40     	; 0x2826 <vfscanf+0xf4>
    27fe:	fe 01       	movw	r30, r28
    2800:	03 fd       	sbrc	r16, 3
    2802:	15 91       	lpm	r17, Z+
    2804:	03 ff       	sbrs	r16, 3
    2806:	11 91       	ld	r17, Z+
    2808:	ef 01       	movw	r28, r30
    280a:	18 36       	cpi	r17, 0x68	; 104
    280c:	61 f4       	brne	.+24     	; 0x2826 <vfscanf+0xf4>
    280e:	87 2d       	mov	r24, r7
    2810:	88 60       	ori	r24, 0x08	; 8
    2812:	78 2e       	mov	r7, r24
    2814:	97 2d       	mov	r25, r7
    2816:	94 60       	ori	r25, 0x04	; 4
    2818:	79 2e       	mov	r7, r25
    281a:	fe 01       	movw	r30, r28
    281c:	03 fd       	sbrc	r16, 3
    281e:	15 91       	lpm	r17, Z+
    2820:	03 ff       	sbrs	r16, 3
    2822:	11 91       	ld	r17, Z+
    2824:	ef 01       	movw	r28, r30
    2826:	11 23       	and	r17, r17
    2828:	09 f4       	brne	.+2      	; 0x282c <vfscanf+0xfa>
    282a:	9b c0       	rjmp	.+310    	; 0x2962 <vfscanf+0x230>
    282c:	61 2f       	mov	r22, r17
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	86 e5       	ldi	r24, 0x56	; 86
    2832:	92 e0       	ldi	r25, 0x02	; 2
    2834:	e0 d1       	rcall	.+960    	; 0x2bf6 <strchr_P>
    2836:	89 2b       	or	r24, r25
    2838:	09 f4       	brne	.+2      	; 0x283c <vfscanf+0x10a>
    283a:	93 c0       	rjmp	.+294    	; 0x2962 <vfscanf+0x230>
    283c:	70 fc       	sbrc	r7, 0
    283e:	07 c0       	rjmp	.+14     	; 0x284e <vfscanf+0x11c>
    2840:	f4 01       	movw	r30, r8
    2842:	c0 80       	ld	r12, Z
    2844:	d1 80       	ldd	r13, Z+1	; 0x01
    2846:	c4 01       	movw	r24, r8
    2848:	02 96       	adiw	r24, 0x02	; 2
    284a:	4c 01       	movw	r8, r24
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <vfscanf+0x120>
    284e:	c1 2c       	mov	r12, r1
    2850:	d1 2c       	mov	r13, r1
    2852:	1e 36       	cpi	r17, 0x6E	; 110
    2854:	49 f4       	brne	.+18     	; 0x2868 <vfscanf+0x136>
    2856:	f5 01       	movw	r30, r10
    2858:	46 81       	ldd	r20, Z+6	; 0x06
    285a:	57 81       	ldd	r21, Z+7	; 0x07
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	27 2d       	mov	r18, r7
    2862:	c6 01       	movw	r24, r12
    2864:	aa dc       	rcall	.-1708   	; 0x21ba <putval>
    2866:	71 cf       	rjmp	.-286    	; 0x274a <vfscanf+0x18>
    2868:	13 36       	cpi	r17, 0x63	; 99
    286a:	b1 f4       	brne	.+44     	; 0x2898 <vfscanf+0x166>
    286c:	71 fc       	sbrc	r7, 1
    286e:	03 c0       	rjmp	.+6      	; 0x2876 <vfscanf+0x144>
    2870:	ee 24       	eor	r14, r14
    2872:	e3 94       	inc	r14
    2874:	f1 2c       	mov	r15, r1
    2876:	c5 01       	movw	r24, r10
    2878:	ed d1       	rcall	.+986    	; 0x2c54 <fgetc>
    287a:	97 fd       	sbrc	r25, 7
    287c:	70 c0       	rjmp	.+224    	; 0x295e <vfscanf+0x22c>
    287e:	c1 14       	cp	r12, r1
    2880:	d1 04       	cpc	r13, r1
    2882:	29 f0       	breq	.+10     	; 0x288e <vfscanf+0x15c>
    2884:	f6 01       	movw	r30, r12
    2886:	80 83       	st	Z, r24
    2888:	c6 01       	movw	r24, r12
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	6c 01       	movw	r12, r24
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	e9 1a       	sub	r14, r25
    2892:	f1 08       	sbc	r15, r1
    2894:	81 f7       	brne	.-32     	; 0x2876 <vfscanf+0x144>
    2896:	5f c0       	rjmp	.+190    	; 0x2956 <vfscanf+0x224>
    2898:	1b 35       	cpi	r17, 0x5B	; 91
    289a:	51 f4       	brne	.+20     	; 0x28b0 <vfscanf+0x17e>
    289c:	9e 01       	movw	r18, r28
    289e:	a6 01       	movw	r20, r12
    28a0:	b7 01       	movw	r22, r14
    28a2:	c5 01       	movw	r24, r10
    28a4:	53 dd       	rcall	.-1370   	; 0x234c <conv_brk>
    28a6:	ec 01       	movw	r28, r24
    28a8:	89 2b       	or	r24, r25
    28aa:	09 f0       	breq	.+2      	; 0x28ae <vfscanf+0x17c>
    28ac:	54 c0       	rjmp	.+168    	; 0x2956 <vfscanf+0x224>
    28ae:	4e c0       	rjmp	.+156    	; 0x294c <vfscanf+0x21a>
    28b0:	c5 01       	movw	r24, r10
    28b2:	b6 dc       	rcall	.-1684   	; 0x2220 <skip_spaces>
    28b4:	97 fd       	sbrc	r25, 7
    28b6:	53 c0       	rjmp	.+166    	; 0x295e <vfscanf+0x22c>
    28b8:	1f 36       	cpi	r17, 0x6F	; 111
    28ba:	c9 f1       	breq	.+114    	; 0x292e <vfscanf+0x1fc>
    28bc:	40 f4       	brcc	.+16     	; 0x28ce <vfscanf+0x19c>
    28be:	14 36       	cpi	r17, 0x64	; 100
    28c0:	91 f1       	breq	.+100    	; 0x2926 <vfscanf+0x1f4>
    28c2:	19 36       	cpi	r17, 0x69	; 105
    28c4:	b9 f1       	breq	.+110    	; 0x2934 <vfscanf+0x202>
    28c6:	18 35       	cpi	r17, 0x58	; 88
    28c8:	09 f0       	breq	.+2      	; 0x28cc <vfscanf+0x19a>
    28ca:	3a c0       	rjmp	.+116    	; 0x2940 <vfscanf+0x20e>
    28cc:	28 c0       	rjmp	.+80     	; 0x291e <vfscanf+0x1ec>
    28ce:	13 37       	cpi	r17, 0x73	; 115
    28d0:	a9 f0       	breq	.+42     	; 0x28fc <vfscanf+0x1ca>
    28d2:	18 f4       	brcc	.+6      	; 0x28da <vfscanf+0x1a8>
    28d4:	10 37       	cpi	r17, 0x70	; 112
    28d6:	19 f1       	breq	.+70     	; 0x291e <vfscanf+0x1ec>
    28d8:	33 c0       	rjmp	.+102    	; 0x2940 <vfscanf+0x20e>
    28da:	15 37       	cpi	r17, 0x75	; 117
    28dc:	21 f1       	breq	.+72     	; 0x2926 <vfscanf+0x1f4>
    28de:	18 37       	cpi	r17, 0x78	; 120
    28e0:	f1 f0       	breq	.+60     	; 0x291e <vfscanf+0x1ec>
    28e2:	2e c0       	rjmp	.+92     	; 0x2940 <vfscanf+0x20e>
    28e4:	c1 14       	cp	r12, r1
    28e6:	d1 04       	cpc	r13, r1
    28e8:	29 f0       	breq	.+10     	; 0x28f4 <vfscanf+0x1c2>
    28ea:	f6 01       	movw	r30, r12
    28ec:	00 83       	st	Z, r16
    28ee:	c6 01       	movw	r24, r12
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	6c 01       	movw	r12, r24
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	e9 1a       	sub	r14, r25
    28f8:	f1 08       	sbc	r15, r1
    28fa:	59 f0       	breq	.+22     	; 0x2912 <vfscanf+0x1e0>
    28fc:	c5 01       	movw	r24, r10
    28fe:	aa d1       	rcall	.+852    	; 0x2c54 <fgetc>
    2900:	8c 01       	movw	r16, r24
    2902:	97 fd       	sbrc	r25, 7
    2904:	06 c0       	rjmp	.+12     	; 0x2912 <vfscanf+0x1e0>
    2906:	67 d1       	rcall	.+718    	; 0x2bd6 <isspace>
    2908:	89 2b       	or	r24, r25
    290a:	61 f3       	breq	.-40     	; 0x28e4 <vfscanf+0x1b2>
    290c:	b5 01       	movw	r22, r10
    290e:	c8 01       	movw	r24, r16
    2910:	51 d2       	rcall	.+1186   	; 0x2db4 <ungetc>
    2912:	c1 14       	cp	r12, r1
    2914:	d1 04       	cpc	r13, r1
    2916:	f9 f0       	breq	.+62     	; 0x2956 <vfscanf+0x224>
    2918:	f6 01       	movw	r30, r12
    291a:	10 82       	st	Z, r1
    291c:	1c c0       	rjmp	.+56     	; 0x2956 <vfscanf+0x224>
    291e:	f7 2d       	mov	r31, r7
    2920:	f0 64       	ori	r31, 0x40	; 64
    2922:	7f 2e       	mov	r7, r31
    2924:	07 c0       	rjmp	.+14     	; 0x2934 <vfscanf+0x202>
    2926:	87 2d       	mov	r24, r7
    2928:	80 62       	ori	r24, 0x20	; 32
    292a:	78 2e       	mov	r7, r24
    292c:	03 c0       	rjmp	.+6      	; 0x2934 <vfscanf+0x202>
    292e:	97 2d       	mov	r25, r7
    2930:	90 61       	ori	r25, 0x10	; 16
    2932:	79 2e       	mov	r7, r25
    2934:	27 2d       	mov	r18, r7
    2936:	a6 01       	movw	r20, r12
    2938:	b7 01       	movw	r22, r14
    293a:	c5 01       	movw	r24, r10
    293c:	87 dc       	rcall	.-1778   	; 0x224c <conv_int>
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <vfscanf+0x216>
    2940:	a6 01       	movw	r20, r12
    2942:	b7 01       	movw	r22, r14
    2944:	c5 01       	movw	r24, r10
    2946:	c0 dd       	rcall	.-1152   	; 0x24c8 <conv_flt>
    2948:	81 11       	cpse	r24, r1
    294a:	05 c0       	rjmp	.+10     	; 0x2956 <vfscanf+0x224>
    294c:	f5 01       	movw	r30, r10
    294e:	83 81       	ldd	r24, Z+3	; 0x03
    2950:	80 73       	andi	r24, 0x30	; 48
    2952:	29 f4       	brne	.+10     	; 0x295e <vfscanf+0x22c>
    2954:	06 c0       	rjmp	.+12     	; 0x2962 <vfscanf+0x230>
    2956:	70 fc       	sbrc	r7, 0
    2958:	f8 ce       	rjmp	.-528    	; 0x274a <vfscanf+0x18>
    295a:	63 94       	inc	r6
    295c:	f6 ce       	rjmp	.-532    	; 0x274a <vfscanf+0x18>
    295e:	66 20       	and	r6, r6
    2960:	19 f0       	breq	.+6      	; 0x2968 <vfscanf+0x236>
    2962:	86 2d       	mov	r24, r6
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 c0       	rjmp	.+4      	; 0x296c <vfscanf+0x23a>
    2968:	8f ef       	ldi	r24, 0xFF	; 255
    296a:	9f ef       	ldi	r25, 0xFF	; 255
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	ee e0       	ldi	r30, 0x0E	; 14
    2972:	42 c0       	rjmp	.+132    	; 0x29f8 <__epilogue_restores__+0x8>

00002974 <__udivmodsi4>:
    2974:	a1 e2       	ldi	r26, 0x21	; 33
    2976:	1a 2e       	mov	r1, r26
    2978:	aa 1b       	sub	r26, r26
    297a:	bb 1b       	sub	r27, r27
    297c:	fd 01       	movw	r30, r26
    297e:	0d c0       	rjmp	.+26     	; 0x299a <__udivmodsi4_ep>

00002980 <__udivmodsi4_loop>:
    2980:	aa 1f       	adc	r26, r26
    2982:	bb 1f       	adc	r27, r27
    2984:	ee 1f       	adc	r30, r30
    2986:	ff 1f       	adc	r31, r31
    2988:	a2 17       	cp	r26, r18
    298a:	b3 07       	cpc	r27, r19
    298c:	e4 07       	cpc	r30, r20
    298e:	f5 07       	cpc	r31, r21
    2990:	20 f0       	brcs	.+8      	; 0x299a <__udivmodsi4_ep>
    2992:	a2 1b       	sub	r26, r18
    2994:	b3 0b       	sbc	r27, r19
    2996:	e4 0b       	sbc	r30, r20
    2998:	f5 0b       	sbc	r31, r21

0000299a <__udivmodsi4_ep>:
    299a:	66 1f       	adc	r22, r22
    299c:	77 1f       	adc	r23, r23
    299e:	88 1f       	adc	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	1a 94       	dec	r1
    29a4:	69 f7       	brne	.-38     	; 0x2980 <__udivmodsi4_loop>
    29a6:	60 95       	com	r22
    29a8:	70 95       	com	r23
    29aa:	80 95       	com	r24
    29ac:	90 95       	com	r25
    29ae:	9b 01       	movw	r18, r22
    29b0:	ac 01       	movw	r20, r24
    29b2:	bd 01       	movw	r22, r26
    29b4:	cf 01       	movw	r24, r30
    29b6:	08 95       	ret

000029b8 <__prologue_saves__>:
    29b8:	2f 92       	push	r2
    29ba:	3f 92       	push	r3
    29bc:	4f 92       	push	r4
    29be:	5f 92       	push	r5
    29c0:	6f 92       	push	r6
    29c2:	7f 92       	push	r7
    29c4:	8f 92       	push	r8
    29c6:	9f 92       	push	r9
    29c8:	af 92       	push	r10
    29ca:	bf 92       	push	r11
    29cc:	cf 92       	push	r12
    29ce:	df 92       	push	r13
    29d0:	ef 92       	push	r14
    29d2:	ff 92       	push	r15
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	ca 1b       	sub	r28, r26
    29e2:	db 0b       	sbc	r29, r27
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	09 94       	ijmp

000029f0 <__epilogue_restores__>:
    29f0:	2a 88       	ldd	r2, Y+18	; 0x12
    29f2:	39 88       	ldd	r3, Y+17	; 0x11
    29f4:	48 88       	ldd	r4, Y+16	; 0x10
    29f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    29f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    29fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    29fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    29fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a00:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a02:	b9 84       	ldd	r11, Y+9	; 0x09
    2a04:	c8 84       	ldd	r12, Y+8	; 0x08
    2a06:	df 80       	ldd	r13, Y+7	; 0x07
    2a08:	ee 80       	ldd	r14, Y+6	; 0x06
    2a0a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a0c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a0e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a10:	aa 81       	ldd	r26, Y+2	; 0x02
    2a12:	b9 81       	ldd	r27, Y+1	; 0x01
    2a14:	ce 0f       	add	r28, r30
    2a16:	d1 1d       	adc	r29, r1
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	ed 01       	movw	r28, r26
    2a24:	08 95       	ret

00002a26 <__ftoa_engine>:
    2a26:	28 30       	cpi	r18, 0x08	; 8
    2a28:	08 f0       	brcs	.+2      	; 0x2a2c <__ftoa_engine+0x6>
    2a2a:	27 e0       	ldi	r18, 0x07	; 7
    2a2c:	33 27       	eor	r19, r19
    2a2e:	da 01       	movw	r26, r20
    2a30:	99 0f       	add	r25, r25
    2a32:	31 1d       	adc	r19, r1
    2a34:	87 fd       	sbrc	r24, 7
    2a36:	91 60       	ori	r25, 0x01	; 1
    2a38:	00 96       	adiw	r24, 0x00	; 0
    2a3a:	61 05       	cpc	r22, r1
    2a3c:	71 05       	cpc	r23, r1
    2a3e:	39 f4       	brne	.+14     	; 0x2a4e <__ftoa_engine+0x28>
    2a40:	32 60       	ori	r19, 0x02	; 2
    2a42:	2e 5f       	subi	r18, 0xFE	; 254
    2a44:	3d 93       	st	X+, r19
    2a46:	30 e3       	ldi	r19, 0x30	; 48
    2a48:	2a 95       	dec	r18
    2a4a:	e1 f7       	brne	.-8      	; 0x2a44 <__ftoa_engine+0x1e>
    2a4c:	08 95       	ret
    2a4e:	9f 3f       	cpi	r25, 0xFF	; 255
    2a50:	30 f0       	brcs	.+12     	; 0x2a5e <__ftoa_engine+0x38>
    2a52:	80 38       	cpi	r24, 0x80	; 128
    2a54:	71 05       	cpc	r23, r1
    2a56:	61 05       	cpc	r22, r1
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <__ftoa_engine+0x36>
    2a5a:	3c 5f       	subi	r19, 0xFC	; 252
    2a5c:	3c 5f       	subi	r19, 0xFC	; 252
    2a5e:	3d 93       	st	X+, r19
    2a60:	91 30       	cpi	r25, 0x01	; 1
    2a62:	08 f0       	brcs	.+2      	; 0x2a66 <__ftoa_engine+0x40>
    2a64:	80 68       	ori	r24, 0x80	; 128
    2a66:	91 1d       	adc	r25, r1
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	1f 93       	push	r17
    2a6e:	0f 93       	push	r16
    2a70:	ff 92       	push	r15
    2a72:	ef 92       	push	r14
    2a74:	19 2f       	mov	r17, r25
    2a76:	98 7f       	andi	r25, 0xF8	; 248
    2a78:	96 95       	lsr	r25
    2a7a:	e9 2f       	mov	r30, r25
    2a7c:	96 95       	lsr	r25
    2a7e:	96 95       	lsr	r25
    2a80:	e9 0f       	add	r30, r25
    2a82:	ff 27       	eor	r31, r31
    2a84:	e2 5f       	subi	r30, 0xF2	; 242
    2a86:	fe 4f       	sbci	r31, 0xFE	; 254
    2a88:	99 27       	eor	r25, r25
    2a8a:	33 27       	eor	r19, r19
    2a8c:	ee 24       	eor	r14, r14
    2a8e:	ff 24       	eor	r15, r15
    2a90:	a7 01       	movw	r20, r14
    2a92:	e7 01       	movw	r28, r14
    2a94:	05 90       	lpm	r0, Z+
    2a96:	08 94       	sec
    2a98:	07 94       	ror	r0
    2a9a:	28 f4       	brcc	.+10     	; 0x2aa6 <__ftoa_engine+0x80>
    2a9c:	36 0f       	add	r19, r22
    2a9e:	e7 1e       	adc	r14, r23
    2aa0:	f8 1e       	adc	r15, r24
    2aa2:	49 1f       	adc	r20, r25
    2aa4:	51 1d       	adc	r21, r1
    2aa6:	66 0f       	add	r22, r22
    2aa8:	77 1f       	adc	r23, r23
    2aaa:	88 1f       	adc	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	06 94       	lsr	r0
    2ab0:	a1 f7       	brne	.-24     	; 0x2a9a <__ftoa_engine+0x74>
    2ab2:	05 90       	lpm	r0, Z+
    2ab4:	07 94       	ror	r0
    2ab6:	28 f4       	brcc	.+10     	; 0x2ac2 <__ftoa_engine+0x9c>
    2ab8:	e7 0e       	add	r14, r23
    2aba:	f8 1e       	adc	r15, r24
    2abc:	49 1f       	adc	r20, r25
    2abe:	56 1f       	adc	r21, r22
    2ac0:	c1 1d       	adc	r28, r1
    2ac2:	77 0f       	add	r23, r23
    2ac4:	88 1f       	adc	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	66 1f       	adc	r22, r22
    2aca:	06 94       	lsr	r0
    2acc:	a1 f7       	brne	.-24     	; 0x2ab6 <__ftoa_engine+0x90>
    2ace:	05 90       	lpm	r0, Z+
    2ad0:	07 94       	ror	r0
    2ad2:	28 f4       	brcc	.+10     	; 0x2ade <__ftoa_engine+0xb8>
    2ad4:	f8 0e       	add	r15, r24
    2ad6:	49 1f       	adc	r20, r25
    2ad8:	56 1f       	adc	r21, r22
    2ada:	c7 1f       	adc	r28, r23
    2adc:	d1 1d       	adc	r29, r1
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	66 1f       	adc	r22, r22
    2ae4:	77 1f       	adc	r23, r23
    2ae6:	06 94       	lsr	r0
    2ae8:	a1 f7       	brne	.-24     	; 0x2ad2 <__ftoa_engine+0xac>
    2aea:	05 90       	lpm	r0, Z+
    2aec:	07 94       	ror	r0
    2aee:	20 f4       	brcc	.+8      	; 0x2af8 <__ftoa_engine+0xd2>
    2af0:	49 0f       	add	r20, r25
    2af2:	56 1f       	adc	r21, r22
    2af4:	c7 1f       	adc	r28, r23
    2af6:	d8 1f       	adc	r29, r24
    2af8:	99 0f       	add	r25, r25
    2afa:	66 1f       	adc	r22, r22
    2afc:	77 1f       	adc	r23, r23
    2afe:	88 1f       	adc	r24, r24
    2b00:	06 94       	lsr	r0
    2b02:	a9 f7       	brne	.-22     	; 0x2aee <__ftoa_engine+0xc8>
    2b04:	84 91       	lpm	r24, Z
    2b06:	10 95       	com	r17
    2b08:	17 70       	andi	r17, 0x07	; 7
    2b0a:	41 f0       	breq	.+16     	; 0x2b1c <__ftoa_engine+0xf6>
    2b0c:	d6 95       	lsr	r29
    2b0e:	c7 95       	ror	r28
    2b10:	57 95       	ror	r21
    2b12:	47 95       	ror	r20
    2b14:	f7 94       	ror	r15
    2b16:	e7 94       	ror	r14
    2b18:	1a 95       	dec	r17
    2b1a:	c1 f7       	brne	.-16     	; 0x2b0c <__ftoa_engine+0xe6>
    2b1c:	e4 eb       	ldi	r30, 0xB4	; 180
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	68 94       	set
    2b22:	15 90       	lpm	r1, Z+
    2b24:	15 91       	lpm	r17, Z+
    2b26:	35 91       	lpm	r19, Z+
    2b28:	65 91       	lpm	r22, Z+
    2b2a:	95 91       	lpm	r25, Z+
    2b2c:	05 90       	lpm	r0, Z+
    2b2e:	7f e2       	ldi	r23, 0x2F	; 47
    2b30:	73 95       	inc	r23
    2b32:	e1 18       	sub	r14, r1
    2b34:	f1 0a       	sbc	r15, r17
    2b36:	43 0b       	sbc	r20, r19
    2b38:	56 0b       	sbc	r21, r22
    2b3a:	c9 0b       	sbc	r28, r25
    2b3c:	d0 09       	sbc	r29, r0
    2b3e:	c0 f7       	brcc	.-16     	; 0x2b30 <__ftoa_engine+0x10a>
    2b40:	e1 0c       	add	r14, r1
    2b42:	f1 1e       	adc	r15, r17
    2b44:	43 1f       	adc	r20, r19
    2b46:	56 1f       	adc	r21, r22
    2b48:	c9 1f       	adc	r28, r25
    2b4a:	d0 1d       	adc	r29, r0
    2b4c:	7e f4       	brtc	.+30     	; 0x2b6c <__ftoa_engine+0x146>
    2b4e:	70 33       	cpi	r23, 0x30	; 48
    2b50:	11 f4       	brne	.+4      	; 0x2b56 <__ftoa_engine+0x130>
    2b52:	8a 95       	dec	r24
    2b54:	e6 cf       	rjmp	.-52     	; 0x2b22 <__ftoa_engine+0xfc>
    2b56:	e8 94       	clt
    2b58:	01 50       	subi	r16, 0x01	; 1
    2b5a:	30 f0       	brcs	.+12     	; 0x2b68 <__ftoa_engine+0x142>
    2b5c:	08 0f       	add	r16, r24
    2b5e:	0a f4       	brpl	.+2      	; 0x2b62 <__ftoa_engine+0x13c>
    2b60:	00 27       	eor	r16, r16
    2b62:	02 17       	cp	r16, r18
    2b64:	08 f4       	brcc	.+2      	; 0x2b68 <__ftoa_engine+0x142>
    2b66:	20 2f       	mov	r18, r16
    2b68:	23 95       	inc	r18
    2b6a:	02 2f       	mov	r16, r18
    2b6c:	7a 33       	cpi	r23, 0x3A	; 58
    2b6e:	28 f0       	brcs	.+10     	; 0x2b7a <__ftoa_engine+0x154>
    2b70:	79 e3       	ldi	r23, 0x39	; 57
    2b72:	7d 93       	st	X+, r23
    2b74:	2a 95       	dec	r18
    2b76:	e9 f7       	brne	.-6      	; 0x2b72 <__ftoa_engine+0x14c>
    2b78:	10 c0       	rjmp	.+32     	; 0x2b9a <__ftoa_engine+0x174>
    2b7a:	7d 93       	st	X+, r23
    2b7c:	2a 95       	dec	r18
    2b7e:	89 f6       	brne	.-94     	; 0x2b22 <__ftoa_engine+0xfc>
    2b80:	06 94       	lsr	r0
    2b82:	97 95       	ror	r25
    2b84:	67 95       	ror	r22
    2b86:	37 95       	ror	r19
    2b88:	17 95       	ror	r17
    2b8a:	17 94       	ror	r1
    2b8c:	e1 18       	sub	r14, r1
    2b8e:	f1 0a       	sbc	r15, r17
    2b90:	43 0b       	sbc	r20, r19
    2b92:	56 0b       	sbc	r21, r22
    2b94:	c9 0b       	sbc	r28, r25
    2b96:	d0 09       	sbc	r29, r0
    2b98:	98 f0       	brcs	.+38     	; 0x2bc0 <__ftoa_engine+0x19a>
    2b9a:	23 95       	inc	r18
    2b9c:	7e 91       	ld	r23, -X
    2b9e:	73 95       	inc	r23
    2ba0:	7a 33       	cpi	r23, 0x3A	; 58
    2ba2:	08 f0       	brcs	.+2      	; 0x2ba6 <__ftoa_engine+0x180>
    2ba4:	70 e3       	ldi	r23, 0x30	; 48
    2ba6:	7c 93       	st	X, r23
    2ba8:	20 13       	cpse	r18, r16
    2baa:	b8 f7       	brcc	.-18     	; 0x2b9a <__ftoa_engine+0x174>
    2bac:	7e 91       	ld	r23, -X
    2bae:	70 61       	ori	r23, 0x10	; 16
    2bb0:	7d 93       	st	X+, r23
    2bb2:	30 f0       	brcs	.+12     	; 0x2bc0 <__ftoa_engine+0x19a>
    2bb4:	83 95       	inc	r24
    2bb6:	71 e3       	ldi	r23, 0x31	; 49
    2bb8:	7d 93       	st	X+, r23
    2bba:	70 e3       	ldi	r23, 0x30	; 48
    2bbc:	2a 95       	dec	r18
    2bbe:	e1 f7       	brne	.-8      	; 0x2bb8 <__ftoa_engine+0x192>
    2bc0:	11 24       	eor	r1, r1
    2bc2:	ef 90       	pop	r14
    2bc4:	ff 90       	pop	r15
    2bc6:	0f 91       	pop	r16
    2bc8:	1f 91       	pop	r17
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	99 27       	eor	r25, r25
    2bd0:	87 fd       	sbrc	r24, 7
    2bd2:	90 95       	com	r25
    2bd4:	08 95       	ret

00002bd6 <isspace>:
    2bd6:	91 11       	cpse	r25, r1
    2bd8:	64 c1       	rjmp	.+712    	; 0x2ea2 <__ctype_isfalse>
    2bda:	80 32       	cpi	r24, 0x20	; 32
    2bdc:	19 f0       	breq	.+6      	; 0x2be4 <isspace+0xe>
    2bde:	89 50       	subi	r24, 0x09	; 9
    2be0:	85 50       	subi	r24, 0x05	; 5
    2be2:	d0 f7       	brcc	.-12     	; 0x2bd8 <isspace+0x2>
    2be4:	08 95       	ret

00002be6 <tolower>:
    2be6:	91 11       	cpse	r25, r1
    2be8:	08 95       	ret
    2bea:	81 54       	subi	r24, 0x41	; 65
    2bec:	8a 51       	subi	r24, 0x1A	; 26
    2bee:	08 f4       	brcc	.+2      	; 0x2bf2 <tolower+0xc>
    2bf0:	80 5e       	subi	r24, 0xE0	; 224
    2bf2:	85 5a       	subi	r24, 0xA5	; 165
    2bf4:	08 95       	ret

00002bf6 <strchr_P>:
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	05 90       	lpm	r0, Z+
    2bfa:	06 16       	cp	r0, r22
    2bfc:	21 f0       	breq	.+8      	; 0x2c06 <strchr_P+0x10>
    2bfe:	00 20       	and	r0, r0
    2c00:	d9 f7       	brne	.-10     	; 0x2bf8 <strchr_P+0x2>
    2c02:	c0 01       	movw	r24, r0
    2c04:	08 95       	ret
    2c06:	31 97       	sbiw	r30, 0x01	; 1
    2c08:	cf 01       	movw	r24, r30
    2c0a:	08 95       	ret

00002c0c <strnlen_P>:
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	05 90       	lpm	r0, Z+
    2c10:	61 50       	subi	r22, 0x01	; 1
    2c12:	70 40       	sbci	r23, 0x00	; 0
    2c14:	01 10       	cpse	r0, r1
    2c16:	d8 f7       	brcc	.-10     	; 0x2c0e <strnlen_P+0x2>
    2c18:	80 95       	com	r24
    2c1a:	90 95       	com	r25
    2c1c:	8e 0f       	add	r24, r30
    2c1e:	9f 1f       	adc	r25, r31
    2c20:	08 95       	ret

00002c22 <strncmp>:
    2c22:	fb 01       	movw	r30, r22
    2c24:	dc 01       	movw	r26, r24
    2c26:	41 50       	subi	r20, 0x01	; 1
    2c28:	50 40       	sbci	r21, 0x00	; 0
    2c2a:	30 f0       	brcs	.+12     	; 0x2c38 <strncmp+0x16>
    2c2c:	8d 91       	ld	r24, X+
    2c2e:	01 90       	ld	r0, Z+
    2c30:	80 19       	sub	r24, r0
    2c32:	19 f4       	brne	.+6      	; 0x2c3a <strncmp+0x18>
    2c34:	00 20       	and	r0, r0
    2c36:	b9 f7       	brne	.-18     	; 0x2c26 <strncmp+0x4>
    2c38:	88 1b       	sub	r24, r24
    2c3a:	99 0b       	sbc	r25, r25
    2c3c:	08 95       	ret

00002c3e <strnlen>:
    2c3e:	fc 01       	movw	r30, r24
    2c40:	61 50       	subi	r22, 0x01	; 1
    2c42:	70 40       	sbci	r23, 0x00	; 0
    2c44:	01 90       	ld	r0, Z+
    2c46:	01 10       	cpse	r0, r1
    2c48:	d8 f7       	brcc	.-10     	; 0x2c40 <strnlen+0x2>
    2c4a:	80 95       	com	r24
    2c4c:	90 95       	com	r25
    2c4e:	8e 0f       	add	r24, r30
    2c50:	9f 1f       	adc	r25, r31
    2c52:	08 95       	ret

00002c54 <fgetc>:
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	ec 01       	movw	r28, r24
    2c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c5c:	20 ff       	sbrs	r18, 0
    2c5e:	33 c0       	rjmp	.+102    	; 0x2cc6 <fgetc+0x72>
    2c60:	26 ff       	sbrs	r18, 6
    2c62:	0a c0       	rjmp	.+20     	; 0x2c78 <fgetc+0x24>
    2c64:	2f 7b       	andi	r18, 0xBF	; 191
    2c66:	2b 83       	std	Y+3, r18	; 0x03
    2c68:	8e 81       	ldd	r24, Y+6	; 0x06
    2c6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	9f 83       	std	Y+7, r25	; 0x07
    2c70:	8e 83       	std	Y+6, r24	; 0x06
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	29 c0       	rjmp	.+82     	; 0x2cca <fgetc+0x76>
    2c78:	22 ff       	sbrs	r18, 2
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <fgetc+0x46>
    2c7c:	e8 81       	ld	r30, Y
    2c7e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c80:	80 81       	ld	r24, Z
    2c82:	08 2e       	mov	r0, r24
    2c84:	00 0c       	add	r0, r0
    2c86:	99 0b       	sbc	r25, r25
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	19 f4       	brne	.+6      	; 0x2c92 <fgetc+0x3e>
    2c8c:	20 62       	ori	r18, 0x20	; 32
    2c8e:	2b 83       	std	Y+3, r18	; 0x03
    2c90:	1a c0       	rjmp	.+52     	; 0x2cc6 <fgetc+0x72>
    2c92:	31 96       	adiw	r30, 0x01	; 1
    2c94:	f9 83       	std	Y+1, r31	; 0x01
    2c96:	e8 83       	st	Y, r30
    2c98:	0e c0       	rjmp	.+28     	; 0x2cb6 <fgetc+0x62>
    2c9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c9c:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c9e:	09 95       	icall
    2ca0:	97 ff       	sbrs	r25, 7
    2ca2:	09 c0       	rjmp	.+18     	; 0x2cb6 <fgetc+0x62>
    2ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	11 f0       	breq	.+4      	; 0x2cae <fgetc+0x5a>
    2caa:	80 e2       	ldi	r24, 0x20	; 32
    2cac:	01 c0       	rjmp	.+2      	; 0x2cb0 <fgetc+0x5c>
    2cae:	80 e1       	ldi	r24, 0x10	; 16
    2cb0:	82 2b       	or	r24, r18
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
    2cb4:	08 c0       	rjmp	.+16     	; 0x2cc6 <fgetc+0x72>
    2cb6:	2e 81       	ldd	r18, Y+6	; 0x06
    2cb8:	3f 81       	ldd	r19, Y+7	; 0x07
    2cba:	2f 5f       	subi	r18, 0xFF	; 255
    2cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbe:	3f 83       	std	Y+7, r19	; 0x07
    2cc0:	2e 83       	std	Y+6, r18	; 0x06
    2cc2:	99 27       	eor	r25, r25
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <fgetc+0x76>
    2cc6:	8f ef       	ldi	r24, 0xFF	; 255
    2cc8:	9f ef       	ldi	r25, 0xFF	; 255
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	08 95       	ret

00002cd0 <fputc>:
    2cd0:	0f 93       	push	r16
    2cd2:	1f 93       	push	r17
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	fb 01       	movw	r30, r22
    2cda:	23 81       	ldd	r18, Z+3	; 0x03
    2cdc:	21 fd       	sbrc	r18, 1
    2cde:	03 c0       	rjmp	.+6      	; 0x2ce6 <fputc+0x16>
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	9f ef       	ldi	r25, 0xFF	; 255
    2ce4:	2c c0       	rjmp	.+88     	; 0x2d3e <fputc+0x6e>
    2ce6:	22 ff       	sbrs	r18, 2
    2ce8:	16 c0       	rjmp	.+44     	; 0x2d16 <fputc+0x46>
    2cea:	46 81       	ldd	r20, Z+6	; 0x06
    2cec:	57 81       	ldd	r21, Z+7	; 0x07
    2cee:	24 81       	ldd	r18, Z+4	; 0x04
    2cf0:	35 81       	ldd	r19, Z+5	; 0x05
    2cf2:	42 17       	cp	r20, r18
    2cf4:	53 07       	cpc	r21, r19
    2cf6:	44 f4       	brge	.+16     	; 0x2d08 <fputc+0x38>
    2cf8:	a0 81       	ld	r26, Z
    2cfa:	b1 81       	ldd	r27, Z+1	; 0x01
    2cfc:	9d 01       	movw	r18, r26
    2cfe:	2f 5f       	subi	r18, 0xFF	; 255
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	31 83       	std	Z+1, r19	; 0x01
    2d04:	20 83       	st	Z, r18
    2d06:	8c 93       	st	X, r24
    2d08:	26 81       	ldd	r18, Z+6	; 0x06
    2d0a:	37 81       	ldd	r19, Z+7	; 0x07
    2d0c:	2f 5f       	subi	r18, 0xFF	; 255
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d10:	37 83       	std	Z+7, r19	; 0x07
    2d12:	26 83       	std	Z+6, r18	; 0x06
    2d14:	14 c0       	rjmp	.+40     	; 0x2d3e <fputc+0x6e>
    2d16:	8b 01       	movw	r16, r22
    2d18:	ec 01       	movw	r28, r24
    2d1a:	fb 01       	movw	r30, r22
    2d1c:	00 84       	ldd	r0, Z+8	; 0x08
    2d1e:	f1 85       	ldd	r31, Z+9	; 0x09
    2d20:	e0 2d       	mov	r30, r0
    2d22:	09 95       	icall
    2d24:	89 2b       	or	r24, r25
    2d26:	e1 f6       	brne	.-72     	; 0x2ce0 <fputc+0x10>
    2d28:	d8 01       	movw	r26, r16
    2d2a:	16 96       	adiw	r26, 0x06	; 6
    2d2c:	8d 91       	ld	r24, X+
    2d2e:	9c 91       	ld	r25, X
    2d30:	17 97       	sbiw	r26, 0x07	; 7
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	17 96       	adiw	r26, 0x07	; 7
    2d36:	9c 93       	st	X, r25
    2d38:	8e 93       	st	-X, r24
    2d3a:	16 97       	sbiw	r26, 0x06	; 6
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	08 95       	ret

00002d48 <sprintf>:
    2d48:	ae e0       	ldi	r26, 0x0E	; 14
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e9 ea       	ldi	r30, 0xA9	; 169
    2d4e:	f6 e1       	ldi	r31, 0x16	; 22
    2d50:	41 ce       	rjmp	.-894    	; 0x29d4 <__prologue_saves__+0x1c>
    2d52:	0d 89       	ldd	r16, Y+21	; 0x15
    2d54:	1e 89       	ldd	r17, Y+22	; 0x16
    2d56:	86 e0       	ldi	r24, 0x06	; 6
    2d58:	8c 83       	std	Y+4, r24	; 0x04
    2d5a:	1a 83       	std	Y+2, r17	; 0x02
    2d5c:	09 83       	std	Y+1, r16	; 0x01
    2d5e:	8f ef       	ldi	r24, 0xFF	; 255
    2d60:	9f e7       	ldi	r25, 0x7F	; 127
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
    2d66:	ae 01       	movw	r20, r28
    2d68:	47 5e       	subi	r20, 0xE7	; 231
    2d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6c:	6f 89       	ldd	r22, Y+23	; 0x17
    2d6e:	78 8d       	ldd	r23, Y+24	; 0x18
    2d70:	ce 01       	movw	r24, r28
    2d72:	01 96       	adiw	r24, 0x01	; 1
    2d74:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <vfprintf>
    2d78:	ef 81       	ldd	r30, Y+7	; 0x07
    2d7a:	f8 85       	ldd	r31, Y+8	; 0x08
    2d7c:	e0 0f       	add	r30, r16
    2d7e:	f1 1f       	adc	r31, r17
    2d80:	10 82       	st	Z, r1
    2d82:	2e 96       	adiw	r28, 0x0e	; 14
    2d84:	e4 e0       	ldi	r30, 0x04	; 4
    2d86:	42 ce       	rjmp	.-892    	; 0x2a0c <__epilogue_restores__+0x1c>

00002d88 <sscanf>:
    2d88:	ae e0       	ldi	r26, 0x0E	; 14
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e9 ec       	ldi	r30, 0xC9	; 201
    2d8e:	f6 e1       	ldi	r31, 0x16	; 22
    2d90:	23 ce       	rjmp	.-954    	; 0x29d8 <__prologue_saves__+0x20>
    2d92:	85 e0       	ldi	r24, 0x05	; 5
    2d94:	8c 83       	std	Y+4, r24	; 0x04
    2d96:	8b 89       	ldd	r24, Y+19	; 0x13
    2d98:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	ae 01       	movw	r20, r28
    2da0:	49 5e       	subi	r20, 0xE9	; 233
    2da2:	5f 4f       	sbci	r21, 0xFF	; 255
    2da4:	6d 89       	ldd	r22, Y+21	; 0x15
    2da6:	7e 89       	ldd	r23, Y+22	; 0x16
    2da8:	ce 01       	movw	r24, r28
    2daa:	01 96       	adiw	r24, 0x01	; 1
    2dac:	c2 dc       	rcall	.-1660   	; 0x2732 <vfscanf>
    2dae:	2e 96       	adiw	r28, 0x0e	; 14
    2db0:	e2 e0       	ldi	r30, 0x02	; 2
    2db2:	2e ce       	rjmp	.-932    	; 0x2a10 <__epilogue_restores__+0x20>

00002db4 <ungetc>:
    2db4:	fb 01       	movw	r30, r22
    2db6:	23 81       	ldd	r18, Z+3	; 0x03
    2db8:	20 ff       	sbrs	r18, 0
    2dba:	12 c0       	rjmp	.+36     	; 0x2de0 <ungetc+0x2c>
    2dbc:	26 fd       	sbrc	r18, 6
    2dbe:	10 c0       	rjmp	.+32     	; 0x2de0 <ungetc+0x2c>
    2dc0:	8f 3f       	cpi	r24, 0xFF	; 255
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	93 07       	cpc	r25, r19
    2dc6:	61 f0       	breq	.+24     	; 0x2de0 <ungetc+0x2c>
    2dc8:	82 83       	std	Z+2, r24	; 0x02
    2dca:	2f 7d       	andi	r18, 0xDF	; 223
    2dcc:	20 64       	ori	r18, 0x40	; 64
    2dce:	23 83       	std	Z+3, r18	; 0x03
    2dd0:	26 81       	ldd	r18, Z+6	; 0x06
    2dd2:	37 81       	ldd	r19, Z+7	; 0x07
    2dd4:	21 50       	subi	r18, 0x01	; 1
    2dd6:	31 09       	sbc	r19, r1
    2dd8:	37 83       	std	Z+7, r19	; 0x07
    2dda:	26 83       	std	Z+6, r18	; 0x06
    2ddc:	99 27       	eor	r25, r25
    2dde:	08 95       	ret
    2de0:	8f ef       	ldi	r24, 0xFF	; 255
    2de2:	9f ef       	ldi	r25, 0xFF	; 255
    2de4:	08 95       	ret

00002de6 <__ultoa_invert>:
    2de6:	fa 01       	movw	r30, r20
    2de8:	aa 27       	eor	r26, r26
    2dea:	28 30       	cpi	r18, 0x08	; 8
    2dec:	51 f1       	breq	.+84     	; 0x2e42 <__ultoa_invert+0x5c>
    2dee:	20 31       	cpi	r18, 0x10	; 16
    2df0:	81 f1       	breq	.+96     	; 0x2e52 <__ultoa_invert+0x6c>
    2df2:	e8 94       	clt
    2df4:	6f 93       	push	r22
    2df6:	6e 7f       	andi	r22, 0xFE	; 254
    2df8:	6e 5f       	subi	r22, 0xFE	; 254
    2dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2e00:	af 4f       	sbci	r26, 0xFF	; 255
    2e02:	b1 e0       	ldi	r27, 0x01	; 1
    2e04:	3e d0       	rcall	.+124    	; 0x2e82 <__ultoa_invert+0x9c>
    2e06:	b4 e0       	ldi	r27, 0x04	; 4
    2e08:	3c d0       	rcall	.+120    	; 0x2e82 <__ultoa_invert+0x9c>
    2e0a:	67 0f       	add	r22, r23
    2e0c:	78 1f       	adc	r23, r24
    2e0e:	89 1f       	adc	r24, r25
    2e10:	9a 1f       	adc	r25, r26
    2e12:	a1 1d       	adc	r26, r1
    2e14:	68 0f       	add	r22, r24
    2e16:	79 1f       	adc	r23, r25
    2e18:	8a 1f       	adc	r24, r26
    2e1a:	91 1d       	adc	r25, r1
    2e1c:	a1 1d       	adc	r26, r1
    2e1e:	6a 0f       	add	r22, r26
    2e20:	71 1d       	adc	r23, r1
    2e22:	81 1d       	adc	r24, r1
    2e24:	91 1d       	adc	r25, r1
    2e26:	a1 1d       	adc	r26, r1
    2e28:	20 d0       	rcall	.+64     	; 0x2e6a <__ultoa_invert+0x84>
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <__ultoa_invert+0x48>
    2e2c:	68 94       	set
    2e2e:	3f 91       	pop	r19
    2e30:	2a e0       	ldi	r18, 0x0A	; 10
    2e32:	26 9f       	mul	r18, r22
    2e34:	11 24       	eor	r1, r1
    2e36:	30 19       	sub	r19, r0
    2e38:	30 5d       	subi	r19, 0xD0	; 208
    2e3a:	31 93       	st	Z+, r19
    2e3c:	de f6       	brtc	.-74     	; 0x2df4 <__ultoa_invert+0xe>
    2e3e:	cf 01       	movw	r24, r30
    2e40:	08 95       	ret
    2e42:	46 2f       	mov	r20, r22
    2e44:	47 70       	andi	r20, 0x07	; 7
    2e46:	40 5d       	subi	r20, 0xD0	; 208
    2e48:	41 93       	st	Z+, r20
    2e4a:	b3 e0       	ldi	r27, 0x03	; 3
    2e4c:	0f d0       	rcall	.+30     	; 0x2e6c <__ultoa_invert+0x86>
    2e4e:	c9 f7       	brne	.-14     	; 0x2e42 <__ultoa_invert+0x5c>
    2e50:	f6 cf       	rjmp	.-20     	; 0x2e3e <__ultoa_invert+0x58>
    2e52:	46 2f       	mov	r20, r22
    2e54:	4f 70       	andi	r20, 0x0F	; 15
    2e56:	40 5d       	subi	r20, 0xD0	; 208
    2e58:	4a 33       	cpi	r20, 0x3A	; 58
    2e5a:	18 f0       	brcs	.+6      	; 0x2e62 <__ultoa_invert+0x7c>
    2e5c:	49 5d       	subi	r20, 0xD9	; 217
    2e5e:	31 fd       	sbrc	r19, 1
    2e60:	40 52       	subi	r20, 0x20	; 32
    2e62:	41 93       	st	Z+, r20
    2e64:	02 d0       	rcall	.+4      	; 0x2e6a <__ultoa_invert+0x84>
    2e66:	a9 f7       	brne	.-22     	; 0x2e52 <__ultoa_invert+0x6c>
    2e68:	ea cf       	rjmp	.-44     	; 0x2e3e <__ultoa_invert+0x58>
    2e6a:	b4 e0       	ldi	r27, 0x04	; 4
    2e6c:	a6 95       	lsr	r26
    2e6e:	97 95       	ror	r25
    2e70:	87 95       	ror	r24
    2e72:	77 95       	ror	r23
    2e74:	67 95       	ror	r22
    2e76:	ba 95       	dec	r27
    2e78:	c9 f7       	brne	.-14     	; 0x2e6c <__ultoa_invert+0x86>
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	61 05       	cpc	r22, r1
    2e7e:	71 05       	cpc	r23, r1
    2e80:	08 95       	ret
    2e82:	9b 01       	movw	r18, r22
    2e84:	ac 01       	movw	r20, r24
    2e86:	0a 2e       	mov	r0, r26
    2e88:	06 94       	lsr	r0
    2e8a:	57 95       	ror	r21
    2e8c:	47 95       	ror	r20
    2e8e:	37 95       	ror	r19
    2e90:	27 95       	ror	r18
    2e92:	ba 95       	dec	r27
    2e94:	c9 f7       	brne	.-14     	; 0x2e88 <__ultoa_invert+0xa2>
    2e96:	62 0f       	add	r22, r18
    2e98:	73 1f       	adc	r23, r19
    2e9a:	84 1f       	adc	r24, r20
    2e9c:	95 1f       	adc	r25, r21
    2e9e:	a0 1d       	adc	r26, r0
    2ea0:	08 95       	ret

00002ea2 <__ctype_isfalse>:
    2ea2:	99 27       	eor	r25, r25
    2ea4:	88 27       	eor	r24, r24

00002ea6 <__ctype_istrue>:
    2ea6:	08 95       	ret

00002ea8 <eeprom_read_word>:
    2ea8:	a8 e1       	ldi	r26, 0x18	; 24
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	42 e0       	ldi	r20, 0x02	; 2
    2eae:	50 e0       	ldi	r21, 0x00	; 0
    2eb0:	05 c0       	rjmp	.+10     	; 0x2ebc <eeprom_read_blraw>

00002eb2 <eeprom_write_word>:
    2eb2:	12 d0       	rcall	.+36     	; 0x2ed8 <eeprom_write_byte>
    2eb4:	27 2f       	mov	r18, r23
    2eb6:	11 c0       	rjmp	.+34     	; 0x2eda <eeprom_write_r18>

00002eb8 <eeprom_read_block>:
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22

00002ebc <eeprom_read_blraw>:
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	f9 99       	sbic	0x1f, 1	; 31
    2ec0:	fe cf       	rjmp	.-4      	; 0x2ebe <eeprom_read_blraw+0x2>
    2ec2:	06 c0       	rjmp	.+12     	; 0x2ed0 <eeprom_read_blraw+0x14>
    2ec4:	f2 bd       	out	0x22, r31	; 34
    2ec6:	e1 bd       	out	0x21, r30	; 33
    2ec8:	f8 9a       	sbi	0x1f, 0	; 31
    2eca:	31 96       	adiw	r30, 0x01	; 1
    2ecc:	00 b4       	in	r0, 0x20	; 32
    2ece:	0d 92       	st	X+, r0
    2ed0:	41 50       	subi	r20, 0x01	; 1
    2ed2:	50 40       	sbci	r21, 0x00	; 0
    2ed4:	b8 f7       	brcc	.-18     	; 0x2ec4 <eeprom_read_blraw+0x8>
    2ed6:	08 95       	ret

00002ed8 <eeprom_write_byte>:
    2ed8:	26 2f       	mov	r18, r22

00002eda <eeprom_write_r18>:
    2eda:	f9 99       	sbic	0x1f, 1	; 31
    2edc:	fe cf       	rjmp	.-4      	; 0x2eda <eeprom_write_r18>
    2ede:	1f ba       	out	0x1f, r1	; 31
    2ee0:	92 bd       	out	0x22, r25	; 34
    2ee2:	81 bd       	out	0x21, r24	; 33
    2ee4:	20 bd       	out	0x20, r18	; 32
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	fa 9a       	sbi	0x1f, 2	; 31
    2eec:	f9 9a       	sbi	0x1f, 1	; 31
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	01 96       	adiw	r24, 0x01	; 1
    2ef2:	08 95       	ret

00002ef4 <_exit>:
    2ef4:	f8 94       	cli

00002ef6 <__stop_program>:
    2ef6:	ff cf       	rjmp	.-2      	; 0x2ef6 <__stop_program>
